{
    parserClass="de.cofinpro.intellij.acfeplugin.parser.FormulaEngineParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="FormulaEngine"
    psiImplClassSuffix="Impl"
    psiPackage="de.cofinpro.intellij.acfeplugin.psi"
    psiImplPackage="de.cofinpro.intellij.acfeplugin.psi.impl"

    elementTypeHolderClass="de.cofinpro.intellij.acfeplugin.psi.FormulaEngineElementTypes"
    elementTypeClass="de.cofinpro.intellij.acfeplugin.psi.FormulaEngineElementType"
    tokenTypeClass="de.cofinpro.intellij.acfeplugin.psi.FormulaEngineTokenType"

    tokens = [
            LEFT_PARENTHESIS = '('
            RIGHT_PARENTHESIS = ')'
            LEFT_CURLY_BRACE = '{'
            RIGHT_CURLY_BRACE = '}'
            LEFT_BRACKET = '['
            RIGHT_BRACKET = ']'

            COMMA = ','

            OPERATOR_ASSIGNMENT = '='
            OPERATOR_AND = '&&'
            OPERATOR_EQUAL = '=='
            OPERATOR_NEGATION = '!'

            KEYWORD_ELSE = 'else'
            KEYWORD_FOR = 'for'
            KEYWORD_FUNCTION = 'function'
            KEYWORD_IF = 'if'
            KEYWORD_RETURN = 'return'
            KEYWORD_WHILE = 'while'

            TYPE_INTEGER = 'integer'
            TYPE_FLOAT = 'float'
            TYPE_DATE = 'date'
            TYPE_STRING = 'string'
            TYPE_LIST = 'list'
            TYPE_DICT = 'dict'
            TYPE_ANY = 'any'

            VISIBILITY_GLOBAL = 'global'
            VISIBILITY_LOCAL = 'local'

            BUILT_IN_VAR_NA = '$NA'

            BUILT_IN_FUNC_ATTRIBUTE = 'attribute'
            BUILT_IN_FUNC_DATE = 'date'
            BUILT_IN_FUNC_DATETIME = 'datetime'
            BUILT_IN_FUNC_DAYDIFF = 'daydiff'
            BUILT_IN_FUNC_DAYPLUS = 'dayplus'
            BUILT_IN_FUNC_ELT = 'elt'
            BUILT_IN_FUNC_FIRST = 'first'
            BUILT_IN_FUNC_FLOAT = 'float'
            BUILT_IN_FUNC_HASH_GET = 'hash_get'
            BUILT_IN_FUNC_HASH_ISKEY = 'hash_iskey'
            BUILT_IN_FUNC_HASH_KEYS = 'hash_keys'
            BUILT_IN_FUNC_HASH_PUT = 'hash_put'
            BUILT_IN_FUNC_INTEGER = 'integer'
            BUILT_IN_FUNC_IS_LIST = 'is_list'
            BUILT_IN_FUNC_IS_NA = 'is_na'
            BUILT_IN_FUNC_IS_STRING = 'is_string'
            BUILT_IN_FUNC_KERNEL = 'kernel'
            BUILT_IN_FUNC_LEN = 'len'
            BUILT_IN_FUNC_LOAD = 'load'
            BUILT_IN_FUNC_REMOVE = 'remove'
            BUILT_IN_FUNC_STATUS = 'status'
            BUILT_IN_FUNC_STR = 'str'
            BUILT_IN_FUNC_OUT = 'out'

            DOUBLE_QUOTED_STRING_LITERAL = 'double quoted string literal'
            SINGLE_QUOTED_STRING_LITERAL = 'single quoted string literal'
            DOUBLE_QUOTED_STRING="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"
            SINGLE_QUOTED_STRING="regexp:'([^\\\'\r\n]|\\[^\r\n])*'?"

            IDENTIFIER = 'regexp:[a-zA-Z_][a-zA-Z0-9_]*'
            LINE_COMMENT='regexp://.*'
            BLOCK_COMMENT='regexp:/\*([^*]|\*+[^*/])*(\*+/)?'
            WHITE_SPACE = 'regexp:\s+'

            NUMBER_INTEGER = 'regexp:[0-9]+'
    ]
}

feFile ::= TopLevelItem*

TopLevelItem ::= FunctionDefinition | ControlStructure | Statement

FunctionDefinition ::= KEYWORD_FUNCTION IDENTIFIER LEFT_PARENTHESIS FunctionParameters? RIGHT_PARENTHESIS LEFT_CURLY_BRACE FunctionBody RIGHT_CURLY_BRACE
FunctionParameters ::= FunctionParameter (COMMA FunctionParameter)*
FunctionParameter ::= Type? IDENTIFIER

FunctionArguments ::= FunctionArgument (COMMA FunctionArgument)*
FunctionArgument ::= Expression

// Control Structures
ControlStructure ::= ControlStructureKeyword LEFT_PARENTHESIS Expression RIGHT_PARENTHESIS LEFT_CURLY_BRACE ControlStructureBody RIGHT_CURLY_BRACE
ControlStructureKeyword ::= KEYWORD_IF | KEYWORD_FOR | KEYWORD_WHILE
ControlStructureBody ::= (ControlStructure | Statement)*

Expression ::=  SingleExpression (Operator SingleExpression)*
SingleExpression ::= FunctionInvocation | Constant | NegatedExpression | IDENTIFIER
NegatedExpression ::= OPERATOR_NEGATION SingleExpression | OPERATOR_NEGATION LEFT_PARENTHESIS SingleExpression RIGHT_PARENTHESIS
Operator ::= OPERATOR_AND | OPERATOR_EQUAL

StringLiteral ::= SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING
ListLiteral ::= LEFT_BRACKET RIGHT_BRACKET

FunctionInvocation ::= (BuiltInFunctionName | CustomFunctionName) LEFT_PARENTHESIS FunctionArguments? RIGHT_PARENTHESIS
CustomFunctionName ::= IDENTIFIER

BuiltInFunctionName ::= BUILT_IN_FUNC_ATTRIBUTE | BUILT_IN_FUNC_STATUS
    | BUILT_IN_FUNC_DATE | BUILT_IN_FUNC_DATETIME | BUILT_IN_FUNC_STR | BUILT_IN_FUNC_FLOAT | BUILT_IN_FUNC_INTEGER
    | BUILT_IN_FUNC_DAYDIFF | BUILT_IN_FUNC_DAYPLUS
    | BUILT_IN_FUNC_ELT
    | BUILT_IN_FUNC_FIRST
    | BUILT_IN_FUNC_HASH_GET | BUILT_IN_FUNC_HASH_PUT | BUILT_IN_FUNC_HASH_ISKEY | BUILT_IN_FUNC_HASH_KEYS
    | BUILT_IN_FUNC_IS_LIST | BUILT_IN_FUNC_IS_NA | BUILT_IN_FUNC_IS_STRING
    | BUILT_IN_FUNC_KERNEL
    | BUILT_IN_FUNC_LEN
    | BUILT_IN_FUNC_LOAD
    | BUILT_IN_FUNC_OUT
    | BUILT_IN_FUNC_REMOVE
FunctionBody ::= FunctionBodyStatement*
Statement ::= (Assignment | Declaration | FunctionInvocation) ';'
FunctionBodyStatement ::= ControlStructure | ((FunctionInvocation | Assignment | Declaration | ReturnStatement) ';')

Declaration ::= Visibility? Type? IDENTIFIER
Assignment ::=  Visibility? Declaration '=' (Constant | FunctionInvocation | IDENTIFIER)

ReturnStatement ::= KEYWORD_RETURN IDENTIFIER

Visibility ::= VISIBILITY_GLOBAL | VISIBILITY_LOCAL
Type ::= TYPE_INTEGER | TYPE_FLOAT | TYPE_DATE | TYPE_STRING | TYPE_LIST | TYPE_DICT | TYPE_ANY

Constant ::= BuiltInVariableName | NUMBER_INTEGER | StringLiteral | ListLiteral
BuiltInVariableName ::= BUILT_IN_VAR_NA