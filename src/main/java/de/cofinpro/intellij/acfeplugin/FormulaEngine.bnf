{
    parserClass="de.cofinpro.intellij.acfeplugin.parser.FormulaEngineParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="FormulaEngine"
    psiImplClassSuffix="Impl"
    psiPackage="de.cofinpro.intellij.acfeplugin.psi"
    psiImplPackage="de.cofinpro.intellij.acfeplugin.psi.impl"

    elementTypeHolderClass="de.cofinpro.intellij.acfeplugin.psi.FormulaEngineElementTypes"
    elementTypeClass="de.cofinpro.intellij.acfeplugin.psi.FormulaEngineElementType"
    tokenTypeClass="de.cofinpro.intellij.acfeplugin.psi.FormulaEngineTokenType"

    tokens = [
            LEFT_PARENTHESIS = '('
            RIGHT_PARENTHESIS = ')'
            LEFT_CURLY_BRACE = '{'
            RIGHT_CURLY_BRACE = '}'
            LEFT_BRACKET = '['
            RIGHT_BRACKET = ']'

            OPERATOR_EQUALS = '='

            KEYWORD_ELSE = 'else'
            KEYWORD_FOR = 'for'
            KEYWORD_IF = 'if'
            KEYWORD_WHILE = 'while'

            BUILT_IN_VAR_NA = '$NA'

            BUILT_IN_FUNC_FLOAT = 'float('
            BUILT_IN_FUNC_INTEGER = 'integer('

            DOUBLE_QUOTED_STRING_LITERAL = 'double quoted string literal'

            IDENTIFIER = 'regexp:[a-zA-Z_][a-zA-Z0-9_]*'
            LINE_COMMENT='regexp://.*'
            BLOCK_COMMENT='regexp:/\*([^*]|\*+[^*/])*(\*+/)?'
            WHITE_SPACE = 'regexp:\s+'

            NUMBER_INTEGER = 'regexp:[0-9]+'
    ]
}

feFile ::= TopLevelItem*

TopLevelItem ::= FunctionDefinition | GlobalAssignment | GlobalDeclaration

FunctionDefinition ::= function IDENTIFIER '(' FunctionParameters? ')' '{' FunctionBody '}'
FunctionParameters ::= FunctionParameter (',' FunctionParameter)*
FunctionParameter ::= TypePrefix? IDENTIFIER


FunctionArguments ::= IDENTIFIER (',' IDENTIFIER)*
FunctionInvocation ::= (BuiltInFunctionName | CustomFunctionName) '(' FunctionArguments? ')'
CustomFunctionName ::= IDENTIFIER

BuiltInFunctionName ::= attribute | status
    | date | datetime | str
    | dayplus | daydiff
    | elt
    | is_list | is_na
    | len
    | load
    | remove
FunctionBody ::= Statement*
Statement ::= (LocalAssignment | LocalDeclaration | ReturnStatement) ';'

Declaration ::= TypePrefix? IDENTIFIER
GlobalDeclaration ::= global Declaration ';'
LocalDeclaration ::= local? Declaration

GlobalAssignment ::= global Assignment ';'
LocalAssignment ::= local? Assignment
Assignment ::=  Declaration '=' (Constant | FunctionInvocation)
ReturnStatement ::= return IDENTIFIER

VisibilityPrefix ::= local | global
TypePrefix ::= integer | float | date | string | list | dict | any

Constant ::= BuiltInVariableName | NUMBER_INTEGER
BuiltInVariableName ::= BUILT_IN_VAR_NA