{
    parserClass="de.cofinpro.intellij.acfeplugin.parser.FormulaEngineParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="FormulaEngine"
    psiImplClassSuffix="Impl"
    psiPackage="de.cofinpro.intellij.acfeplugin.psi"
    psiImplPackage="de.cofinpro.intellij.acfeplugin.psi.impl"

    elementTypeHolderClass="de.cofinpro.intellij.acfeplugin.psi.FormulaEngineElementTypes"
    elementTypeClass="de.cofinpro.intellij.acfeplugin.psi.FormulaEngineElementType"
    tokenTypeClass="de.cofinpro.intellij.acfeplugin.psi.FormulaEngineTokenType"

    tokens = [
            LEFT_PARENTHESIS = '('
            RIGHT_PARENTHESIS = ')'
            LEFT_CURLY_BRACE = '{'
            RIGHT_CURLY_BRACE = '}'
            LEFT_BRACKET = '['
            RIGHT_BRACKET = ']'

            OPERATOR_EQUALS = '='

            KEYWORD_ELSE = 'else'
            KEYWORD_FOR = 'for'
            KEYWORD_IF = 'if'
            KEYWORD_WHILE = 'while'

            BUILT_IN_VAR_NA = '$NA'

            BUILT_IN_FUNC_FLOAT = 'float('
            BUILT_IN_FUNC_INTEGER = 'integer('
            BUILT_IN_FUNC_OUT = 'out('

            DOUBLE_QUOTED_STRING_LITERAL = 'double quoted string literal'
            SINGLE_QUOTED_STRING_LITERAL = 'single quoted string literal'
            DOUBLE_QUOTED_STRING="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"
            SINGLE_QUOTED_STRING="regexp:'([^\\\'\r\n]|\\[^\r\n])*'?"

            IDENTIFIER = 'regexp:[a-zA-Z_][a-zA-Z0-9_]*'
            LINE_COMMENT='regexp://.*'
            BLOCK_COMMENT='regexp:/\*([^*]|\*+[^*/])*(\*+/)?'
            WHITE_SPACE = 'regexp:\s+'

            NUMBER_INTEGER = 'regexp:[0-9]+'
    ]
}

feFile ::= TopLevelItem*

TopLevelItem ::= FunctionDefinition | ControlStructure | Statement

FunctionDefinition ::= function IDENTIFIER '(' FunctionParameters? ')' '{' FunctionBody '}'
FunctionParameters ::= FunctionParameter (',' FunctionParameter)*
FunctionParameter ::= TypePrefix? IDENTIFIER


FunctionArguments ::= FunctionArgument (',' FunctionArgument)*
FunctionArgument ::= StringLiteral | IDENTIFIER

// Control Structures
ControlStructure ::= ControlStructureKeyword '(' Expression ')' '{' ControlStructureBody '}'
ControlStructureKeyword ::= KEYWORD_IF | KEYWORD_FOR | KEYWORD_WHILE
Expression ::= '!'? IDENTIFIER
ControlStructureBody ::= (ControlStructure | Statement)*

StringLiteral ::= SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING
ListLiteral ::= LEFT_BRACKET RIGHT_BRACKET

FunctionInvocation ::= (BuiltInFunctionName | CustomFunctionName) '(' FunctionArguments? ')'
CustomFunctionName ::= IDENTIFIER

BuiltInFunctionName ::= attribute | status
    | date | datetime | str | BUILT_IN_FUNC_FLOAT | BUILT_IN_FUNC_INTEGER
    | dayplus | daydiff
    | elt
    | hash_get | hash_put | hash_keys | hash_iskey
    | is_list | is_na
    | kernel
    | len
    | load
    | BUILT_IN_FUNC_OUT
    | remove
FunctionBody ::= FunctionBodyStatement*
Statement ::= (Assignment | Declaration | FunctionInvocation) ';'
FunctionBodyStatement ::= (Assignment | Declaration | ReturnStatement) ';'


Declaration ::= VisibilityPrefix? TypePrefix? IDENTIFIER
Assignment ::=  VisibilityPrefix? Declaration '=' (Constant | FunctionInvocation)

ReturnStatement ::= return IDENTIFIER

VisibilityPrefix ::= local | global
TypePrefix ::= integer | float | date | string | list | dict | any

Constant ::= BuiltInVariableName | NUMBER_INTEGER | StringLiteral | ListLiteral
BuiltInVariableName ::= BUILT_IN_VAR_NA