/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package de.cofinpro.intellij.acfeplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import de.cofinpro.intellij.acfeplugin.lex.FormulaEngineLexerStateTracker;
import de.cofinpro.intellij.acfeplugin.lex.IFormulaEngineLexer;
import de.cofinpro.intellij.acfeplugin.psi.FormulaEngineElementType;
import de.cofinpro.intellij.acfeplugin.psi.FormulaEngineElementTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>FormulaEngine.flex</tt>
 */
public class FormulaEngineLexer implements IFormulaEngineLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_PARENTHESIS = 2;
  public static final int IN_FUNCTION_HEADER = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\6\1\0\1\1\1\6\22\0\1\1\1\56\1\7\1\0\1\63\1\55\1\47\1\4\1\41\1"+
    "\42\1\11\1\53\1\106\1\51\1\12\1\10\12\3\1\110\1\107\1\54\1\50\1\52\1\111\1"+
    "\0\1\65\1\76\1\102\1\70\1\74\1\103\1\105\1\2\1\72\2\2\1\77\1\73\1\64\1\67"+
    "\1\100\1\2\1\101\1\75\1\66\1\104\3\2\1\71\1\2\1\45\1\5\1\46\1\0\1\35\1\0\1"+
    "\13\1\17\1\60\1\22\1\21\1\25\1\33\1\34\1\16\1\2\1\36\1\27\1\23\1\32\1\31\1"+
    "\26\1\61\1\15\1\30\1\14\1\20\1\40\1\62\1\37\1\24\1\2\1\43\1\57\1\44\202\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\16\3\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\1\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\1\2\3\1\1\1\26\1\27\1\30\1\31\14\3"+
    "\1\32\1\33\1\34\1\35\2\5\2\6\1\36\1\0"+
    "\3\3\1\37\7\3\1\40\13\3\1\41\4\3\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\2\3\7\0\20\3\1\0\1\3\1\54\1\55"+
    "\20\3\1\56\6\3\1\57\7\3\1\60\13\0\4\3"+
    "\1\61\2\3\1\62\1\63\3\3\1\64\2\3\1\65"+
    "\1\66\2\3\1\67\10\3\1\70\1\71\1\72\2\3"+
    "\1\73\1\3\1\74\1\75\3\3\1\76\1\77\4\3"+
    "\1\100\1\3\1\101\3\3\1\102\1\3\14\0\6\3"+
    "\1\103\4\3\1\104\1\105\13\3\1\106\1\3\1\107"+
    "\5\3\1\110\1\111\1\112\1\113\6\3\1\114\1\115"+
    "\3\0\1\116\7\0\4\3\1\117\4\3\1\120\1\121"+
    "\5\3\1\122\3\3\1\123\5\3\1\124\1\3\1\125"+
    "\1\3\1\126\1\127\1\130\5\3\1\131\11\0\1\132"+
    "\1\3\1\133\6\3\1\134\1\135\4\3\1\136\1\3"+
    "\1\137\2\3\1\140\3\3\1\141\1\3\1\142\1\143"+
    "\4\3\1\144\1\0\1\145\1\0\1\146\1\147\1\150"+
    "\1\151\1\152\1\0\1\153\1\3\1\154\1\3\1\155"+
    "\1\3\1\156\1\157\5\3\1\160\1\3\1\161\1\162"+
    "\1\163\1\164\1\165\4\3\3\0\2\3\1\166\1\3"+
    "\1\167\1\170\3\3\1\171\1\3\1\172\1\173\1\3"+
    "\3\0\1\174\1\175\1\3\1\176\1\177\1\200\1\3"+
    "\1\201\1\202\1\0\1\203\1\204\1\205\2\0\1\206"+
    "\10\0\1\207";

  private static int [] zzUnpackAction() {
    int [] result = new int[459];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\336\0\u0128\0\u0172\0\u01bc"+
    "\0\u0206\0\u0250\0\336\0\u029a\0\u02e4\0\u032e\0\u0378\0\u03c2"+
    "\0\u040c\0\u0456\0\u04a0\0\u04ea\0\u0534\0\u057e\0\u05c8\0\u0612"+
    "\0\u065c\0\336\0\336\0\336\0\336\0\336\0\336\0\u06a6"+
    "\0\u06f0\0\u073a\0\u0784\0\u07ce\0\u0818\0\336\0\u0862\0\u08ac"+
    "\0\u08f6\0\u0940\0\u098a\0\336\0\336\0\336\0\336\0\u09d4"+
    "\0\u0a1e\0\u0a68\0\u0ab2\0\u0afc\0\u0b46\0\u0b90\0\u0bda\0\u0c24"+
    "\0\u0c6e\0\u0cb8\0\u0d02\0\336\0\336\0\336\0\u0d4c\0\336"+
    "\0\u0d96\0\u0de0\0\336\0\u0e2a\0\u0e74\0\u0ebe\0\u0f08\0\u0f52"+
    "\0\u0128\0\u0f9c\0\u0fe6\0\u1030\0\u107a\0\u10c4\0\u110e\0\u1158"+
    "\0\u0128\0\u11a2\0\u11ec\0\u1236\0\u1280\0\u12ca\0\u1314\0\u135e"+
    "\0\u13a8\0\u13f2\0\u143c\0\u1486\0\u0128\0\u14d0\0\u151a\0\u1564"+
    "\0\u15ae\0\336\0\336\0\336\0\336\0\336\0\336\0\336"+
    "\0\336\0\336\0\336\0\u15f8\0\u1642\0\u168c\0\u16d6\0\u1720"+
    "\0\u176a\0\u17b4\0\u17fe\0\u1848\0\u1892\0\u18dc\0\u1926\0\u1970"+
    "\0\u19ba\0\u1a04\0\u1a4e\0\u1a98\0\u1ae2\0\u1b2c\0\u1b76\0\u1bc0"+
    "\0\u1c0a\0\u1c54\0\u1c9e\0\u1ce8\0\u1d32\0\u1d7c\0\u0128\0\u0128"+
    "\0\u1dc6\0\u1e10\0\u1e5a\0\u1ea4\0\u1eee\0\u1f38\0\u1f82\0\u1fcc"+
    "\0\u2016\0\u2060\0\u20aa\0\u20f4\0\u213e\0\u2188\0\u21d2\0\u221c"+
    "\0\u0128\0\u2266\0\u22b0\0\u22fa\0\u2344\0\u238e\0\u23d8\0\u0128"+
    "\0\u2422\0\u246c\0\u24b6\0\u2500\0\u254a\0\u2594\0\u25de\0\u2628"+
    "\0\u2672\0\u26bc\0\u2706\0\u2750\0\u279a\0\u27e4\0\u282e\0\u2878"+
    "\0\u28c2\0\u290c\0\u2956\0\u29a0\0\u29ea\0\u2a34\0\u2a7e\0\u1f38"+
    "\0\u2ac8\0\u2b12\0\u20f4\0\u213e\0\u2b5c\0\u2ba6\0\u2bf0\0\u22b0"+
    "\0\u2c3a\0\u2c84\0\u2cce\0\u246c\0\u2d18\0\u2d62\0\336\0\u2dac"+
    "\0\u2df6\0\u2e40\0\u2e8a\0\u2ed4\0\u2f1e\0\u2f68\0\u2fb2\0\336"+
    "\0\u0128\0\u2ffc\0\u3046\0\u3090\0\u0128\0\u30da\0\336\0\336"+
    "\0\u3124\0\u316e\0\u31b8\0\u3202\0\336\0\u324c\0\u3296\0\u32e0"+
    "\0\u332a\0\336\0\u3374\0\336\0\u33be\0\u3408\0\u3452\0\u0128"+
    "\0\u349c\0\u34e6\0\u3530\0\u357a\0\u35c4\0\u360e\0\u3658\0\u36a2"+
    "\0\u36ec\0\u3736\0\u3780\0\u37ca\0\u3814\0\u385e\0\u38a8\0\u38f2"+
    "\0\u393c\0\u3986\0\u39d0\0\u3a1a\0\u3a64\0\u3aae\0\u3af8\0\u3b42"+
    "\0\u3202\0\u324c\0\u3b8c\0\u3bd6\0\u3c20\0\u3c6a\0\u3cb4\0\u3cfe"+
    "\0\u3d48\0\u3d92\0\u3ddc\0\u3e26\0\u3e70\0\u0128\0\u3eba\0\336"+
    "\0\u3f04\0\u3f4e\0\u3f98\0\u3fe2\0\u402c\0\u4076\0\336\0\336"+
    "\0\u0128\0\u40c0\0\u410a\0\u4154\0\u419e\0\u41e8\0\u4232\0\u0128"+
    "\0\336\0\u427c\0\u42c6\0\u4310\0\336\0\u435a\0\u43a4\0\u43ee"+
    "\0\u4438\0\u4482\0\u44cc\0\u4516\0\u4560\0\u45aa\0\u45f4\0\u463e"+
    "\0\u3e26\0\u4688\0\u46d2\0\u471c\0\u4766\0\u3fe2\0\u4076\0\u47b0"+
    "\0\u47fa\0\u4844\0\u488e\0\u48d8\0\u0128\0\u4922\0\u496c\0\u49b6"+
    "\0\336\0\u4a00\0\u4a4a\0\u4a94\0\u4ade\0\u4b28\0\336\0\u4b72"+
    "\0\336\0\u4bbc\0\u4c06\0\u0128\0\u0128\0\u4c50\0\u4c9a\0\u4ce4"+
    "\0\u4d2e\0\u4d78\0\336\0\u4dc2\0\u4e0c\0\u4e56\0\u4ea0\0\u4eea"+
    "\0\u4f34\0\u4f7e\0\u4fc8\0\u5012\0\u505c\0\u50a6\0\u4922\0\u50f0"+
    "\0\u513a\0\u5184\0\u51ce\0\u5218\0\u5262\0\u4bbc\0\u4c06\0\u52ac"+
    "\0\u52f6\0\u5340\0\u538a\0\u4d78\0\u53d4\0\336\0\u541e\0\u5468"+
    "\0\u54b2\0\u54fc\0\u5546\0\u5590\0\u0128\0\u55da\0\336\0\336"+
    "\0\u5624\0\u566e\0\u56b8\0\u5702\0\336\0\u574c\0\336\0\u5796"+
    "\0\336\0\336\0\336\0\336\0\336\0\u57e0\0\336\0\u582a"+
    "\0\u541e\0\u5874\0\u54b2\0\u58be\0\u5546\0\u5590\0\u5908\0\u5952"+
    "\0\u599c\0\u59e6\0\u5a30\0\336\0\u5a7a\0\336\0\u5ac4\0\336"+
    "\0\336\0\u0128\0\u5b0e\0\u5b58\0\u5ba2\0\u5bec\0\u5c36\0\u5c80"+
    "\0\u5cca\0\u5d14\0\u5d5e\0\u5ac4\0\u5da8\0\u5b58\0\u5ba2\0\u5df2"+
    "\0\u5e3c\0\u5e86\0\336\0\u5ed0\0\336\0\336\0\u5f1a\0\u5f64"+
    "\0\u5fae\0\u5ff8\0\u5e3c\0\u5e86\0\u6042\0\u5f1a\0\336\0\336"+
    "\0\u608c\0\336\0\336\0\u60d6\0\336\0\u608c\0\336\0\u6120"+
    "\0\u616a\0\u61b4\0\u61fe\0\u6248\0\u6292\0\u62dc\0\u6326\0\u6370"+
    "\0\u63ba\0\u6404\0\336";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[459];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\4\1\5\1\11"+
    "\1\12\1\13\1\4\1\14\1\6\1\15\1\16\1\17"+
    "\1\6\1\20\1\21\1\22\1\6\1\23\1\6\1\24"+
    "\1\25\1\26\1\6\1\27\1\30\1\6\1\31\2\6"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\6\1\52\1\53\22\6\1\54\1\55\1\56\1\57"+
    "\1\4\1\5\1\6\1\7\1\10\1\4\1\5\1\11"+
    "\1\12\1\13\1\4\1\60\1\6\1\61\1\62\1\17"+
    "\1\6\1\63\1\64\1\65\1\6\1\66\1\6\1\67"+
    "\1\70\1\71\1\6\1\27\1\72\1\6\1\73\2\6"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\6\1\52\1\53\22\6\1\54\1\55\1\56\1\57"+
    "\1\4\1\5\1\6\1\7\1\10\1\4\1\5\1\11"+
    "\1\12\1\13\1\4\1\14\1\6\1\15\1\16\1\17"+
    "\1\6\1\20\1\21\1\22\1\6\1\23\1\6\1\24"+
    "\1\25\1\26\1\6\1\27\1\30\1\6\1\31\2\6"+
    "\1\74\1\75\1\76\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\6\1\52\1\53\22\6\1\54\1\55\1\56\1\57"+
    "\114\0\2\6\7\0\26\6\17\0\3\6\1\0\22\6"+
    "\7\0\1\7\6\0\1\77\77\0\4\10\1\100\1\101"+
    "\1\0\103\10\5\11\1\102\1\0\1\103\102\11\10\0"+
    "\1\104\1\105\102\0\2\6\7\0\1\6\1\106\15\6"+
    "\1\107\6\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\6\6\1\110\17\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\12\6\1\111\2\6\1\112\1\6"+
    "\1\113\6\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\2\6\1\114\23\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\14\6\1\115\11\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\1\116\2\6\1\117"+
    "\2\6\1\120\7\6\1\121\7\6\17\0\3\6\1\0"+
    "\22\6\6\0\2\6\7\0\1\122\25\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\3\6\1\123\1\6"+
    "\1\124\6\6\1\125\1\6\1\126\7\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\3\6\1\127\2\6"+
    "\1\130\7\6\1\131\7\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\1\6\1\132\4\6\1\133\17\6"+
    "\17\0\2\6\1\134\1\0\22\6\6\0\2\6\7\0"+
    "\2\6\1\135\2\6\1\136\20\6\17\0\3\6\1\0"+
    "\22\6\6\0\2\6\7\0\14\6\1\137\11\6\17\0"+
    "\3\6\1\0\22\6\6\0\2\6\7\0\1\140\25\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\6\6"+
    "\1\141\17\6\17\0\3\6\1\0\22\6\53\0\1\142"+
    "\112\0\1\143\111\0\1\144\1\145\110\0\1\146\111\0"+
    "\1\147\2\0\1\150\106\0\1\151\111\0\1\152\120\0"+
    "\1\153\34\0\2\6\7\0\1\154\25\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\21\6\1\155\4\6"+
    "\17\0\3\6\1\0\22\6\70\0\1\156\1\0\1\157"+
    "\1\0\1\160\4\0\1\161\1\0\1\162\1\163\2\0"+
    "\1\164\10\0\2\6\7\0\1\6\1\165\15\6\1\107"+
    "\6\6\17\0\3\6\1\0\22\6\6\0\2\6\7\0"+
    "\6\6\1\166\17\6\17\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\12\6\1\111\2\6\1\167\1\6\1\170"+
    "\6\6\17\0\3\6\1\0\22\6\6\0\2\6\7\0"+
    "\14\6\1\171\11\6\17\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\1\172\2\6\1\117\2\6\1\120\7\6"+
    "\1\121\7\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\1\173\25\6\17\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\3\6\1\174\1\6\1\124\6\6\1\175"+
    "\1\6\1\126\7\6\17\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\3\6\1\176\2\6\1\177\7\6\1\200"+
    "\7\6\17\0\3\6\1\0\22\6\6\0\2\6\7\0"+
    "\1\6\1\201\4\6\1\133\17\6\17\0\2\6\1\134"+
    "\1\0\22\6\6\0\2\6\7\0\2\6\1\135\2\6"+
    "\1\202\20\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\1\203\25\6\17\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\6\6\1\204\17\6\17\0\3\6\1\0"+
    "\22\6\7\0\1\77\106\0\112\10\112\11\6\104\1\0"+
    "\103\104\11\105\1\205\100\105\2\0\2\6\7\0\1\6"+
    "\1\206\24\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\7\6\1\207\1\6\1\210\14\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\1\6\1\211\6\6"+
    "\1\212\15\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\22\6\1\213\3\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\1\6\1\214\24\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\6\6\1\215\17\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\1\6"+
    "\1\216\13\6\1\217\10\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\1\6\1\220\7\6\1\221\14\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\26\6"+
    "\17\0\1\222\2\6\1\0\22\6\6\0\2\6\7\0"+
    "\12\6\1\223\13\6\17\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\13\6\1\224\10\6\1\225\1\6\17\0"+
    "\3\6\1\0\22\6\6\0\2\6\7\0\2\6\1\226"+
    "\23\6\17\0\3\6\1\0\22\6\6\0\2\6\7\0"+
    "\17\6\1\227\6\6\17\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\16\6\1\230\7\6\17\0\3\6\1\0"+
    "\22\6\6\0\2\6\7\0\2\6\1\231\23\6\17\0"+
    "\3\6\1\0\22\6\6\0\2\6\7\0\15\6\1\232"+
    "\10\6\17\0\3\6\1\0\22\6\6\0\2\6\7\0"+
    "\17\6\1\233\6\6\17\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\1\234\25\6\17\0\1\235\2\6\1\0"+
    "\22\6\6\0\2\6\7\0\1\236\1\6\1\237\23\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\26\6"+
    "\17\0\1\6\1\240\1\6\1\0\22\6\6\0\2\6"+
    "\7\0\3\6\1\241\22\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\1\6\1\242\24\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\16\6\1\243\7\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\15\6"+
    "\1\244\10\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\2\6\1\245\23\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\15\6\1\246\10\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\3\6\1\247\22\6"+
    "\17\0\3\6\1\0\22\6\71\0\1\250\113\0\1\251"+
    "\2\0\1\252\6\0\1\253\75\0\1\254\6\0\1\255"+
    "\103\0\1\256\2\0\1\257\112\0\1\260\104\0\1\261"+
    "\13\0\1\262\102\0\1\263\21\0\2\6\7\0\1\6"+
    "\1\264\24\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\1\6\1\211\6\6\1\265\15\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\22\6\1\266\3\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\1\6"+
    "\1\267\24\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\1\6\1\270\13\6\1\217\10\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\1\6\1\271\7\6"+
    "\1\272\14\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\13\6\1\273\10\6\1\274\1\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\2\6\1\275\23\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\16\6"+
    "\1\276\7\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\15\6\1\277\10\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\17\6\1\300\6\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\1\301\25\6\17\0"+
    "\1\235\2\6\1\0\22\6\6\0\2\6\7\0\1\302"+
    "\1\6\1\303\23\6\17\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\1\6\1\304\24\6\17\0\3\6\1\0"+
    "\22\6\6\0\2\6\7\0\15\6\1\305\10\6\17\0"+
    "\3\6\1\0\22\6\6\0\2\6\7\0\2\6\1\306"+
    "\23\6\17\0\3\6\1\0\22\6\4\0\10\105\1\307"+
    "\1\205\100\105\2\0\2\6\7\0\2\6\1\310\23\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\5\6"+
    "\1\311\20\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\16\6\1\312\7\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\14\6\1\313\1\314\1\6\1\315"+
    "\6\6\17\0\3\6\1\0\22\6\6\0\2\6\7\0"+
    "\6\6\1\316\17\6\17\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\1\317\25\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\26\6\1\320\16\0\3\6\1\0"+
    "\22\6\6\0\2\6\7\0\6\6\1\321\17\6\17\0"+
    "\3\6\1\0\22\6\6\0\2\6\7\0\6\6\1\322"+
    "\17\6\17\0\3\6\1\0\22\6\6\0\2\6\7\0"+
    "\7\6\1\323\3\6\1\324\12\6\17\0\3\6\1\0"+
    "\22\6\6\0\2\6\7\0\1\6\1\325\24\6\17\0"+
    "\3\6\1\0\22\6\6\0\2\6\7\0\1\326\25\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\26\6"+
    "\1\327\16\0\3\6\1\0\22\6\6\0\2\6\7\0"+
    "\26\6\1\330\16\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\15\6\1\331\10\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\26\6\17\0\1\332\2\6\1\0"+
    "\22\6\6\0\2\6\7\0\1\333\25\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\1\6\1\334\24\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\26\6"+
    "\1\335\16\0\3\6\1\0\22\6\6\0\2\6\7\0"+
    "\7\6\1\336\16\6\17\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\1\337\25\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\1\6\1\340\24\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\3\6\1\341\22\6"+
    "\1\342\16\0\3\6\1\0\22\6\6\0\2\6\7\0"+
    "\1\6\1\343\24\6\17\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\26\6\1\344\16\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\4\6\1\345\21\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\21\6\1\346\4\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\17\6"+
    "\1\347\6\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\6\6\1\350\17\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\14\6\1\351\11\6\17\0\3\6"+
    "\1\0\22\6\77\0\1\352\106\0\1\353\114\0\1\354"+
    "\112\0\1\355\103\0\1\356\123\0\1\357\76\0\1\360"+
    "\117\0\1\361\113\0\1\362\111\0\1\363\103\0\1\364"+
    "\116\0\1\365\17\0\2\6\7\0\2\6\1\366\23\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\16\6"+
    "\1\367\7\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\14\6\1\370\1\371\1\6\1\372\6\6\17\0"+
    "\3\6\1\0\22\6\6\0\2\6\7\0\6\6\1\373"+
    "\17\6\17\0\3\6\1\0\22\6\6\0\2\6\7\0"+
    "\6\6\1\374\17\6\17\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\7\6\1\375\3\6\1\376\12\6\17\0"+
    "\3\6\1\0\22\6\6\0\2\6\7\0\15\6\1\377"+
    "\10\6\17\0\3\6\1\0\22\6\6\0\2\6\7\0"+
    "\1\u0100\25\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\1\6\1\u0101\24\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\7\6\1\u0102\16\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\1\6\1\u0103\24\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\3\6"+
    "\1\u0104\22\6\1\342\16\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\21\6\1\u0105\4\6\17\0\3\6\1\0"+
    "\22\6\6\0\2\6\7\0\17\6\1\u0106\6\6\17\0"+
    "\3\6\1\0\22\6\6\0\2\6\7\0\3\6\1\u0107"+
    "\22\6\17\0\3\6\1\0\22\6\6\0\2\6\7\0"+
    "\2\6\1\u0108\23\6\17\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\25\6\1\u0109\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\3\6\1\u010a\22\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\1\6\1\u010b\24\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\1\u010c"+
    "\25\6\17\0\3\6\1\0\22\6\6\0\2\6\7\0"+
    "\20\6\1\u010d\5\6\17\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\23\6\1\u010e\2\6\17\0\3\6\1\0"+
    "\22\6\6\0\2\6\7\0\1\6\1\u010f\24\6\1\u0110"+
    "\16\0\3\6\1\0\22\6\6\0\2\6\7\0\3\6"+
    "\1\u0111\22\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\14\6\1\u0112\11\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\5\6\1\u0113\20\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\1\6\1\u0114\24\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\1\6"+
    "\1\u0115\24\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\1\6\1\u0116\24\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\26\6\1\u0117\16\0\3\6\1\0"+
    "\22\6\6\0\2\6\7\0\26\6\1\u0118\16\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\14\6\1\u0119\11\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\5\6"+
    "\1\u011a\20\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\17\6\1\u011b\6\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\26\6\17\0\1\u011c\2\6\1\0"+
    "\22\6\6\0\2\6\7\0\1\u011d\25\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\22\6\1\u011e\3\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\6\6"+
    "\1\u011f\17\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\6\6\1\u0120\17\6\17\0\3\6\1\0\22\6"+
    "\100\0\1\u0121\102\0\1\u0122\120\0\1\u0123\111\0\1\u0124"+
    "\102\0\1\u0125\120\0\1\u0126\103\0\1\u0127\121\0\1\u0128"+
    "\101\0\1\u0129\120\0\1\u012a\116\0\1\u012b\106\0\1\u012c"+
    "\14\0\2\6\7\0\3\6\1\u012d\22\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\25\6\1\u012e\17\0"+
    "\3\6\1\0\22\6\6\0\2\6\7\0\3\6\1\u012f"+
    "\22\6\17\0\3\6\1\0\22\6\6\0\2\6\7\0"+
    "\1\6\1\u0130\24\6\17\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\1\u0131\25\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\20\6\1\u0132\5\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\1\6\1\u0133\24\6"+
    "\1\u0110\16\0\3\6\1\0\22\6\6\0\2\6\7\0"+
    "\3\6\1\u0134\22\6\17\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\14\6\1\u0135\11\6\17\0\3\6\1\0"+
    "\22\6\6\0\2\6\7\0\1\6\1\u0136\24\6\17\0"+
    "\3\6\1\0\22\6\6\0\2\6\7\0\1\6\1\u0137"+
    "\24\6\17\0\3\6\1\0\22\6\6\0\2\6\7\0"+
    "\5\6\1\u0138\20\6\17\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\17\6\1\u0139\6\6\17\0\3\6\1\0"+
    "\22\6\6\0\2\6\7\0\22\6\1\u013a\3\6\17\0"+
    "\3\6\1\0\22\6\6\0\2\6\7\0\6\6\1\u013b"+
    "\17\6\17\0\3\6\1\0\22\6\6\0\2\6\7\0"+
    "\4\6\1\u013c\21\6\17\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\17\6\1\u013d\6\6\17\0\3\6\1\0"+
    "\22\6\6\0\2\6\7\0\6\6\1\u013e\17\6\17\0"+
    "\3\6\1\0\22\6\6\0\2\6\7\0\15\6\1\u013f"+
    "\10\6\17\0\3\6\1\0\22\6\6\0\2\6\7\0"+
    "\2\6\1\u0140\23\6\17\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\26\6\1\u0141\16\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\6\6\1\u0142\17\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\3\6\1\u0143\22\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\12\6"+
    "\1\u0144\13\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\5\6\1\u0145\20\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\14\6\1\u0146\11\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\26\6\1\u0147\16\0"+
    "\3\6\1\0\22\6\6\0\2\6\7\0\3\6\1\u0148"+
    "\22\6\17\0\3\6\1\0\22\6\6\0\2\6\7\0"+
    "\26\6\1\u0149\16\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\15\6\1\u014a\10\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\20\6\1\u014b\5\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\21\6\1\u014c\4\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\14\6"+
    "\1\u014d\11\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\3\6\1\u014e\7\6\1\u014f\4\6\1\u0150\2\6"+
    "\1\u0151\2\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\14\6\1\u0152\11\6\17\0\3\6\1\0\22\6"+
    "\75\0\1\u0153\106\0\1\u0154\115\0\1\u0155\103\0\1\u0156"+
    "\131\0\1\u0157\74\0\1\u0158\110\0\1\u0159\3\0\1\u015a"+
    "\113\0\1\u015b\111\0\1\u015c\105\0\1\u015d\23\0\2\6"+
    "\7\0\4\6\1\u015e\21\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\6\6\1\u015f\17\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\15\6\1\u0160\10\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\2\6"+
    "\1\u0161\23\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\6\6\1\u0162\17\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\3\6\1\u0163\22\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\12\6\1\u0164\13\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\5\6"+
    "\1\u0165\20\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\15\6\1\u0166\10\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\20\6\1\u0167\5\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\3\6\1\u0168\7\6"+
    "\1\u0169\4\6\1\u016a\2\6\1\u016b\2\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\14\6\1\u016c\11\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\5\6"+
    "\1\u016d\20\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\26\6\1\u016e\16\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\1\6\1\u016f\24\6\17\0\3\6\1\0"+
    "\22\6\6\0\2\6\7\0\3\6\1\u0170\22\6\17\0"+
    "\3\6\1\0\22\6\6\0\2\6\7\0\2\6\1\u0171"+
    "\23\6\17\0\3\6\1\0\22\6\6\0\2\6\7\0"+
    "\10\6\1\u0172\15\6\17\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\12\6\1\u0173\13\6\17\0\3\6\1\0"+
    "\22\6\6\0\2\6\7\0\15\6\1\u0174\10\6\17\0"+
    "\3\6\1\0\22\6\6\0\2\6\7\0\1\6\1\u0175"+
    "\24\6\17\0\3\6\1\0\22\6\6\0\2\6\7\0"+
    "\16\6\1\u0176\7\6\17\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\26\6\1\u0177\16\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\26\6\1\u0178\16\0\3\6\1\0"+
    "\22\6\6\0\2\6\7\0\15\6\1\u0179\10\6\17\0"+
    "\3\6\1\0\22\6\6\0\2\6\7\0\5\6\1\u017a"+
    "\20\6\17\0\3\6\1\0\22\6\6\0\2\6\7\0"+
    "\6\6\1\u017b\17\6\17\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\6\6\1\u017c\17\6\17\0\3\6\1\0"+
    "\22\6\6\0\2\6\7\0\26\6\1\u017d\16\0\3\6"+
    "\1\0\22\6\73\0\1\u017e\112\0\1\u017f\111\0\1\u0180"+
    "\116\0\1\u0181\113\0\1\u0182\112\0\1\u0183\101\0\1\u0184"+
    "\111\0\1\u0185\116\0\1\u0186\111\0\1\u0187\16\0\2\6"+
    "\7\0\5\6\1\u0188\20\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\1\6\1\u0189\24\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\3\6\1\u018a\22\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\2\6"+
    "\1\u018b\23\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\10\6\1\u018c\15\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\12\6\1\u018d\13\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\15\6\1\u018e\10\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\15\6"+
    "\1\u018f\10\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\5\6\1\u0190\20\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\6\6\1\u0191\17\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\6\6\1\u0192\17\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\1\6"+
    "\1\u0193\24\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\26\6\1\u0194\16\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\17\6\1\u0195\6\6\17\0\3\6\1\0"+
    "\22\6\6\0\2\6\7\0\26\6\1\u0196\16\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\6\6\1\u0197\17\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\26\6"+
    "\1\u0198\16\0\3\6\1\0\22\6\6\0\2\6\7\0"+
    "\26\6\1\u0199\16\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\17\6\1\u019a\6\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\23\6\1\u019b\2\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\1\6\1\u019c\24\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\1\6"+
    "\1\u019d\24\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\11\6\1\u019e\14\6\17\0\3\6\1\0\22\6"+
    "\74\0\1\u019f\115\0\1\u01a0\112\0\1\u01a1\16\0\2\6"+
    "\7\0\1\6\1\u01a2\24\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\17\6\1\u01a3\6\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\6\6\1\u01a4\17\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\23\6"+
    "\1\u01a5\2\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\1\6\1\u01a6\24\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\1\6\1\u01a7\24\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\11\6\1\u01a8\14\6"+
    "\17\0\3\6\1\0\22\6\6\0\2\6\7\0\6\6"+
    "\1\u01a9\17\6\17\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\20\6\1\u01aa\5\6\17\0\3\6\1\0\22\6"+
    "\6\0\2\6\7\0\26\6\1\u01ab\16\0\3\6\1\0"+
    "\22\6\6\0\2\6\7\0\6\6\1\u01ac\17\6\17\0"+
    "\3\6\1\0\22\6\6\0\2\6\7\0\26\6\1\u01ad"+
    "\16\0\3\6\1\0\22\6\6\0\2\6\7\0\26\6"+
    "\1\u01ae\16\0\3\6\1\0\22\6\6\0\2\6\7\0"+
    "\15\6\1\u01af\10\6\17\0\3\6\1\0\22\6\71\0"+
    "\1\u01b0\110\0\1\u01b1\121\0\1\u01b2\17\0\2\6\7\0"+
    "\6\6\1\u01b3\17\6\17\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\20\6\1\u01b4\5\6\17\0\3\6\1\0"+
    "\22\6\6\0\2\6\7\0\6\6\1\u01b5\17\6\17\0"+
    "\3\6\1\0\22\6\6\0\2\6\7\0\15\6\1\u01b6"+
    "\10\6\17\0\3\6\1\0\22\6\6\0\2\6\7\0"+
    "\26\6\1\u01b7\16\0\3\6\1\0\22\6\6\0\2\6"+
    "\7\0\26\6\1\u01b8\16\0\3\6\1\0\22\6\6\0"+
    "\2\6\7\0\11\6\1\u01b9\14\6\17\0\3\6\1\0"+
    "\22\6\6\0\2\6\7\0\26\6\1\u01ba\16\0\3\6"+
    "\1\0\22\6\75\0\1\u01bb\122\0\1\u01bc\77\0\1\u01bd"+
    "\23\0\2\6\7\0\11\6\1\u01be\14\6\17\0\3\6"+
    "\1\0\22\6\6\0\2\6\7\0\26\6\1\u01bf\16\0"+
    "\3\6\1\0\22\6\76\0\1\u01c0\113\0\1\u01c1\112\0"+
    "\1\u01c2\51\0\1\u01c3\142\0\1\u01c4\124\0\1\u01c5\102\0"+
    "\1\u01c6\124\0\1\u01c7\111\0\1\u01c8\100\0\1\u01c9\116\0"+
    "\1\u01ca\105\0\1\u01cb\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25678];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\5\1\1\11\16\1\6\11\6\1\1\11"+
    "\5\1\4\11\14\1\3\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\0\34\1\12\11\2\1\7\0\20\1\1\0"+
    "\43\1\13\0\23\1\1\11\10\1\1\11\6\1\2\11"+
    "\4\1\1\11\4\1\1\11\1\1\1\11\5\1\14\0"+
    "\32\1\1\11\6\1\2\11\10\1\1\11\3\0\1\11"+
    "\7\0\24\1\1\11\5\1\1\11\1\1\1\11\11\1"+
    "\1\11\11\0\21\1\1\11\10\1\2\11\4\1\1\11"+
    "\1\0\1\11\1\0\5\11\1\0\1\11\14\1\1\11"+
    "\1\1\1\11\1\1\2\11\5\1\3\0\11\1\1\11"+
    "\1\1\2\11\1\1\3\0\4\1\2\11\1\1\2\11"+
    "\1\0\1\11\1\1\1\11\2\0\1\1\10\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[459];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private final FormulaEngineLexerStateTracker stateTracker = new FormulaEngineLexerStateTracker(this);

  @Override
  public int getInitialState() {
      return YYINITIAL;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FormulaEngineLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 136: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 137: break;
          case 3: 
            { return FormulaEngineElementTypes.IDENTIFIER;
            } 
            // fall through
          case 138: break;
          case 4: 
            { return FormulaEngineElementTypes.NUMBER_INTEGER;
            } 
            // fall through
          case 139: break;
          case 5: 
            { return FormulaEngineElementTypes.SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 140: break;
          case 6: 
            { return FormulaEngineElementTypes.DOUBLE_QUOTED_STRING;
            } 
            // fall through
          case 141: break;
          case 7: 
            { return FormulaEngineElementTypes.OPERATOR_DIVIDE;
            } 
            // fall through
          case 142: break;
          case 8: 
            { return FormulaEngineElementTypes.OPERATOR_MULTIPLY;
            } 
            // fall through
          case 143: break;
          case 9: 
            { stateTracker.beginState(IN_PARENTHESIS); return FormulaEngineElementTypes.LEFT_PARENTHESIS;
            } 
            // fall through
          case 144: break;
          case 10: 
            { stateTracker.endState(); return FormulaEngineElementTypes.RIGHT_PARENTHESIS;
            } 
            // fall through
          case 145: break;
          case 11: 
            { return FormulaEngineElementTypes.LEFT_CURLY_BRACE;
            } 
            // fall through
          case 146: break;
          case 12: 
            { return FormulaEngineElementTypes.RIGHT_CURLY_BRACE;
            } 
            // fall through
          case 147: break;
          case 13: 
            { return FormulaEngineElementTypes.LEFT_BRACKET;
            } 
            // fall through
          case 148: break;
          case 14: 
            { return FormulaEngineElementTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 149: break;
          case 15: 
            { return FormulaEngineElementTypes.OPERATOR_ASSIGNMENT;
            } 
            // fall through
          case 150: break;
          case 16: 
            { return FormulaEngineElementTypes.MINUS;
            } 
            // fall through
          case 151: break;
          case 17: 
            { return FormulaEngineElementTypes.OPERATOR_GREATERTHAN;
            } 
            // fall through
          case 152: break;
          case 18: 
            { return FormulaEngineElementTypes.OPERATOR_PLUS;
            } 
            // fall through
          case 153: break;
          case 19: 
            { return FormulaEngineElementTypes.OPERATOR_LESSTHAN;
            } 
            // fall through
          case 154: break;
          case 20: 
            { return FormulaEngineElementTypes.OPERATOR_MODULO;
            } 
            // fall through
          case 155: break;
          case 21: 
            { return FormulaEngineElementTypes.OPERATOR_NEGATION;
            } 
            // fall through
          case 156: break;
          case 22: 
            { return FormulaEngineElementTypes.COMMA;
            } 
            // fall through
          case 157: break;
          case 23: 
            { return FormulaEngineElementTypes.SEMICOLON;
            } 
            // fall through
          case 158: break;
          case 24: 
            { return FormulaEngineElementTypes.COLON;
            } 
            // fall through
          case 159: break;
          case 25: 
            { return FormulaEngineElementTypes.QUESIONMARK;
            } 
            // fall through
          case 160: break;
          case 26: 
            { return FormulaEngineElementTypes.LEFT_PARENTHESIS;
            } 
            // fall through
          case 161: break;
          case 27: 
            { return FormulaEngineElementTypes.RIGHT_PARENTHESIS;
            } 
            // fall through
          case 162: break;
          case 28: 
            { stateTracker.endState(); return FormulaEngineElementTypes.LEFT_CURLY_BRACE;
            } 
            // fall through
          case 163: break;
          case 29: 
            { return FormulaEngineElementTypes.NUMBER_FLOAT;
            } 
            // fall through
          case 164: break;
          case 30: 
            { return FormulaEngineElementTypes.LINE_COMMENT;
            } 
            // fall through
          case 165: break;
          case 31: 
            { return FormulaEngineElementTypes.KEYWORD_IF;
            } 
            // fall through
          case 166: break;
          case 32: 
            { return FormulaEngineElementTypes.KEYWORD_DO;
            } 
            // fall through
          case 167: break;
          case 33: 
            { return FormulaEngineElementTypes.KEYWORD_OR;
            } 
            // fall through
          case 168: break;
          case 34: 
            { return FormulaEngineElementTypes.OPERATOR_AND;
            } 
            // fall through
          case 169: break;
          case 35: 
            { return FormulaEngineElementTypes.OPERATOR_EQUAL;
            } 
            // fall through
          case 170: break;
          case 36: 
            { return FormulaEngineElementTypes.OPERATOR_SUBTRACTASSIGNMENT;
            } 
            // fall through
          case 171: break;
          case 37: 
            { return FormulaEngineElementTypes.OPERATOR_DECREMENT;
            } 
            // fall through
          case 172: break;
          case 38: 
            { return FormulaEngineElementTypes.OPERATOR_GREATERTHANEQUAL;
            } 
            // fall through
          case 173: break;
          case 39: 
            { return FormulaEngineElementTypes.OPERATOR_ADDASSIGNMENT;
            } 
            // fall through
          case 174: break;
          case 40: 
            { return FormulaEngineElementTypes.OPERATOR_INCREMENT;
            } 
            // fall through
          case 175: break;
          case 41: 
            { return FormulaEngineElementTypes.OPERATOR_LESSTHANEQUAL;
            } 
            // fall through
          case 176: break;
          case 42: 
            { return FormulaEngineElementTypes.OPERATOR_NOTEQUAL;
            } 
            // fall through
          case 177: break;
          case 43: 
            { return FormulaEngineElementTypes.OPERATOR_OR;
            } 
            // fall through
          case 178: break;
          case 44: 
            { return FormulaEngineElementTypes.KEYWORD_AND;
            } 
            // fall through
          case 179: break;
          case 45: 
            { return FormulaEngineElementTypes.KEYWORD_ANY;
            } 
            // fall through
          case 180: break;
          case 46: 
            { return FormulaEngineElementTypes.KEYWORD_FOR;
            } 
            // fall through
          case 181: break;
          case 47: 
            { return FormulaEngineElementTypes.KEYWORD_SEQ;
            } 
            // fall through
          case 182: break;
          case 48: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_NA;
            } 
            // fall through
          case 183: break;
          case 49: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_ELT;
            } 
            // fall through
          case 184: break;
          case 50: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_MAP;
            } 
            // fall through
          case 185: break;
          case 51: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_MAX;
            } 
            // fall through
          case 186: break;
          case 52: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_LEN;
            } 
            // fall through
          case 187: break;
          case 53: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_STR;
            } 
            // fall through
          case 188: break;
          case 54: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_OUT;
            } 
            // fall through
          case 189: break;
          case 55: 
            { return FormulaEngineElementTypes.BLOCK_COMMENT;
            } 
            // fall through
          case 190: break;
          case 56: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_ELT;
            } 
            // fall through
          case 191: break;
          case 57: 
            { return FormulaEngineElementTypes.KEYWORD_ELSE;
            } 
            // fall through
          case 192: break;
          case 58: 
            { return FormulaEngineElementTypes.KEYWORD_DATE;
            } 
            // fall through
          case 193: break;
          case 59: 
            { return FormulaEngineElementTypes.KEYWORD_DICT;
            } 
            // fall through
          case 194: break;
          case 60: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_MAP;
            } 
            // fall through
          case 195: break;
          case 61: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_MAX;
            } 
            // fall through
          case 196: break;
          case 62: 
            { return FormulaEngineElementTypes.KEYWORD_LIST;
            } 
            // fall through
          case 197: break;
          case 63: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_LEN;
            } 
            // fall through
          case 198: break;
          case 64: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_STR;
            } 
            // fall through
          case 199: break;
          case 65: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_OUT;
            } 
            // fall through
          case 200: break;
          case 66: 
            { return FormulaEngineElementTypes.KEYWORD_CASE;
            } 
            // fall through
          case 201: break;
          case 67: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_DATE;
            } 
            // fall through
          case 202: break;
          case 68: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_LIST;
            } 
            // fall through
          case 203: break;
          case 69: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_LOAD;
            } 
            // fall through
          case 204: break;
          case 70: 
            { return FormulaEngineElementTypes.KEYWORD_BREAK;
            } 
            // fall through
          case 205: break;
          case 71: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DATE;
            } 
            // fall through
          case 206: break;
          case 72: 
            { return FormulaEngineElementTypes.KEYWORD_FLOAT;
            } 
            // fall through
          case 207: break;
          case 73: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_LIST;
            } 
            // fall through
          case 208: break;
          case 74: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_LOAD;
            } 
            // fall through
          case 209: break;
          case 75: 
            { return FormulaEngineElementTypes.VISIBILITY_LOCAL;
            } 
            // fall through
          case 210: break;
          case 76: 
            { return FormulaEngineElementTypes.KEYWORD_WHILE;
            } 
            // fall through
          case 211: break;
          case 77: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_NAME;
            } 
            // fall through
          case 212: break;
          case 78: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_DATA;
            } 
            // fall through
          case 213: break;
          case 79: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_NA;
            } 
            // fall through
          case 214: break;
          case 80: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_FIRST;
            } 
            // fall through
          case 215: break;
          case 81: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_FLOAT;
            } 
            // fall through
          case 216: break;
          case 82: 
            { return FormulaEngineElementTypes.KEYWORD_RETURN;
            } 
            // fall through
          case 217: break;
          case 83: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_NA;
            } 
            // fall through
          case 218: break;
          case 84: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_FIRST;
            } 
            // fall through
          case 219: break;
          case 85: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_FLOAT;
            } 
            // fall through
          case 220: break;
          case 86: 
            { return FormulaEngineElementTypes.KEYWORD_STRING;
            } 
            // fall through
          case 221: break;
          case 87: 
            { return FormulaEngineElementTypes.KEYWORD_SWITCH;
            } 
            // fall through
          case 222: break;
          case 88: 
            { return FormulaEngineElementTypes.VISIBILITY_GLOBAL;
            } 
            // fall through
          case 223: break;
          case 89: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_TODAY;
            } 
            // fall through
          case 224: break;
          case 90: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_FIELD;
            } 
            // fall through
          case 225: break;
          case 91: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_REMOVE;
            } 
            // fall through
          case 226: break;
          case 92: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_STATUS;
            } 
            // fall through
          case 227: break;
          case 93: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_STRING;
            } 
            // fall through
          case 228: break;
          case 94: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_KERNEL;
            } 
            // fall through
          case 229: break;
          case 95: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_REMOVE;
            } 
            // fall through
          case 230: break;
          case 96: 
            { return FormulaEngineElementTypes.KEYWORD_INTEGER;
            } 
            // fall through
          case 231: break;
          case 97: 
            { return FormulaEngineElementTypes.KEYWORD_DEFAULT;
            } 
            // fall through
          case 232: break;
          case 98: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_STATUS;
            } 
            // fall through
          case 233: break;
          case 99: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_STRING;
            } 
            // fall through
          case 234: break;
          case 100: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_KERNEL;
            } 
            // fall through
          case 235: break;
          case 101: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_TREEID;
            } 
            // fall through
          case 236: break;
          case 102: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_STATUS;
            } 
            // fall through
          case 237: break;
          case 103: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_SYMBOL;
            } 
            // fall through
          case 238: break;
          case 104: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_LISTTP;
            } 
            // fall through
          case 239: break;
          case 105: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_LISTID;
            } 
            // fall through
          case 240: break;
          case 106: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_PASSED;
            } 
            // fall through
          case 241: break;
          case 107: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_FIELDS;
            } 
            // fall through
          case 242: break;
          case 108: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_LIST;
            } 
            // fall through
          case 243: break;
          case 109: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_INTEGER;
            } 
            // fall through
          case 244: break;
          case 110: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_DAYDIFF;
            } 
            // fall through
          case 245: break;
          case 111: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_DAYPLUS;
            } 
            // fall through
          case 246: break;
          case 112: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_LIST;
            } 
            // fall through
          case 247: break;
          case 113: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_INTEGER;
            } 
            // fall through
          case 248: break;
          case 114: 
            { return FormulaEngineElementTypes.KEYWORD_DATETIME;
            } 
            // fall through
          case 249: break;
          case 115: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DAYDIFF;
            } 
            // fall through
          case 250: break;
          case 116: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DAYPLUS;
            } 
            // fall through
          case 251: break;
          case 117: 
            { stateTracker.beginState(IN_FUNCTION_HEADER); return FormulaEngineElementTypes.KEYWORD_FUNCTION;
            } 
            // fall through
          case 252: break;
          case 118: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_DATETIME;
            } 
            // fall through
          case 253: break;
          case 119: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_PUT;
            } 
            // fall through
          case 254: break;
          case 120: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_GET;
            } 
            // fall through
          case 255: break;
          case 121: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DATETIME;
            } 
            // fall through
          case 256: break;
          case 122: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_PUT;
            } 
            // fall through
          case 257: break;
          case 123: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_GET;
            } 
            // fall through
          case 258: break;
          case 124: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_ATTRIBUTE;
            } 
            // fall through
          case 259: break;
          case 125: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_STRING;
            } 
            // fall through
          case 260: break;
          case 126: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_KEYS;
            } 
            // fall through
          case 261: break;
          case 127: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_ATTRIBUTE;
            } 
            // fall through
          case 262: break;
          case 128: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_STRING;
            } 
            // fall through
          case 263: break;
          case 129: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_KEYS;
            } 
            // fall through
          case 264: break;
          case 130: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_TIMETODAY;
            } 
            // fall through
          case 265: break;
          case 131: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_PROCESSED;
            } 
            // fall through
          case 266: break;
          case 132: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_ISKEY;
            } 
            // fall through
          case 267: break;
          case 133: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_ISKEY;
            } 
            // fall through
          case 268: break;
          case 134: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_DEPENDENCIES;
            } 
            // fall through
          case 269: break;
          case 135: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_DEPENDENCIES_TRIGGERS;
            } 
            // fall through
          case 270: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
