/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package de.cofinpro.intellij.acfeplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import de.cofinpro.intellij.acfeplugin.lex.FormulaEngineLexerStateTracker;
import de.cofinpro.intellij.acfeplugin.lex.IFormulaEngineLexer;
import de.cofinpro.intellij.acfeplugin.psi.FormulaEngineElementType;
import de.cofinpro.intellij.acfeplugin.psi.FormulaEngineElementTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>FormulaEngine.flex</tt>
 */
public class FormulaEngineLexer implements IFormulaEngineLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_PARENTHESIS = 2;
  public static final int IN_FUNCTION_HEADER = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 3488 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>12]<<6)|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\10\2\1\3\4\2\1\4\1\5\1\6\4\2\1\7\6\2\1\10\1\11\361\2");

  /* The ZZ_CMAP_Y table has 640 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\27\2\1\3\1\2\1\4\3\2\1\5\5\2\1\6\1\2\1\6\1\2\1\6\1\2\1\6\1\2\1\6"+
    "\1\2\1\6\1\2\1\6\1\2\1\6\1\2\1\6\1\2\1\6\1\2\1\7\1\2\1\7\1\3\4\2\1\5\1\7\34"+
    "\2\1\3\1\7\4\2\1\10\1\2\1\7\2\2\1\11\2\2\1\7\1\4\2\2\1\11\146\2\1\3\12\2\1"+
    "\7\1\5\2\2\1\12\1\2\1\7\5\2\1\4\114\2\1\7\25\2\1\3\56\2\1\6\1\2\1\4\1\13\2"+
    "\2\1\7\3\2\1\4\5\2\1\7\1\2\1\7\5\2\1\7\1\2\1\5\1\4\6\2\1\3\15\2\1\7\67\2\1"+
    "\3\3\2\1\7\61\2\1\14\105\2\1\7\32\2");

  /* The ZZ_CMAP_A table has 832 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\6\1\0\1\1\1\6\22\0\1\1\1\60\1\7\1\0\1\66\1\57\1\51\1\4\1\43\1"+
    "\44\1\11\1\55\1\110\1\53\1\12\1\10\12\3\1\112\1\111\1\56\1\52\1\54\1\113\1"+
    "\0\1\70\1\100\1\104\1\73\1\13\1\105\1\107\1\2\1\75\2\2\1\101\1\76\1\67\1\72"+
    "\1\102\1\2\1\103\1\77\1\71\1\106\3\2\1\74\1\2\1\47\1\5\1\50\1\62\1\37\1\0"+
    "\1\15\1\21\1\63\1\24\1\23\1\27\1\35\1\36\1\20\1\2\1\40\1\31\1\25\1\34\1\33"+
    "\1\30\1\64\1\17\1\32\1\16\1\22\1\42\1\65\1\41\1\26\1\2\1\45\1\61\1\46\142"+
    "\0\12\14\106\0\12\14\6\0\12\14\134\0\12\14\40\0\12\14\54\0\12\14\60\0\12\14"+
    "\6\0\12\14\66\0\12\14\26\0\12\14\74\0\12\14\16\0\62\14");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\17\3\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\1\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\1\1\26\2\3\1\1\1\27\1\30\1\31\1\32"+
    "\14\3\1\33\1\34\1\35\1\0\2\5\2\6\1\36"+
    "\1\0\1\37\1\40\3\3\1\41\10\3\1\42\13\3"+
    "\1\43\5\3\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\2\3\7\0\20\3"+
    "\1\57\1\0\1\3\1\60\1\61\21\3\1\62\6\3"+
    "\1\63\10\3\1\64\13\0\4\3\1\65\2\3\1\66"+
    "\1\67\3\3\1\70\2\3\1\71\1\72\2\3\1\0"+
    "\1\73\11\3\1\74\1\75\1\76\2\3\1\77\1\3"+
    "\1\100\1\101\3\3\1\102\1\103\4\3\1\104\1\3"+
    "\1\105\4\3\1\106\1\3\14\0\6\3\1\107\4\3"+
    "\1\110\1\111\4\3\1\112\7\3\1\113\2\3\1\114"+
    "\5\3\1\115\1\116\1\117\1\120\7\3\1\121\1\122"+
    "\4\0\1\123\6\0\4\3\1\124\4\3\1\125\1\126"+
    "\5\3\1\127\3\3\1\130\6\3\1\131\1\3\1\132"+
    "\1\3\1\133\1\134\1\135\1\136\5\3\1\137\11\0"+
    "\1\140\1\3\1\141\6\3\1\142\1\143\4\3\1\144"+
    "\1\3\1\145\2\3\1\146\1\147\3\3\1\150\1\3"+
    "\1\151\1\152\4\3\1\153\1\0\1\154\1\0\1\155"+
    "\1\156\1\157\1\160\1\161\1\0\1\162\1\3\1\163"+
    "\1\3\1\164\1\3\1\165\1\166\5\3\1\167\1\3"+
    "\1\170\1\171\1\172\1\173\1\174\4\3\3\0\2\3"+
    "\1\175\1\3\1\176\1\177\3\3\1\200\1\3\1\201"+
    "\1\202\1\3\3\0\1\203\1\204\1\3\1\205\1\206"+
    "\1\207\1\3\1\210\1\211\1\0\1\212\1\213\1\214"+
    "\2\0\1\215\10\0\1\216";

  private static int [] zzUnpackAction() {
    int [] result = new int[478];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\344\0\u0130\0\u017c\0\u01c8"+
    "\0\u0214\0\u0260\0\u02ac\0\u02f8\0\u0344\0\u0390\0\u03dc\0\u0428"+
    "\0\u0474\0\u04c0\0\u050c\0\u0558\0\u05a4\0\u05f0\0\u063c\0\u0688"+
    "\0\u06d4\0\u0720\0\344\0\344\0\344\0\344\0\344\0\344"+
    "\0\u076c\0\u07b8\0\u0804\0\u0850\0\u089c\0\u08e8\0\u0934\0\u0980"+
    "\0\u09cc\0\344\0\u0a18\0\u0a64\0\u0ab0\0\344\0\344\0\344"+
    "\0\344\0\u0afc\0\u0b48\0\u0b94\0\u0be0\0\u0c2c\0\u0c78\0\u0cc4"+
    "\0\u0d10\0\u0d5c\0\u0da8\0\u0df4\0\u0e40\0\344\0\344\0\344"+
    "\0\u0e8c\0\344\0\u0ed8\0\u0f24\0\344\0\u0f70\0\u0fbc\0\344"+
    "\0\344\0\u1008\0\u1054\0\u10a0\0\u0130\0\u10ec\0\u1138\0\u1184"+
    "\0\u11d0\0\u121c\0\u1268\0\u12b4\0\u1300\0\u0130\0\u134c\0\u1398"+
    "\0\u13e4\0\u1430\0\u147c\0\u14c8\0\u1514\0\u1560\0\u15ac\0\u15f8"+
    "\0\u1644\0\u0130\0\u1690\0\u16dc\0\u1728\0\u1774\0\u17c0\0\344"+
    "\0\344\0\344\0\344\0\344\0\344\0\344\0\344\0\344"+
    "\0\344\0\344\0\u180c\0\u1858\0\u18a4\0\u18f0\0\u193c\0\u1988"+
    "\0\u19d4\0\u1a20\0\u1a6c\0\u1ab8\0\u1b04\0\u1b50\0\u1b9c\0\u1be8"+
    "\0\u1c34\0\u1c80\0\u1ccc\0\u1d18\0\u1d64\0\u1db0\0\u1dfc\0\u1e48"+
    "\0\u1e94\0\u1ee0\0\u1f2c\0\u1f78\0\u1fc4\0\u2010\0\u0130\0\u0130"+
    "\0\u205c\0\u20a8\0\u20f4\0\u2140\0\u218c\0\u21d8\0\u2224\0\u2270"+
    "\0\u22bc\0\u2308\0\u2354\0\u23a0\0\u23ec\0\u2438\0\u2484\0\u24d0"+
    "\0\u251c\0\u0130\0\u2568\0\u25b4\0\u2600\0\u264c\0\u2698\0\u26e4"+
    "\0\u0130\0\u2730\0\u277c\0\u27c8\0\u2814\0\u2860\0\u28ac\0\u28f8"+
    "\0\u2944\0\u2990\0\u29dc\0\u2a28\0\u2a74\0\u2ac0\0\u2b0c\0\u2b58"+
    "\0\u2ba4\0\u2bf0\0\u2c3c\0\u2c88\0\u2cd4\0\u2d20\0\u2d6c\0\u2db8"+
    "\0\u2e04\0\u2224\0\u2e50\0\u2e9c\0\u23ec\0\u2438\0\u2ee8\0\u2f34"+
    "\0\u2f80\0\u25b4\0\u2fcc\0\u3018\0\u3064\0\u277c\0\u30b0\0\u30fc"+
    "\0\u3148\0\344\0\u3194\0\u31e0\0\u322c\0\u3278\0\u32c4\0\u3310"+
    "\0\u335c\0\u33a8\0\u33f4\0\344\0\u0130\0\u3440\0\u348c\0\u34d8"+
    "\0\u0130\0\u3524\0\344\0\344\0\u3570\0\u35bc\0\u3608\0\u3654"+
    "\0\344\0\u36a0\0\u36ec\0\u3738\0\u3784\0\344\0\u37d0\0\344"+
    "\0\u381c\0\u3868\0\u38b4\0\u3900\0\u0130\0\u394c\0\u3998\0\u39e4"+
    "\0\u3a30\0\u3a7c\0\u3ac8\0\u3b14\0\u3b60\0\u3bac\0\u3bf8\0\u3c44"+
    "\0\u3c90\0\u3cdc\0\u3d28\0\u3d74\0\u3dc0\0\u3e0c\0\u3e58\0\u3ea4"+
    "\0\u3ef0\0\u3f3c\0\u3f88\0\u3fd4\0\u4020\0\u3654\0\u36a0\0\u406c"+
    "\0\u40b8\0\u4104\0\u4150\0\u3148\0\u419c\0\u41e8\0\u4234\0\u4280"+
    "\0\u42cc\0\u4318\0\u4364\0\u0130\0\u43b0\0\u43fc\0\344\0\u4448"+
    "\0\u4494\0\u44e0\0\u452c\0\u4578\0\u45c4\0\344\0\344\0\u0130"+
    "\0\u4610\0\u465c\0\u46a8\0\u46f4\0\u4740\0\u478c\0\u47d8\0\u0130"+
    "\0\344\0\u4824\0\u4870\0\u48bc\0\u4908\0\344\0\u4954\0\u49a0"+
    "\0\u49ec\0\u4a38\0\u4a84\0\u4ad0\0\u4b1c\0\u4b68\0\u4bb4\0\u4c00"+
    "\0\u4318\0\u4c4c\0\u4c98\0\u4ce4\0\u4d30\0\u452c\0\u45c4\0\u4d7c"+
    "\0\u4dc8\0\u4e14\0\u4e60\0\u4eac\0\u0130\0\u4ef8\0\u4f44\0\u4f90"+
    "\0\344\0\u4fdc\0\u5028\0\u5074\0\u50c0\0\u510c\0\u5158\0\344"+
    "\0\u51a4\0\344\0\u51f0\0\u523c\0\u0130\0\u0130\0\u0130\0\u5288"+
    "\0\u52d4\0\u5320\0\u536c\0\u53b8\0\344\0\u5404\0\u5450\0\u549c"+
    "\0\u54e8\0\u5534\0\u5580\0\u55cc\0\u5618\0\u5664\0\u56b0\0\u56fc"+
    "\0\u4ef8\0\u5748\0\u5794\0\u57e0\0\u582c\0\u5878\0\u58c4\0\u51f0"+
    "\0\u523c\0\u5910\0\u595c\0\u59a8\0\u59f4\0\u53b8\0\u5a40\0\344"+
    "\0\u5a8c\0\u5ad8\0\u5b24\0\u0130\0\u5b70\0\u5bbc\0\u5c08\0\u0130"+
    "\0\u5c54\0\344\0\344\0\u5ca0\0\u5cec\0\u5d38\0\u5d84\0\344"+
    "\0\u5dd0\0\344\0\u5e1c\0\344\0\344\0\344\0\344\0\344"+
    "\0\u5e68\0\344\0\u5eb4\0\u5a8c\0\u5f00\0\u5b24\0\u5f4c\0\u5bbc"+
    "\0\u5c08\0\u5f98\0\u5fe4\0\u6030\0\u607c\0\u60c8\0\344\0\u6114"+
    "\0\344\0\u6160\0\344\0\344\0\u0130\0\u61ac\0\u61f8\0\u6244"+
    "\0\u6290\0\u62dc\0\u6328\0\u6374\0\u63c0\0\u640c\0\u6160\0\u6458"+
    "\0\u61f8\0\u6244\0\u64a4\0\u64f0\0\u653c\0\344\0\u6588\0\344"+
    "\0\344\0\u65d4\0\u6620\0\u666c\0\u66b8\0\u64f0\0\u653c\0\u6704"+
    "\0\u65d4\0\344\0\344\0\u6750\0\344\0\344\0\u679c\0\344"+
    "\0\u6750\0\344\0\u67e8\0\u6834\0\u6880\0\u68cc\0\u6918\0\u6964"+
    "\0\u69b0\0\u69fc\0\u6a48\0\u6a94\0\u6ae0\0\344";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[478];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\4\1\5\1\11"+
    "\1\12\1\13\1\4\1\6\1\4\1\14\1\6\1\15"+
    "\1\16\1\17\1\6\1\20\1\21\1\22\1\6\1\23"+
    "\1\6\1\24\1\25\1\26\1\27\1\30\1\31\1\6"+
    "\1\32\2\6\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\6\1\54\1\55\21\6\1\56"+
    "\1\57\1\60\1\61\1\4\1\5\1\6\1\7\1\10"+
    "\1\4\1\5\1\11\1\12\1\13\1\4\1\6\1\4"+
    "\1\62\1\6\1\63\1\64\1\17\1\6\1\65\1\66"+
    "\1\67\1\6\1\70\1\6\1\71\1\72\1\73\1\27"+
    "\1\30\1\74\1\6\1\75\2\6\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\6\1\54"+
    "\1\55\21\6\1\56\1\57\1\60\1\61\1\4\1\5"+
    "\1\6\1\7\1\10\1\4\1\5\1\11\1\12\1\13"+
    "\1\4\1\6\1\4\1\14\1\6\1\15\1\16\1\17"+
    "\1\6\1\20\1\21\1\22\1\6\1\23\1\6\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\6\1\32\2\6"+
    "\1\76\1\77\1\100\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\6\1\54\1\55\21\6\1\56\1\57\1\60"+
    "\1\61\116\0\2\6\7\0\1\6\1\0\26\6\20\0"+
    "\3\6\1\0\21\6\7\0\1\7\6\0\1\101\101\0"+
    "\4\10\1\102\1\103\1\0\105\10\5\11\1\104\1\0"+
    "\1\105\104\11\10\0\1\106\1\107\40\0\1\110\113\0"+
    "\1\111\43\0\2\6\7\0\1\6\1\0\1\6\1\112"+
    "\15\6\1\113\6\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\6\6\1\114\17\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\12\6\1\115\2\6\1\116\1\6\1\117\6\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\2\6\1\120\13\6\1\121\7\6\20\0\3\6\1\0"+
    "\21\6\6\0\2\6\7\0\1\6\1\0\14\6\1\122"+
    "\11\6\20\0\3\6\1\0\21\6\6\0\2\6\7\0"+
    "\1\6\1\0\1\123\2\6\1\124\2\6\1\125\7\6"+
    "\1\126\7\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\1\127\25\6\20\0\3\6\1\0"+
    "\21\6\6\0\2\6\7\0\1\6\1\0\3\6\1\130"+
    "\1\6\1\131\6\6\1\132\1\6\1\133\7\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\3\6\1\134\2\6\1\135\7\6\1\136\7\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\1\6\1\137\4\6\1\140\17\6\20\0\2\6\1\141"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\2\6"+
    "\1\142\2\6\1\143\20\6\20\0\3\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\5\6\1\144\20\6"+
    "\20\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\14\6\1\145\11\6\20\0\3\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\1\146\25\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\6\6\1\147\17\6\20\0\3\6\1\0\21\6\55\0"+
    "\1\150\114\0\1\151\113\0\1\152\1\153\112\0\1\154"+
    "\113\0\1\155\2\0\1\156\110\0\1\157\113\0\1\160"+
    "\113\0\1\161\122\0\1\162\34\0\2\6\7\0\1\6"+
    "\1\0\1\163\25\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\21\6\1\164\4\6\20\0"+
    "\3\6\1\0\21\6\73\0\1\165\1\0\1\166\1\0"+
    "\1\167\3\0\1\170\1\0\1\171\1\172\2\0\1\173"+
    "\10\0\2\6\7\0\1\6\1\0\1\6\1\174\15\6"+
    "\1\113\6\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\6\6\1\175\17\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\12\6"+
    "\1\115\2\6\1\176\1\6\1\177\6\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\14\6"+
    "\1\200\11\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\1\201\2\6\1\124\2\6\1\125"+
    "\7\6\1\126\7\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\1\202\25\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\3\6"+
    "\1\203\1\6\1\131\6\6\1\204\1\6\1\133\7\6"+
    "\20\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\3\6\1\205\2\6\1\206\7\6\1\207\7\6"+
    "\20\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\1\6\1\210\4\6\1\140\17\6\20\0\2\6"+
    "\1\141\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\2\6\1\142\2\6\1\211\20\6\20\0\3\6\1\0"+
    "\21\6\6\0\2\6\7\0\1\6\1\0\1\212\25\6"+
    "\20\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\6\6\1\213\17\6\20\0\3\6\1\0\21\6"+
    "\7\0\1\214\110\0\114\10\114\11\6\106\1\0\105\106"+
    "\11\107\1\215\102\107\2\0\2\6\7\0\1\6\1\0"+
    "\1\6\1\216\24\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\7\6\1\217\1\6\1\220"+
    "\14\6\20\0\3\6\1\0\21\6\6\0\2\6\7\0"+
    "\1\6\1\0\1\6\1\221\6\6\1\222\15\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\22\6\1\223\3\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\1\6\1\224\24\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\6\6\1\225\17\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\16\6\1\226\7\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\1\6\1\227\13\6\1\230\10\6\20\0\3\6\1\0"+
    "\21\6\6\0\2\6\7\0\1\6\1\0\1\6\1\231"+
    "\7\6\1\232\14\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\26\6\20\0\1\233\2\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\12\6"+
    "\1\234\13\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\13\6\1\235\10\6\1\236\1\6"+
    "\20\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\2\6\1\237\23\6\20\0\3\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\17\6\1\240\6\6"+
    "\20\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\16\6\1\241\7\6\20\0\3\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\2\6\1\242\23\6"+
    "\20\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\15\6\1\243\10\6\20\0\3\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\17\6\1\244\6\6"+
    "\20\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\1\245\25\6\20\0\1\246\2\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\1\247\1\6\1\250"+
    "\23\6\20\0\3\6\1\0\21\6\6\0\2\6\7\0"+
    "\1\6\1\0\26\6\20\0\1\6\1\251\1\6\1\0"+
    "\21\6\6\0\2\6\7\0\1\6\1\0\3\6\1\252"+
    "\22\6\20\0\3\6\1\0\21\6\6\0\2\6\7\0"+
    "\1\6\1\0\1\6\1\253\24\6\20\0\3\6\1\0"+
    "\21\6\6\0\2\6\7\0\1\6\1\0\10\6\1\254"+
    "\15\6\20\0\3\6\1\0\21\6\6\0\2\6\7\0"+
    "\1\6\1\0\16\6\1\255\7\6\20\0\3\6\1\0"+
    "\21\6\6\0\2\6\7\0\1\6\1\0\15\6\1\256"+
    "\10\6\20\0\3\6\1\0\21\6\6\0\2\6\7\0"+
    "\1\6\1\0\2\6\1\257\23\6\20\0\3\6\1\0"+
    "\21\6\6\0\2\6\7\0\1\6\1\0\15\6\1\260"+
    "\10\6\20\0\3\6\1\0\21\6\6\0\2\6\7\0"+
    "\1\6\1\0\3\6\1\261\22\6\20\0\3\6\1\0"+
    "\21\6\74\0\1\262\115\0\1\263\2\0\1\264\5\0"+
    "\1\265\23\0\1\266\54\0\1\267\114\0\1\270\2\0"+
    "\1\271\114\0\1\272\106\0\1\273\12\0\1\274\105\0"+
    "\1\275\20\0\2\6\7\0\1\6\1\0\1\6\1\276"+
    "\24\6\20\0\3\6\1\0\21\6\6\0\2\6\7\0"+
    "\1\6\1\0\1\6\1\221\6\6\1\277\15\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\22\6\1\300\3\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\1\6\1\301\24\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\1\6\1\302\13\6\1\230\10\6\20\0\3\6\1\0"+
    "\21\6\6\0\2\6\7\0\1\6\1\0\1\6\1\303"+
    "\7\6\1\304\14\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\13\6\1\305\10\6\1\306"+
    "\1\6\20\0\3\6\1\0\21\6\6\0\2\6\7\0"+
    "\1\6\1\0\2\6\1\307\23\6\20\0\3\6\1\0"+
    "\21\6\6\0\2\6\7\0\1\6\1\0\16\6\1\310"+
    "\7\6\20\0\3\6\1\0\21\6\6\0\2\6\7\0"+
    "\1\6\1\0\15\6\1\311\10\6\20\0\3\6\1\0"+
    "\21\6\6\0\2\6\7\0\1\6\1\0\17\6\1\312"+
    "\6\6\20\0\3\6\1\0\21\6\6\0\2\6\7\0"+
    "\1\6\1\0\1\313\25\6\20\0\1\246\2\6\1\0"+
    "\21\6\6\0\2\6\7\0\1\6\1\0\1\314\1\6"+
    "\1\315\23\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\1\6\1\316\24\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\15\6"+
    "\1\317\10\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\2\6\1\320\23\6\20\0\3\6"+
    "\1\0\21\6\7\0\1\214\7\0\1\321\100\0\10\107"+
    "\1\322\1\215\102\107\2\0\2\6\7\0\1\6\1\0"+
    "\2\6\1\323\23\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\5\6\1\324\20\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\16\6\1\325\7\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\14\6\1\326\1\327\1\6"+
    "\1\330\6\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\6\6\1\331\17\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\1\332"+
    "\25\6\20\0\3\6\1\0\21\6\6\0\2\6\7\0"+
    "\1\6\1\0\14\6\1\333\11\6\20\0\3\6\1\0"+
    "\21\6\6\0\2\6\7\0\1\6\1\0\26\6\1\334"+
    "\17\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\6\6\1\335\17\6\20\0\3\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\6\6\1\336\17\6"+
    "\20\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\7\6\1\337\3\6\1\340\12\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\1\6"+
    "\1\341\24\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\1\342\25\6\20\0\3\6\1\0"+
    "\21\6\6\0\2\6\7\0\1\6\1\0\26\6\1\343"+
    "\17\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\26\6\1\344\17\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\15\6\1\345\10\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\26\6\20\0\1\346\2\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\1\347\25\6\20\0\3\6\1\0"+
    "\21\6\6\0\2\6\7\0\1\6\1\0\1\6\1\350"+
    "\24\6\20\0\3\6\1\0\21\6\6\0\2\6\7\0"+
    "\1\6\1\0\26\6\1\351\17\0\3\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\7\6\1\352\16\6"+
    "\20\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\1\353\25\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\1\6\1\354\24\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\3\6\1\355\22\6\1\356\17\0\3\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\1\6\1\357\24\6"+
    "\20\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\26\6\1\360\17\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\4\6\1\361\21\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\4\6\1\362\21\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\21\6\1\363\4\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\17\6\1\364\6\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\6\6\1\365\17\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\14\6\1\366\11\6\20\0\3\6\1\0\21\6\102\0"+
    "\1\367\110\0\1\370\116\0\1\371\30\0\1\372\202\0"+
    "\1\373\102\0\1\374\112\0\1\375\121\0\1\376\114\0"+
    "\1\377\113\0\1\u0100\106\0\1\u0101\34\0\1\u0102\102\0"+
    "\2\6\7\0\1\6\1\0\2\6\1\u0103\23\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\16\6\1\u0104\7\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\14\6\1\u0105\1\u0106\1\6"+
    "\1\u0107\6\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\6\6\1\u0108\17\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\6\6"+
    "\1\u0109\17\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\7\6\1\u010a\3\6\1\u010b\12\6"+
    "\20\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\15\6\1\u010c\10\6\20\0\3\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\1\u010d\25\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\1\6\1\u010e\24\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\7\6\1\u010f\16\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\1\6\1\u0110\24\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\3\6\1\u0111\22\6\1\356"+
    "\17\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\21\6\1\u0112\4\6\20\0\3\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\17\6\1\u0113\6\6"+
    "\20\0\3\6\1\0\21\6\7\0\1\u0114\10\0\1\u0114"+
    "\101\0\2\6\7\0\1\6\1\0\3\6\1\u0115\22\6"+
    "\20\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\2\6\1\u0116\23\6\20\0\3\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\25\6\1\u0117\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\3\6\1\u0118\22\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\1\6\1\u0119\24\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\1\u011a\25\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\20\6\1\u011b\5\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\23\6"+
    "\1\u011c\2\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\6\6\1\u011d\17\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\1\6"+
    "\1\u011e\24\6\1\u011f\17\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\3\6\1\u0120\22\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\14\6\1\u0121\11\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\5\6\1\u0122\20\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\1\6\1\u0123\24\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\1\6\1\u0124\24\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\1\6\1\u0125\24\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\26\6\1\u0126\17\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\26\6"+
    "\1\u0127\17\0\3\6\1\0\21\6\6\0\2\6\7\0"+
    "\1\6\1\0\14\6\1\u0128\11\6\20\0\3\6\1\0"+
    "\21\6\6\0\2\6\7\0\1\6\1\0\5\6\1\u0129"+
    "\20\6\20\0\3\6\1\0\21\6\6\0\2\6\7\0"+
    "\1\6\1\0\17\6\1\u012a\6\6\20\0\3\6\1\0"+
    "\21\6\6\0\2\6\7\0\1\6\1\0\26\6\20\0"+
    "\1\u012b\2\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\6\6\1\u012c\17\6\20\0\3\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\1\u012d\25\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\22\6\1\u012e\3\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\6\6\1\u012f\17\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\6\6\1\u0130\17\6\20\0\3\6\1\0\21\6\17\0"+
    "\1\u0131\170\0\1\u0132\36\0\1\u0133\113\0\1\u0134\113\0"+
    "\1\u0135\170\0\1\u0136\114\0\1\u0137\122\0\1\u0138\104\0"+
    "\1\u0139\121\0\1\u013a\120\0\1\u013b\110\0\1\u013c\14\0"+
    "\2\6\7\0\1\6\1\0\3\6\1\u013d\22\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\25\6\1\u013e\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\3\6\1\u013f\22\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\1\6"+
    "\1\u0140\24\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\1\u0141\25\6\20\0\3\6\1\0"+
    "\21\6\6\0\2\6\7\0\1\6\1\0\20\6\1\u0142"+
    "\5\6\20\0\3\6\1\0\21\6\6\0\2\6\7\0"+
    "\1\6\1\0\1\6\1\u0143\24\6\1\u011f\17\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\3\6"+
    "\1\u0144\22\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\14\6\1\u0145\11\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\1\6"+
    "\1\u0146\24\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\1\6\1\u0147\24\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\5\6"+
    "\1\u0148\20\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\17\6\1\u0149\6\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\22\6"+
    "\1\u014a\3\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\6\6\1\u014b\17\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\4\6"+
    "\1\u014c\21\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\17\6\1\u014d\6\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\6\6"+
    "\1\u014e\17\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\15\6\1\u014f\10\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\2\6"+
    "\1\u0150\23\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\26\6\1\u0151\17\0\3\6\1\0"+
    "\21\6\6\0\2\6\7\0\1\6\1\0\6\6\1\u0152"+
    "\17\6\20\0\3\6\1\0\21\6\6\0\2\6\7\0"+
    "\1\6\1\0\1\u0153\25\6\20\0\3\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\3\6\1\u0154\22\6"+
    "\20\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\12\6\1\u0155\13\6\20\0\3\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\5\6\1\u0156\20\6"+
    "\20\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\14\6\1\u0157\11\6\20\0\3\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\26\6\1\u0158\17\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\3\6\1\u0159\22\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\26\6\1\u015a\17\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\15\6"+
    "\1\u015b\10\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\20\6\1\u015c\5\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\21\6"+
    "\1\u015d\4\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\2\6\1\u015e\23\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\14\6"+
    "\1\u015f\11\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\3\6\1\u0160\7\6\1\u0161\4\6"+
    "\1\u0162\2\6\1\u0163\2\6\20\0\3\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\14\6\1\u0164\11\6"+
    "\20\0\3\6\1\0\21\6\100\0\1\u0165\110\0\1\u0166"+
    "\117\0\1\u0167\105\0\1\u0168\132\0\1\u0169\77\0\1\u016a"+
    "\112\0\1\u016b\3\0\1\u016c\31\0\1\u016d\113\0\1\u016e"+
    "\173\0\1\u016f\22\0\2\6\7\0\1\6\1\0\4\6"+
    "\1\u0170\21\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\6\6\1\u0171\17\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\15\6"+
    "\1\u0172\10\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\2\6\1\u0173\23\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\6\6"+
    "\1\u0174\17\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\3\6\1\u0175\22\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\12\6"+
    "\1\u0176\13\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\5\6\1\u0177\20\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\15\6"+
    "\1\u0178\10\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\20\6\1\u0179\5\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\3\6"+
    "\1\u017a\7\6\1\u017b\4\6\1\u017c\2\6\1\u017d\2\6"+
    "\20\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\14\6\1\u017e\11\6\20\0\3\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\5\6\1\u017f\20\6"+
    "\20\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\26\6\1\u0180\17\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\1\6\1\u0181\24\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\3\6\1\u0182\22\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\2\6\1\u0183\23\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\17\6\1\u0184\6\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\10\6\1\u0185\15\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\12\6\1\u0186\13\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\15\6\1\u0187\10\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\1\6\1\u0188\24\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\16\6\1\u0189\7\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\26\6\1\u018a\17\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\26\6\1\u018b\17\0\3\6\1\0"+
    "\21\6\6\0\2\6\7\0\1\6\1\0\15\6\1\u018c"+
    "\10\6\20\0\3\6\1\0\21\6\6\0\2\6\7\0"+
    "\1\6\1\0\5\6\1\u018d\20\6\20\0\3\6\1\0"+
    "\21\6\6\0\2\6\7\0\1\6\1\0\6\6\1\u018e"+
    "\17\6\20\0\3\6\1\0\21\6\6\0\2\6\7\0"+
    "\1\6\1\0\6\6\1\u018f\17\6\20\0\3\6\1\0"+
    "\21\6\6\0\2\6\7\0\1\6\1\0\26\6\1\u0190"+
    "\17\0\3\6\1\0\21\6\76\0\1\u0191\114\0\1\u0192"+
    "\113\0\1\u0193\117\0\1\u0194\115\0\1\u0195\114\0\1\u0196"+
    "\104\0\1\u0197\113\0\1\u0198\117\0\1\u0199\113\0\1\u019a"+
    "\16\0\2\6\7\0\1\6\1\0\5\6\1\u019b\20\6"+
    "\20\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\1\6\1\u019c\24\6\20\0\3\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\3\6\1\u019d\22\6"+
    "\20\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\2\6\1\u019e\23\6\20\0\3\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\10\6\1\u019f\15\6"+
    "\20\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\12\6\1\u01a0\13\6\20\0\3\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\15\6\1\u01a1\10\6"+
    "\20\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\15\6\1\u01a2\10\6\20\0\3\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\5\6\1\u01a3\20\6"+
    "\20\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\6\6\1\u01a4\17\6\20\0\3\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\6\6\1\u01a5\17\6"+
    "\20\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\1\6\1\u01a6\24\6\20\0\3\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\26\6\1\u01a7\17\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\17\6\1\u01a8\6\6\20\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\26\6\1\u01a9\17\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\6\6"+
    "\1\u01aa\17\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\26\6\1\u01ab\17\0\3\6\1\0"+
    "\21\6\6\0\2\6\7\0\1\6\1\0\26\6\1\u01ac"+
    "\17\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\17\6\1\u01ad\6\6\20\0\3\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\23\6\1\u01ae\2\6"+
    "\20\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\1\6\1\u01af\24\6\20\0\3\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\1\6\1\u01b0\24\6"+
    "\20\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\11\6\1\u01b1\14\6\20\0\3\6\1\0\21\6"+
    "\77\0\1\u01b2\33\0\1\u01b3\177\0\1\u01b4\16\0\2\6"+
    "\7\0\1\6\1\0\1\6\1\u01b5\24\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\17\6"+
    "\1\u01b6\6\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\6\6\1\u01b7\17\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\23\6"+
    "\1\u01b8\2\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\1\6\1\u01b9\24\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\1\6"+
    "\1\u01ba\24\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\11\6\1\u01bb\14\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\6\6"+
    "\1\u01bc\17\6\20\0\3\6\1\0\21\6\6\0\2\6"+
    "\7\0\1\6\1\0\20\6\1\u01bd\5\6\20\0\3\6"+
    "\1\0\21\6\6\0\2\6\7\0\1\6\1\0\26\6"+
    "\1\u01be\17\0\3\6\1\0\21\6\6\0\2\6\7\0"+
    "\1\6\1\0\6\6\1\u01bf\17\6\20\0\3\6\1\0"+
    "\21\6\6\0\2\6\7\0\1\6\1\0\26\6\1\u01c0"+
    "\17\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\26\6\1\u01c1\17\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\15\6\1\u01c2\10\6\20\0"+
    "\3\6\1\0\21\6\74\0\1\u01c3\112\0\1\u01c4\37\0"+
    "\1\u01c5\102\0\2\6\7\0\1\6\1\0\6\6\1\u01c6"+
    "\17\6\20\0\3\6\1\0\21\6\6\0\2\6\7\0"+
    "\1\6\1\0\20\6\1\u01c7\5\6\20\0\3\6\1\0"+
    "\21\6\6\0\2\6\7\0\1\6\1\0\6\6\1\u01c8"+
    "\17\6\20\0\3\6\1\0\21\6\6\0\2\6\7\0"+
    "\1\6\1\0\15\6\1\u01c9\10\6\20\0\3\6\1\0"+
    "\21\6\6\0\2\6\7\0\1\6\1\0\26\6\1\u01ca"+
    "\17\0\3\6\1\0\21\6\6\0\2\6\7\0\1\6"+
    "\1\0\26\6\1\u01cb\17\0\3\6\1\0\21\6\6\0"+
    "\2\6\7\0\1\6\1\0\11\6\1\u01cc\14\6\20\0"+
    "\3\6\1\0\21\6\6\0\2\6\7\0\1\6\1\0"+
    "\26\6\1\u01cd\17\0\3\6\1\0\21\6\100\0\1\u01ce"+
    "\123\0\1\u01cf\102\0\1\u01d0\22\0\2\6\7\0\1\6"+
    "\1\0\11\6\1\u01d1\14\6\20\0\3\6\1\0\21\6"+
    "\6\0\2\6\7\0\1\6\1\0\26\6\1\u01d2\17\0"+
    "\3\6\1\0\21\6\101\0\1\u01d3\31\0\1\u01d4\177\0"+
    "\1\u01d5\53\0\1\u01d6\145\0\1\u01d7\125\0\1\u01d8\105\0"+
    "\1\u01d9\125\0\1\u01da\113\0\1\u01db\17\0\1\u01dc\203\0"+
    "\1\u01dd\107\0\1\u01de\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27436];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\25\1\6\11\11\1\1\11\3\1\4\11"+
    "\14\1\3\11\1\0\1\11\2\1\1\11\1\1\1\0"+
    "\2\11\36\1\13\11\2\1\7\0\21\1\1\0\45\1"+
    "\13\0\23\1\1\0\1\11\11\1\1\11\6\1\2\11"+
    "\4\1\1\11\4\1\1\11\1\1\1\11\6\1\14\0"+
    "\34\1\1\11\6\1\2\11\11\1\1\11\4\0\1\11"+
    "\6\0\24\1\1\11\6\1\1\11\1\1\1\11\12\1"+
    "\1\11\11\0\21\1\1\11\11\1\2\11\4\1\1\11"+
    "\1\0\1\11\1\0\5\11\1\0\1\11\14\1\1\11"+
    "\1\1\1\11\1\1\2\11\5\1\3\0\11\1\1\11"+
    "\1\1\2\11\1\1\3\0\4\1\2\11\1\1\2\11"+
    "\1\0\1\11\1\1\1\11\2\0\1\1\10\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[478];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private final FormulaEngineLexerStateTracker stateTracker = new FormulaEngineLexerStateTracker(this);

  @Override
  public int getInitialState() {
      return YYINITIAL;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FormulaEngineLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 143: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 144: break;
          case 3: 
            { return FormulaEngineElementTypes.IDENTIFIER;
            } 
            // fall through
          case 145: break;
          case 4: 
            { return FormulaEngineElementTypes.NUMBER_INTEGER;
            } 
            // fall through
          case 146: break;
          case 5: 
            { return FormulaEngineElementTypes.SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 147: break;
          case 6: 
            { return FormulaEngineElementTypes.DOUBLE_QUOTED_STRING;
            } 
            // fall through
          case 148: break;
          case 7: 
            { return FormulaEngineElementTypes.OPERATOR_DIVIDE;
            } 
            // fall through
          case 149: break;
          case 8: 
            { return FormulaEngineElementTypes.OPERATOR_MULTIPLY;
            } 
            // fall through
          case 150: break;
          case 9: 
            { stateTracker.beginState(IN_PARENTHESIS); return FormulaEngineElementTypes.LEFT_PARENTHESIS;
            } 
            // fall through
          case 151: break;
          case 10: 
            { stateTracker.endState(); return FormulaEngineElementTypes.RIGHT_PARENTHESIS;
            } 
            // fall through
          case 152: break;
          case 11: 
            { return FormulaEngineElementTypes.LEFT_CURLY_BRACE;
            } 
            // fall through
          case 153: break;
          case 12: 
            { return FormulaEngineElementTypes.RIGHT_CURLY_BRACE;
            } 
            // fall through
          case 154: break;
          case 13: 
            { return FormulaEngineElementTypes.LEFT_BRACKET;
            } 
            // fall through
          case 155: break;
          case 14: 
            { return FormulaEngineElementTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 156: break;
          case 15: 
            { return FormulaEngineElementTypes.OPERATOR_ASSIGNMENT;
            } 
            // fall through
          case 157: break;
          case 16: 
            { return FormulaEngineElementTypes.OPERATOR_MINUS;
            } 
            // fall through
          case 158: break;
          case 17: 
            { return FormulaEngineElementTypes.OPERATOR_GREATERTHAN;
            } 
            // fall through
          case 159: break;
          case 18: 
            { return FormulaEngineElementTypes.OPERATOR_PLUS;
            } 
            // fall through
          case 160: break;
          case 19: 
            { return FormulaEngineElementTypes.OPERATOR_LESSTHAN;
            } 
            // fall through
          case 161: break;
          case 20: 
            { return FormulaEngineElementTypes.OPERATOR_MODULO;
            } 
            // fall through
          case 162: break;
          case 21: 
            { return FormulaEngineElementTypes.OPERATOR_NEGATION;
            } 
            // fall through
          case 163: break;
          case 22: 
            { return FormulaEngineElementTypes.OPERATOR_POWER;
            } 
            // fall through
          case 164: break;
          case 23: 
            { return FormulaEngineElementTypes.COMMA;
            } 
            // fall through
          case 165: break;
          case 24: 
            { return FormulaEngineElementTypes.SEMICOLON;
            } 
            // fall through
          case 166: break;
          case 25: 
            { return FormulaEngineElementTypes.COLON;
            } 
            // fall through
          case 167: break;
          case 26: 
            { return FormulaEngineElementTypes.QUESIONMARK;
            } 
            // fall through
          case 168: break;
          case 27: 
            { return FormulaEngineElementTypes.LEFT_PARENTHESIS;
            } 
            // fall through
          case 169: break;
          case 28: 
            { return FormulaEngineElementTypes.RIGHT_PARENTHESIS;
            } 
            // fall through
          case 170: break;
          case 29: 
            { stateTracker.endState(); return FormulaEngineElementTypes.LEFT_CURLY_BRACE;
            } 
            // fall through
          case 171: break;
          case 30: 
            { return FormulaEngineElementTypes.LINE_COMMENT;
            } 
            // fall through
          case 172: break;
          case 31: 
            { return FormulaEngineElementTypes.OPERATOR_DIVIDEASSIGNMENT;
            } 
            // fall through
          case 173: break;
          case 32: 
            { return FormulaEngineElementTypes.OPERATOR_MULTIPLYASSIGNMENT;
            } 
            // fall through
          case 174: break;
          case 33: 
            { return FormulaEngineElementTypes.KEYWORD_IF;
            } 
            // fall through
          case 175: break;
          case 34: 
            { return FormulaEngineElementTypes.KEYWORD_DO;
            } 
            // fall through
          case 176: break;
          case 35: 
            { return FormulaEngineElementTypes.KEYWORD_OR;
            } 
            // fall through
          case 177: break;
          case 36: 
            { return FormulaEngineElementTypes.OPERATOR_AND;
            } 
            // fall through
          case 178: break;
          case 37: 
            { return FormulaEngineElementTypes.OPERATOR_EQUAL;
            } 
            // fall through
          case 179: break;
          case 38: 
            { return FormulaEngineElementTypes.OPERATOR_SUBTRACTASSIGNMENT;
            } 
            // fall through
          case 180: break;
          case 39: 
            { return FormulaEngineElementTypes.OPERATOR_DECREMENT;
            } 
            // fall through
          case 181: break;
          case 40: 
            { return FormulaEngineElementTypes.OPERATOR_GREATERTHANEQUAL;
            } 
            // fall through
          case 182: break;
          case 41: 
            { return FormulaEngineElementTypes.OPERATOR_ADDASSIGNMENT;
            } 
            // fall through
          case 183: break;
          case 42: 
            { return FormulaEngineElementTypes.OPERATOR_INCREMENT;
            } 
            // fall through
          case 184: break;
          case 43: 
            { return FormulaEngineElementTypes.OPERATOR_LESSTHANEQUAL;
            } 
            // fall through
          case 185: break;
          case 44: 
            { return FormulaEngineElementTypes.OPERATOR_MODULOASSIGNMENT;
            } 
            // fall through
          case 186: break;
          case 45: 
            { return FormulaEngineElementTypes.OPERATOR_NOTEQUAL;
            } 
            // fall through
          case 187: break;
          case 46: 
            { return FormulaEngineElementTypes.OPERATOR_OR;
            } 
            // fall through
          case 188: break;
          case 47: 
            { return FormulaEngineElementTypes.NUMBER_FLOAT;
            } 
            // fall through
          case 189: break;
          case 48: 
            { return FormulaEngineElementTypes.KEYWORD_AND;
            } 
            // fall through
          case 190: break;
          case 49: 
            { return FormulaEngineElementTypes.KEYWORD_ANY;
            } 
            // fall through
          case 191: break;
          case 50: 
            { return FormulaEngineElementTypes.KEYWORD_FOR;
            } 
            // fall through
          case 192: break;
          case 51: 
            { return FormulaEngineElementTypes.KEYWORD_SEQ;
            } 
            // fall through
          case 193: break;
          case 52: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_NA;
            } 
            // fall through
          case 194: break;
          case 53: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_ELT;
            } 
            // fall through
          case 195: break;
          case 54: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_MAP;
            } 
            // fall through
          case 196: break;
          case 55: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_MAX;
            } 
            // fall through
          case 197: break;
          case 56: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_LEN;
            } 
            // fall through
          case 198: break;
          case 57: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_STR;
            } 
            // fall through
          case 199: break;
          case 58: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_OUT;
            } 
            // fall through
          case 200: break;
          case 59: 
            { return FormulaEngineElementTypes.BLOCK_COMMENT;
            } 
            // fall through
          case 201: break;
          case 60: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_ELT;
            } 
            // fall through
          case 202: break;
          case 61: 
            { return FormulaEngineElementTypes.KEYWORD_ELSE;
            } 
            // fall through
          case 203: break;
          case 62: 
            { return FormulaEngineElementTypes.KEYWORD_DATE;
            } 
            // fall through
          case 204: break;
          case 63: 
            { return FormulaEngineElementTypes.KEYWORD_DICT;
            } 
            // fall through
          case 205: break;
          case 64: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_MAP;
            } 
            // fall through
          case 206: break;
          case 65: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_MAX;
            } 
            // fall through
          case 207: break;
          case 66: 
            { return FormulaEngineElementTypes.KEYWORD_LIST;
            } 
            // fall through
          case 208: break;
          case 67: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_LEN;
            } 
            // fall through
          case 209: break;
          case 68: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_STR;
            } 
            // fall through
          case 210: break;
          case 69: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_OUT;
            } 
            // fall through
          case 211: break;
          case 70: 
            { return FormulaEngineElementTypes.KEYWORD_CASE;
            } 
            // fall through
          case 212: break;
          case 71: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_DATE;
            } 
            // fall through
          case 213: break;
          case 72: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_LIST;
            } 
            // fall through
          case 214: break;
          case 73: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_LOAD;
            } 
            // fall through
          case 215: break;
          case 74: 
            { return FormulaEngineElementTypes.NUMBER_SCIENTIFIC;
            } 
            // fall through
          case 216: break;
          case 75: 
            { return FormulaEngineElementTypes.KEYWORD_BREAK;
            } 
            // fall through
          case 217: break;
          case 76: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DATE;
            } 
            // fall through
          case 218: break;
          case 77: 
            { return FormulaEngineElementTypes.KEYWORD_FLOAT;
            } 
            // fall through
          case 219: break;
          case 78: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_LIST;
            } 
            // fall through
          case 220: break;
          case 79: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_LOAD;
            } 
            // fall through
          case 221: break;
          case 80: 
            { return FormulaEngineElementTypes.VISIBILITY_LOCAL;
            } 
            // fall through
          case 222: break;
          case 81: 
            { return FormulaEngineElementTypes.KEYWORD_WHILE;
            } 
            // fall through
          case 223: break;
          case 82: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_NAME;
            } 
            // fall through
          case 224: break;
          case 83: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_DATA;
            } 
            // fall through
          case 225: break;
          case 84: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_NA;
            } 
            // fall through
          case 226: break;
          case 85: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_FIRST;
            } 
            // fall through
          case 227: break;
          case 86: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_FLOAT;
            } 
            // fall through
          case 228: break;
          case 87: 
            { return FormulaEngineElementTypes.KEYWORD_RETURN;
            } 
            // fall through
          case 229: break;
          case 88: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_NA;
            } 
            // fall through
          case 230: break;
          case 89: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_FIRST;
            } 
            // fall through
          case 231: break;
          case 90: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_FLOAT;
            } 
            // fall through
          case 232: break;
          case 91: 
            { return FormulaEngineElementTypes.KEYWORD_STRING;
            } 
            // fall through
          case 233: break;
          case 92: 
            { return FormulaEngineElementTypes.KEYWORD_SWITCH;
            } 
            // fall through
          case 234: break;
          case 93: 
            { return FormulaEngineElementTypes.KEYWORD_NUMBER;
            } 
            // fall through
          case 235: break;
          case 94: 
            { return FormulaEngineElementTypes.VISIBILITY_GLOBAL;
            } 
            // fall through
          case 236: break;
          case 95: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_TODAY;
            } 
            // fall through
          case 237: break;
          case 96: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_FIELD;
            } 
            // fall through
          case 238: break;
          case 97: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_REMOVE;
            } 
            // fall through
          case 239: break;
          case 98: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_STATUS;
            } 
            // fall through
          case 240: break;
          case 99: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_STRING;
            } 
            // fall through
          case 241: break;
          case 100: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_KERNEL;
            } 
            // fall through
          case 242: break;
          case 101: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_REMOVE;
            } 
            // fall through
          case 243: break;
          case 102: 
            { return FormulaEngineElementTypes.KEYWORD_INTEGER;
            } 
            // fall through
          case 244: break;
          case 103: 
            { return FormulaEngineElementTypes.KEYWORD_BOOLEAN;
            } 
            // fall through
          case 245: break;
          case 104: 
            { return FormulaEngineElementTypes.KEYWORD_DEFAULT;
            } 
            // fall through
          case 246: break;
          case 105: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_STATUS;
            } 
            // fall through
          case 247: break;
          case 106: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_STRING;
            } 
            // fall through
          case 248: break;
          case 107: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_KERNEL;
            } 
            // fall through
          case 249: break;
          case 108: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_TREEID;
            } 
            // fall through
          case 250: break;
          case 109: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_STATUS;
            } 
            // fall through
          case 251: break;
          case 110: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_SYMBOL;
            } 
            // fall through
          case 252: break;
          case 111: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_LISTTP;
            } 
            // fall through
          case 253: break;
          case 112: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_LISTID;
            } 
            // fall through
          case 254: break;
          case 113: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_PASSED;
            } 
            // fall through
          case 255: break;
          case 114: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_FIELDS;
            } 
            // fall through
          case 256: break;
          case 115: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_LIST;
            } 
            // fall through
          case 257: break;
          case 116: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_INTEGER;
            } 
            // fall through
          case 258: break;
          case 117: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_DAYDIFF;
            } 
            // fall through
          case 259: break;
          case 118: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_DAYPLUS;
            } 
            // fall through
          case 260: break;
          case 119: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_LIST;
            } 
            // fall through
          case 261: break;
          case 120: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_INTEGER;
            } 
            // fall through
          case 262: break;
          case 121: 
            { return FormulaEngineElementTypes.KEYWORD_DATETIME;
            } 
            // fall through
          case 263: break;
          case 122: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DAYDIFF;
            } 
            // fall through
          case 264: break;
          case 123: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DAYPLUS;
            } 
            // fall through
          case 265: break;
          case 124: 
            { stateTracker.beginState(IN_FUNCTION_HEADER); return FormulaEngineElementTypes.KEYWORD_FUNCTION;
            } 
            // fall through
          case 266: break;
          case 125: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_DATETIME;
            } 
            // fall through
          case 267: break;
          case 126: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_PUT;
            } 
            // fall through
          case 268: break;
          case 127: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_GET;
            } 
            // fall through
          case 269: break;
          case 128: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DATETIME;
            } 
            // fall through
          case 270: break;
          case 129: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_PUT;
            } 
            // fall through
          case 271: break;
          case 130: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_GET;
            } 
            // fall through
          case 272: break;
          case 131: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_ATTRIBUTE;
            } 
            // fall through
          case 273: break;
          case 132: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_STRING;
            } 
            // fall through
          case 274: break;
          case 133: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_KEYS;
            } 
            // fall through
          case 275: break;
          case 134: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_ATTRIBUTE;
            } 
            // fall through
          case 276: break;
          case 135: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_STRING;
            } 
            // fall through
          case 277: break;
          case 136: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_KEYS;
            } 
            // fall through
          case 278: break;
          case 137: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_TIMETODAY;
            } 
            // fall through
          case 279: break;
          case 138: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_PROCESSED;
            } 
            // fall through
          case 280: break;
          case 139: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_ISKEY;
            } 
            // fall through
          case 281: break;
          case 140: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_ISKEY;
            } 
            // fall through
          case 282: break;
          case 141: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_DEPENDENCIES;
            } 
            // fall through
          case 283: break;
          case 142: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_DEPENDENCIES_TRIGGERS;
            } 
            // fall through
          case 284: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
