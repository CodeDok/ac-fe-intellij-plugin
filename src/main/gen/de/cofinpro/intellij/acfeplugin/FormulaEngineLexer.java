/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package de.cofinpro.intellij.acfeplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import de.cofinpro.intellij.acfeplugin.psi.FormulaEngineElementType;
import de.cofinpro.intellij.acfeplugin.psi.FormulaEngineElementTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>FormulaEngine.flex</tt>
 */
public class FormulaEngineLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\6\1\0\1\1\1\6\22\0\1\1\1\0\1\7\1\0\1\43\2\0\1\4\1\12\1\13\1\11"+
    "\4\0\1\10\12\3\3\0\1\20\3\0\1\45\14\2\1\44\14\2\1\16\1\5\1\17\1\0\1\50\1\0"+
    "\1\33\1\35\1\24\1\37\1\31\1\21\1\34\1\42\1\26\1\2\1\51\1\32\1\46\1\23\1\27"+
    "\1\47\1\2\1\30\1\36\1\25\1\22\1\52\1\41\1\2\1\40\1\2\1\14\1\0\1\15\202\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\14\3"+
    "\1\1\1\3\2\5\2\6\1\16\1\0\3\3\1\17"+
    "\20\3\1\0\1\3\1\0\1\3\1\20\14\3\1\21"+
    "\11\3\1\22\1\3\1\23\5\3\1\24\2\3\1\25"+
    "\1\26\1\27\2\3\1\30\2\3\1\31\2\3\1\32"+
    "\7\3\1\33\5\3\1\34\1\35\4\3\1\36\3\3"+
    "\1\37\3\3\1\40\1\3\1\41\1\3\1\42\2\3"+
    "\1\43\1\44\12\3\1\45\1\3\1\46\1\3\1\47"+
    "\7\3\1\50\1\51\1\52\1\53\2\3\1\54\1\55"+
    "\5\3\1\56\1\3\1\57\1\60\1\3\1\61\1\3"+
    "\1\62\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\126\0\201\0\254\0\327\0\u0102"+
    "\0\u012d\0\126\0\126\0\126\0\126\0\126\0\126\0\126"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285"+
    "\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\126\0\u03b2"+
    "\0\u03dd\0\126\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4\0\201"+
    "\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c"+
    "\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764"+
    "\0\u078f\0\u07ba\0\u07e5\0\u0810\0\201\0\u083b\0\u0866\0\u0891"+
    "\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be\0\u09e9"+
    "\0\u0a14\0\201\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16"+
    "\0\u0b41\0\u0b6c\0\u0b97\0\126\0\u0bc2\0\126\0\u0bed\0\u0c18"+
    "\0\u0c43\0\u0c6e\0\u0c99\0\126\0\u0cc4\0\u0cef\0\126\0\201"+
    "\0\201\0\u0d1a\0\u0d45\0\126\0\u0d70\0\u0d9b\0\126\0\u0dc6"+
    "\0\u0df1\0\201\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3"+
    "\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5\0\u1020\0\201"+
    "\0\126\0\u104b\0\u1076\0\u10a1\0\u10cc\0\126\0\u10f7\0\u1122"+
    "\0\u114d\0\201\0\u1178\0\u11a3\0\u11ce\0\126\0\u11f9\0\126"+
    "\0\u1224\0\201\0\u124f\0\u127a\0\201\0\201\0\u12a5\0\u12d0"+
    "\0\u12fb\0\u1326\0\u1351\0\u137c\0\u13a7\0\u13d2\0\u13fd\0\u1428"+
    "\0\u1453\0\u147e\0\126\0\u14a9\0\126\0\u14d4\0\u14ff\0\u152a"+
    "\0\u1555\0\u1580\0\u15ab\0\u15d6\0\126\0\201\0\126\0\126"+
    "\0\u1601\0\u162c\0\126\0\126\0\u1657\0\u1682\0\u16ad\0\u16d8"+
    "\0\u1703\0\126\0\u172e\0\126\0\126\0\u1759\0\126\0\u1784"+
    "\0\126\0\126";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\3\1\4\1\10"+
    "\1\11\1\3\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\4\5\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\5\1\31\1\32\1\5\1\33\1\34"+
    "\1\35\5\5\1\36\1\5\53\3\55\0\2\5\15\0"+
    "\22\5\1\0\7\5\3\0\1\6\47\0\4\7\1\37"+
    "\1\40\1\0\44\7\5\10\1\41\1\0\1\42\43\10"+
    "\10\0\1\43\1\44\43\0\2\5\15\0\1\5\1\45"+
    "\4\5\1\46\2\5\1\47\10\5\1\0\7\5\2\0"+
    "\2\5\15\0\1\50\1\5\1\51\12\5\1\52\4\5"+
    "\1\0\7\5\2\0\2\5\15\0\1\5\1\53\20\5"+
    "\1\0\7\5\2\0\2\5\15\0\10\5\1\54\11\5"+
    "\1\0\7\5\2\0\2\5\15\0\11\5\1\55\10\5"+
    "\1\0\7\5\2\0\2\5\15\0\5\5\1\56\1\57"+
    "\1\5\1\60\11\5\1\0\7\5\2\0\2\5\15\0"+
    "\2\5\1\61\1\5\1\62\15\5\1\0\7\5\2\0"+
    "\2\5\15\0\11\5\1\63\10\5\1\0\7\5\2\0"+
    "\2\5\15\0\4\5\1\64\15\5\1\0\7\5\2\0"+
    "\2\5\15\0\5\5\1\65\4\5\1\66\7\5\1\0"+
    "\7\5\2\0\2\5\15\0\21\5\1\67\1\0\7\5"+
    "\2\0\2\5\15\0\12\5\1\70\7\5\1\0\7\5"+
    "\44\0\1\71\10\0\2\5\15\0\10\5\1\72\11\5"+
    "\1\0\7\5\53\7\53\10\6\43\1\0\44\43\11\44"+
    "\1\73\41\44\2\0\2\5\15\0\2\5\1\74\17\5"+
    "\1\0\7\5\2\0\2\5\15\0\7\5\1\75\12\5"+
    "\1\0\7\5\2\0\2\5\15\0\6\5\1\76\13\5"+
    "\1\0\7\5\2\0\2\5\15\0\4\5\1\77\15\5"+
    "\1\0\7\5\2\0\2\5\15\0\22\5\1\0\4\5"+
    "\1\100\2\5\2\0\2\5\15\0\4\5\1\101\15\5"+
    "\1\0\7\5\2\0\2\5\15\0\4\5\1\102\15\5"+
    "\1\0\2\5\1\103\4\5\2\0\2\5\15\0\4\5"+
    "\1\104\10\5\1\105\4\5\1\0\7\5\2\0\2\5"+
    "\15\0\15\5\1\106\4\5\1\0\7\5\2\0\2\5"+
    "\15\0\3\5\1\107\6\5\1\110\7\5\1\0\7\5"+
    "\2\0\2\5\15\0\2\5\1\111\17\5\1\0\7\5"+
    "\2\0\2\5\15\0\17\5\1\112\2\5\1\0\7\5"+
    "\2\0\2\5\15\0\4\5\1\113\15\5\1\0\7\5"+
    "\2\0\2\5\15\0\6\5\1\114\13\5\1\0\7\5"+
    "\2\0\2\5\15\0\7\5\1\115\2\5\1\116\7\5"+
    "\1\0\7\5\2\0\2\5\15\0\3\5\1\117\16\5"+
    "\1\0\7\5\2\0\2\5\15\0\4\5\1\120\12\5"+
    "\1\121\2\5\1\0\7\5\2\0\2\5\15\0\5\5"+
    "\1\122\14\5\1\0\7\5\2\0\2\5\15\0\15\5"+
    "\1\123\4\5\1\0\7\5\45\0\1\124\7\0\2\5"+
    "\15\0\7\5\1\125\12\5\1\0\7\5\10\44\1\126"+
    "\1\73\41\44\2\0\2\5\15\0\3\5\1\127\16\5"+
    "\1\0\7\5\2\0\2\5\15\0\12\5\1\130\7\5"+
    "\1\0\7\5\2\0\2\5\15\0\10\5\1\131\11\5"+
    "\1\0\7\5\2\0\2\5\15\0\2\5\1\132\6\5"+
    "\1\133\10\5\1\0\7\5\2\0\2\5\6\0\1\134"+
    "\6\0\22\5\1\0\7\5\2\0\2\5\15\0\1\5"+
    "\1\135\20\5\1\0\7\5\2\0\2\5\15\0\6\5"+
    "\1\136\13\5\1\0\7\5\2\0\2\5\6\0\1\137"+
    "\6\0\22\5\1\0\7\5\2\0\2\5\15\0\10\5"+
    "\1\140\11\5\1\0\7\5\2\0\2\5\15\0\4\5"+
    "\1\141\15\5\1\0\7\5\2\0\2\5\15\0\12\5"+
    "\1\142\7\5\1\0\7\5\2\0\2\5\15\0\16\5"+
    "\1\143\3\5\1\0\7\5\2\0\2\5\6\0\1\144"+
    "\6\0\22\5\1\0\7\5\2\0\2\5\15\0\7\5"+
    "\1\145\12\5\1\0\7\5\2\0\2\5\15\0\14\5"+
    "\1\146\5\5\1\0\7\5\2\0\2\5\6\0\1\147"+
    "\6\0\5\5\1\150\14\5\1\0\7\5\2\0\2\5"+
    "\15\0\4\5\1\151\15\5\1\0\7\5\2\0\2\5"+
    "\15\0\4\5\1\152\15\5\1\0\7\5\2\0\2\5"+
    "\15\0\10\5\1\153\11\5\1\0\7\5\2\0\2\5"+
    "\15\0\16\5\1\154\3\5\1\0\3\5\1\155\3\5"+
    "\2\0\2\5\15\0\11\5\1\156\10\5\1\0\7\5"+
    "\2\0\2\5\15\0\21\5\1\157\1\0\7\5\2\0"+
    "\2\5\15\0\2\5\1\160\17\5\1\0\7\5\2\0"+
    "\2\5\15\0\4\5\1\161\15\5\1\0\7\5\2\0"+
    "\2\5\15\0\4\5\1\162\15\5\1\0\7\5\2\0"+
    "\2\5\15\0\13\5\1\163\6\5\1\0\7\5\2\0"+
    "\2\5\15\0\12\5\1\164\7\5\1\0\7\5\2\0"+
    "\2\5\15\0\5\5\1\165\14\5\1\0\7\5\2\0"+
    "\2\5\15\0\7\5\1\166\12\5\1\0\7\5\2\0"+
    "\2\5\15\0\22\5\1\0\6\5\1\167\2\0\2\5"+
    "\15\0\11\5\1\170\10\5\1\0\7\5\2\0\2\5"+
    "\6\0\1\171\6\0\22\5\1\0\7\5\2\0\2\5"+
    "\15\0\5\5\1\172\14\5\1\0\7\5\2\0\2\5"+
    "\15\0\12\5\1\173\7\5\1\0\7\5\2\0\2\5"+
    "\15\0\2\5\1\174\17\5\1\0\7\5\2\0\2\5"+
    "\15\0\1\5\1\175\20\5\1\0\7\5\2\0\2\5"+
    "\6\0\1\176\6\0\4\5\1\177\15\5\1\0\7\5"+
    "\2\0\2\5\15\0\5\5\1\200\14\5\1\0\7\5"+
    "\2\0\2\5\15\0\11\5\1\201\10\5\1\0\7\5"+
    "\2\0\2\5\15\0\10\5\1\202\11\5\1\0\7\5"+
    "\2\0\2\5\15\0\22\5\1\0\4\5\1\203\2\5"+
    "\2\0\2\5\15\0\10\5\1\204\11\5\1\0\7\5"+
    "\2\0\2\5\15\0\5\5\1\205\14\5\1\0\7\5"+
    "\2\0\2\5\6\0\1\206\6\0\22\5\1\0\7\5"+
    "\2\0\2\5\15\0\10\5\1\207\11\5\1\0\7\5"+
    "\2\0\2\5\6\0\1\210\6\0\22\5\1\0\7\5"+
    "\2\0\2\5\15\0\15\5\1\211\4\5\1\0\7\5"+
    "\2\0\2\5\15\0\2\5\1\212\17\5\1\0\7\5"+
    "\2\0\2\5\15\0\10\5\1\213\11\5\1\0\7\5"+
    "\2\0\2\5\15\0\14\5\1\214\5\5\1\0\7\5"+
    "\2\0\2\5\15\0\11\5\1\215\10\5\1\0\7\5"+
    "\2\0\2\5\15\0\13\5\1\216\6\5\1\0\7\5"+
    "\2\0\2\5\15\0\15\5\1\217\4\5\1\0\7\5"+
    "\2\0\2\5\15\0\5\5\1\220\14\5\1\0\7\5"+
    "\2\0\2\5\15\0\1\221\21\5\1\0\7\5\2\0"+
    "\2\5\15\0\1\5\1\222\20\5\1\0\7\5\2\0"+
    "\2\5\15\0\5\5\1\223\5\5\1\224\6\5\1\0"+
    "\3\5\1\225\1\5\1\226\1\5\2\0\2\5\15\0"+
    "\11\5\1\227\10\5\1\0\7\5\2\0\2\5\15\0"+
    "\6\5\1\230\13\5\1\0\7\5\2\0\2\5\15\0"+
    "\7\5\1\231\12\5\1\0\7\5\2\0\2\5\15\0"+
    "\4\5\1\232\15\5\1\0\7\5\2\0\2\5\6\0"+
    "\1\233\6\0\22\5\1\0\7\5\2\0\2\5\15\0"+
    "\1\5\1\234\20\5\1\0\7\5\2\0\2\5\6\0"+
    "\1\235\6\0\22\5\1\0\7\5\2\0\2\5\15\0"+
    "\22\5\1\0\2\5\1\236\4\5\2\0\2\5\15\0"+
    "\1\237\21\5\1\0\7\5\2\0\2\5\15\0\15\5"+
    "\1\240\4\5\1\0\7\5\2\0\2\5\15\0\15\5"+
    "\1\241\4\5\1\0\7\5\2\0\2\5\15\0\10\5"+
    "\1\242\11\5\1\0\7\5\2\0\2\5\15\0\1\5"+
    "\1\243\20\5\1\0\7\5\2\0\2\5\15\0\10\5"+
    "\1\244\11\5\1\0\7\5\2\0\2\5\6\0\1\245"+
    "\6\0\22\5\1\0\7\5\2\0\2\5\15\0\2\5"+
    "\1\246\17\5\1\0\7\5\2\0\2\5\6\0\1\247"+
    "\6\0\22\5\1\0\7\5\2\0\2\5\6\0\1\250"+
    "\6\0\22\5\1\0\7\5\2\0\2\5\15\0\4\5"+
    "\1\251\15\5\1\0\7\5\2\0\2\5\15\0\10\5"+
    "\1\252\11\5\1\0\7\5\2\0\2\5\6\0\1\253"+
    "\6\0\22\5\1\0\7\5\2\0\2\5\6\0\1\254"+
    "\6\0\22\5\1\0\7\5\2\0\2\5\15\0\22\5"+
    "\1\0\5\5\1\255\1\5\2\0\2\5\15\0\4\5"+
    "\1\256\15\5\1\0\7\5\2\0\2\5\15\0\4\5"+
    "\1\257\15\5\1\0\7\5\2\0\2\5\15\0\17\5"+
    "\1\260\2\5\1\0\7\5\2\0\2\5\15\0\10\5"+
    "\1\261\11\5\1\0\7\5\2\0\2\5\6\0\1\262"+
    "\6\0\22\5\1\0\7\5\2\0\2\5\15\0\10\5"+
    "\1\263\11\5\1\0\7\5\2\0\2\5\6\0\1\264"+
    "\6\0\22\5\1\0\7\5\2\0\2\5\6\0\1\265"+
    "\6\0\22\5\1\0\7\5\2\0\2\5\15\0\15\5"+
    "\1\266\4\5\1\0\7\5\2\0\2\5\6\0\1\267"+
    "\6\0\22\5\1\0\7\5\2\0\2\5\15\0\17\5"+
    "\1\270\2\5\1\0\7\5\2\0\2\5\6\0\1\271"+
    "\6\0\22\5\1\0\7\5\2\0\2\5\6\0\1\272"+
    "\6\0\22\5\1\0\7\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6063];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\5\1\7\11\16\1\1\11\2\1\1\11"+
    "\1\1\1\0\24\1\1\0\1\1\1\0\30\1\1\11"+
    "\1\1\1\11\5\1\1\11\2\1\1\11\4\1\1\11"+
    "\2\1\1\11\21\1\1\11\4\1\1\11\7\1\1\11"+
    "\1\1\1\11\22\1\1\11\1\1\1\11\7\1\1\11"+
    "\1\1\2\11\2\1\2\11\5\1\1\11\1\1\2\11"+
    "\1\1\1\11\1\1\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FormulaEngineLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 52: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 53: break;
          case 3: 
            { return FormulaEngineElementTypes.IDENTIFIER;
            } 
            // fall through
          case 54: break;
          case 4: 
            { return FormulaEngineElementTypes.NUMBER_INTEGER;
            } 
            // fall through
          case 55: break;
          case 5: 
            { return FormulaEngineElementTypes.SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 56: break;
          case 6: 
            { return FormulaEngineElementTypes.DOUBLE_QUOTED_STRING;
            } 
            // fall through
          case 57: break;
          case 7: 
            { return FormulaEngineElementTypes.LEFT_PARENTHESIS;
            } 
            // fall through
          case 58: break;
          case 8: 
            { return FormulaEngineElementTypes.RIGHT_PARENTHESIS;
            } 
            // fall through
          case 59: break;
          case 9: 
            { return FormulaEngineElementTypes.LEFT_CURLY_BRACE;
            } 
            // fall through
          case 60: break;
          case 10: 
            { return FormulaEngineElementTypes.RIGHT_CURLY_BRACE;
            } 
            // fall through
          case 61: break;
          case 11: 
            { return FormulaEngineElementTypes.LEFT_BRACKET;
            } 
            // fall through
          case 62: break;
          case 12: 
            { return FormulaEngineElementTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 63: break;
          case 13: 
            { return FormulaEngineElementTypes.OPERATOR_EQUALS;
            } 
            // fall through
          case 64: break;
          case 14: 
            { return FormulaEngineElementTypes.LINE_COMMENT;
            } 
            // fall through
          case 65: break;
          case 15: 
            { return FormulaEngineElementTypes.KEYWORD_IF;
            } 
            // fall through
          case 66: break;
          case 16: 
            { return FormulaEngineElementTypes.KEYWORD_FOR;
            } 
            // fall through
          case 67: break;
          case 17: 
            { return FormulaEngineElementTypes.ANY;
            } 
            // fall through
          case 68: break;
          case 18: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_NA;
            } 
            // fall through
          case 69: break;
          case 19: 
            { return FormulaEngineElementTypes.BLOCK_COMMENT;
            } 
            // fall through
          case 70: break;
          case 20: 
            { yypushback(1); return FormulaEngineElementTypes.OUT;
            } 
            // fall through
          case 71: break;
          case 21: 
            { yypushback(1); return FormulaEngineElementTypes.ELT;
            } 
            // fall through
          case 72: break;
          case 22: 
            { return FormulaEngineElementTypes.KEYWORD_ELSE;
            } 
            // fall through
          case 73: break;
          case 23: 
            { return FormulaEngineElementTypes.LIST;
            } 
            // fall through
          case 74: break;
          case 24: 
            { yypushback(1); return FormulaEngineElementTypes.LEN;
            } 
            // fall through
          case 75: break;
          case 25: 
            { yypushback(1); return FormulaEngineElementTypes.STR;
            } 
            // fall through
          case 76: break;
          case 26: 
            { return FormulaEngineElementTypes.DICT;
            } 
            // fall through
          case 77: break;
          case 27: 
            { return FormulaEngineElementTypes.FLOAT;
            } 
            // fall through
          case 78: break;
          case 28: 
            { return FormulaEngineElementTypes.LOCAL;
            } 
            // fall through
          case 79: break;
          case 29: 
            { yypushback(1); return FormulaEngineElementTypes.LOAD;
            } 
            // fall through
          case 80: break;
          case 30: 
            { yypushback(1); return FormulaEngineElementTypes.DATE;
            } 
            // fall through
          case 81: break;
          case 31: 
            { return FormulaEngineElementTypes.KEYWORD_WHILE;
            } 
            // fall through
          case 82: break;
          case 32: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_FLOAT;
            } 
            // fall through
          case 83: break;
          case 33: 
            { yypushback(1); return FormulaEngineElementTypes.IS_NA;
            } 
            // fall through
          case 84: break;
          case 34: 
            { return FormulaEngineElementTypes.RETURN;
            } 
            // fall through
          case 85: break;
          case 35: 
            { return FormulaEngineElementTypes.GLOBAL;
            } 
            // fall through
          case 86: break;
          case 36: 
            { return FormulaEngineElementTypes.STRING;
            } 
            // fall through
          case 87: break;
          case 37: 
            { return FormulaEngineElementTypes.INTEGER;
            } 
            // fall through
          case 88: break;
          case 38: 
            { yypushback(1); return FormulaEngineElementTypes.REMOVE;
            } 
            // fall through
          case 89: break;
          case 39: 
            { yypushback(1); return FormulaEngineElementTypes.STATUS;
            } 
            // fall through
          case 90: break;
          case 40: 
            { yypushback(1); return FormulaEngineElementTypes.KERNEL;
            } 
            // fall through
          case 91: break;
          case 41: 
            { return FormulaEngineElementTypes.FUNCTION;
            } 
            // fall through
          case 92: break;
          case 42: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_INTEGER;
            } 
            // fall through
          case 93: break;
          case 43: 
            { yypushback(1); return FormulaEngineElementTypes.IS_LIST;
            } 
            // fall through
          case 94: break;
          case 44: 
            { yypushback(1); return FormulaEngineElementTypes.DAYDIFF;
            } 
            // fall through
          case 95: break;
          case 45: 
            { yypushback(1); return FormulaEngineElementTypes.DAYPLUS;
            } 
            // fall through
          case 96: break;
          case 46: 
            { yypushback(1); return FormulaEngineElementTypes.DATETIME;
            } 
            // fall through
          case 97: break;
          case 47: 
            { yypushback(1); return FormulaEngineElementTypes.HASH_GET;
            } 
            // fall through
          case 98: break;
          case 48: 
            { yypushback(1); return FormulaEngineElementTypes.HASH_PUT;
            } 
            // fall through
          case 99: break;
          case 49: 
            { yypushback(1); return FormulaEngineElementTypes.ATTRIBUTE;
            } 
            // fall through
          case 100: break;
          case 50: 
            { yypushback(1); return FormulaEngineElementTypes.HASH_KEYS;
            } 
            // fall through
          case 101: break;
          case 51: 
            { yypushback(1); return FormulaEngineElementTypes.HASH_ISKEY;
            } 
            // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
