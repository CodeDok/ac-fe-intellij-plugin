/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package de.cofinpro.intellij.acfeplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import de.cofinpro.intellij.acfeplugin.psi.FormulaEngineElementType;
import de.cofinpro.intellij.acfeplugin.psi.FormulaEngineElementTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>FormulaEngine.flex</tt>
 */
public class FormulaEngineLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\6\1\0\1\1\1\6\22\0\1\1\1\25\1\7\1\0\1\52\1\24\1\20\1\4\1\12\1"+
    "\13\1\11\1\22\1\66\1\70\1\0\1\10\12\3\1\0\1\67\1\23\1\21\3\0\1\54\2\2\1\57"+
    "\11\2\1\53\1\56\4\2\1\55\4\2\1\60\1\2\1\16\1\5\1\17\1\0\1\63\1\0\1\32\1\34"+
    "\1\31\1\44\1\41\1\35\1\33\1\51\1\37\1\2\1\64\1\27\1\61\1\40\1\30\1\62\1\47"+
    "\1\42\1\43\1\36\1\46\1\65\1\50\1\2\1\45\1\2\1\14\1\26\1\15\202\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\1\1\15"+
    "\1\16\1\17\1\20\1\21\1\1\14\3\1\1\1\3"+
    "\1\22\1\23\1\24\2\5\2\6\1\25\1\0\1\26"+
    "\1\27\1\30\1\31\1\32\13\3\1\33\12\3\2\0"+
    "\1\3\1\0\6\3\1\34\2\3\1\35\12\3\1\36"+
    "\5\3\1\37\1\0\1\3\1\40\2\3\1\41\1\42"+
    "\1\43\11\3\1\44\1\45\3\3\1\46\4\3\1\47"+
    "\2\3\1\0\1\3\1\50\1\51\2\3\1\52\12\3"+
    "\1\53\3\3\1\54\1\3\1\0\2\3\1\55\1\56"+
    "\1\57\3\3\1\60\1\3\1\61\2\3\1\62\12\3"+
    "\1\63\2\3\1\64\1\65\7\3\1\66\1\3\1\67"+
    "\1\70\1\71\2\3\1\72\1\73\6\3\1\74\1\75"+
    "\1\3\1\76\1\3\1\77\1\100\1\3\1\101\1\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\162\0\253\0\344\0\u011d\0\u0156"+
    "\0\u018f\0\162\0\162\0\162\0\162\0\162\0\162\0\u01c8"+
    "\0\u0201\0\u023a\0\162\0\162\0\u0273\0\u02ac\0\u02e5\0\u031e"+
    "\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6"+
    "\0\u051f\0\u0558\0\u0591\0\u05ca\0\162\0\162\0\162\0\162"+
    "\0\u0603\0\u063c\0\162\0\u0675\0\u06ae\0\162\0\162\0\162"+
    "\0\162\0\162\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804"+
    "\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\253\0\u095a\0\u0993"+
    "\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b"+
    "\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23"+
    "\0\u0d5c\0\u0d95\0\253\0\u0dce\0\u0e07\0\253\0\u0e40\0\u0e79"+
    "\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041"+
    "\0\253\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\162\0\u1197"+
    "\0\u11d0\0\162\0\u1209\0\u1242\0\253\0\162\0\162\0\u127b"+
    "\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443"+
    "\0\162\0\253\0\u147c\0\u14b5\0\u14ee\0\162\0\u1527\0\u1560"+
    "\0\u1599\0\u15d2\0\253\0\u160b\0\u1644\0\u167d\0\u16b6\0\253"+
    "\0\162\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845"+
    "\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\162\0\u19d4"+
    "\0\u1a0d\0\u1a46\0\253\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\253"+
    "\0\162\0\162\0\u1b63\0\u1b9c\0\u1bd5\0\162\0\u1c0e\0\253"+
    "\0\u1c47\0\u1c80\0\253\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d"+
    "\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65"+
    "\0\162\0\162\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb"+
    "\0\u20f4\0\162\0\u212d\0\253\0\162\0\162\0\u2166\0\u219f"+
    "\0\162\0\162\0\u21d8\0\u2211\0\u224a\0\u2283\0\u22bc\0\u22f5"+
    "\0\162\0\162\0\u232e\0\162\0\u2367\0\162\0\162\0\u23a0"+
    "\0\162\0\162";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\3\1\4\1\10"+
    "\1\11\1\3\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\5\1\31\1\32\1\5\1\33\1\5\1\34"+
    "\1\5\1\35\1\36\1\37\1\40\3\5\1\41\1\42"+
    "\1\43\11\5\1\44\1\5\1\45\1\46\1\47\71\3"+
    "\73\0\2\5\23\0\23\5\1\0\13\5\6\0\1\6"+
    "\65\0\4\7\1\50\1\51\1\0\62\7\5\10\1\52"+
    "\1\0\1\53\61\10\10\0\1\54\1\55\77\0\1\56"+
    "\71\0\1\57\71\0\1\60\67\0\1\61\75\0\1\62"+
    "\44\0\2\5\23\0\1\5\1\63\6\5\1\64\1\5"+
    "\1\65\10\5\1\0\13\5\5\0\2\5\23\0\17\5"+
    "\1\66\3\5\1\0\13\5\5\0\2\5\23\0\7\5"+
    "\1\67\1\5\1\70\11\5\1\0\13\5\5\0\2\5"+
    "\23\0\1\71\22\5\1\0\13\5\5\0\2\5\23\0"+
    "\1\72\1\73\6\5\1\74\6\5\1\75\3\5\1\0"+
    "\13\5\5\0\2\5\23\0\6\5\1\76\2\5\1\77"+
    "\2\5\1\100\6\5\1\0\13\5\5\0\2\5\23\0"+
    "\1\101\22\5\1\0\13\5\5\0\2\5\23\0\12\5"+
    "\1\102\10\5\1\0\13\5\5\0\2\5\23\0\7\5"+
    "\1\103\2\5\1\104\10\5\1\0\13\5\5\0\2\5"+
    "\23\0\3\5\1\105\4\5\1\106\12\5\1\0\13\5"+
    "\5\0\2\5\23\0\22\5\1\107\1\0\13\5\5\0"+
    "\2\5\23\0\3\5\1\110\17\5\1\0\13\5\56\0"+
    "\1\111\1\0\1\112\15\0\2\5\23\0\12\5\1\113"+
    "\10\5\1\0\13\5\3\0\71\7\71\10\6\54\1\0"+
    "\62\54\11\55\1\114\57\55\2\0\2\5\23\0\2\5"+
    "\1\115\1\116\17\5\1\0\13\5\5\0\2\5\23\0"+
    "\14\5\1\117\6\5\1\0\13\5\5\0\2\5\23\0"+
    "\11\5\1\120\11\5\1\0\13\5\5\0\2\5\23\0"+
    "\7\5\1\121\13\5\1\0\13\5\5\0\2\5\23\0"+
    "\7\5\1\122\13\5\1\0\13\5\5\0\2\5\23\0"+
    "\16\5\1\123\4\5\1\0\13\5\5\0\2\5\23\0"+
    "\1\5\1\124\21\5\1\0\13\5\5\0\2\5\23\0"+
    "\1\5\1\125\21\5\1\0\13\5\5\0\2\5\23\0"+
    "\13\5\1\126\7\5\1\0\13\5\5\0\2\5\23\0"+
    "\13\5\1\127\7\5\1\0\13\5\5\0\2\5\23\0"+
    "\11\5\1\130\11\5\1\0\13\5\5\0\2\5\23\0"+
    "\7\5\1\131\13\5\1\0\13\5\5\0\2\5\23\0"+
    "\23\5\1\0\10\5\1\132\2\5\5\0\2\5\23\0"+
    "\7\5\1\133\4\5\1\134\6\5\1\0\13\5\5\0"+
    "\2\5\23\0\7\5\1\135\13\5\1\0\6\5\1\136"+
    "\4\5\5\0\2\5\23\0\3\5\1\137\7\5\1\140"+
    "\7\5\1\0\13\5\5\0\2\5\23\0\20\5\1\141"+
    "\2\5\1\0\13\5\5\0\2\5\23\0\7\5\1\142"+
    "\6\5\1\143\4\5\1\0\13\5\5\0\2\5\23\0"+
    "\2\5\1\144\20\5\1\0\13\5\5\0\2\5\23\0"+
    "\10\5\1\145\12\5\1\0\13\5\5\0\2\5\23\0"+
    "\14\5\1\146\6\5\1\0\13\5\57\0\1\147\72\0"+
    "\1\150\14\0\2\5\23\0\13\5\1\151\7\5\1\0"+
    "\13\5\3\0\10\55\1\152\1\114\57\55\2\0\2\5"+
    "\23\0\3\5\1\153\17\5\1\0\13\5\5\0\2\5"+
    "\23\0\15\5\1\154\5\5\1\0\13\5\5\0\2\5"+
    "\23\0\7\5\1\155\13\5\1\0\13\5\5\0\2\5"+
    "\6\0\1\156\14\0\23\5\1\0\13\5\5\0\2\5"+
    "\6\0\1\157\14\0\23\5\1\0\13\5\5\0\2\5"+
    "\23\0\13\5\1\160\7\5\1\0\13\5\5\0\2\5"+
    "\23\0\5\5\1\161\15\5\1\0\13\5\5\0\2\5"+
    "\23\0\3\5\1\162\17\5\1\0\13\5\5\0\2\5"+
    "\23\0\14\5\1\163\6\5\1\0\13\5\5\0\2\5"+
    "\23\0\2\5\1\164\20\5\1\0\13\5\5\0\2\5"+
    "\23\0\12\5\1\165\10\5\1\0\13\5\5\0\2\5"+
    "\23\0\1\166\10\5\1\167\2\5\1\170\6\5\1\0"+
    "\13\5\5\0\2\5\6\0\1\171\14\0\23\5\1\0"+
    "\13\5\5\0\2\5\23\0\12\5\1\172\10\5\1\0"+
    "\13\5\5\0\2\5\23\0\17\5\1\173\3\5\1\0"+
    "\13\5\5\0\2\5\23\0\1\5\1\174\21\5\1\0"+
    "\13\5\5\0\2\5\23\0\7\5\1\175\13\5\1\0"+
    "\13\5\5\0\2\5\6\0\1\176\14\0\10\5\1\177"+
    "\12\5\1\0\13\5\5\0\2\5\23\0\12\5\1\200"+
    "\10\5\1\0\13\5\5\0\2\5\23\0\15\5\1\201"+
    "\5\5\1\0\7\5\1\202\3\5\5\0\2\5\23\0"+
    "\7\5\1\203\13\5\1\0\13\5\5\0\2\5\23\0"+
    "\1\204\22\5\1\0\13\5\5\0\2\5\23\0\22\5"+
    "\1\205\1\0\13\5\62\0\1\206\13\0\2\5\23\0"+
    "\11\5\1\207\11\5\1\0\13\5\5\0\2\5\23\0"+
    "\1\210\22\5\1\0\13\5\5\0\2\5\6\0\1\211"+
    "\14\0\23\5\1\0\13\5\5\0\2\5\23\0\10\5"+
    "\1\212\12\5\1\0\13\5\5\0\2\5\23\0\3\5"+
    "\1\213\17\5\1\0\13\5\5\0\2\5\23\0\7\5"+
    "\1\214\13\5\1\0\13\5\5\0\2\5\23\0\7\5"+
    "\1\215\13\5\1\0\13\5\5\0\2\5\23\0\7\5"+
    "\1\216\13\5\1\0\13\5\5\0\2\5\23\0\4\5"+
    "\1\217\16\5\1\0\13\5\5\0\2\5\23\0\10\5"+
    "\1\220\12\5\1\0\13\5\5\0\2\5\23\0\3\5"+
    "\1\221\17\5\1\0\13\5\5\0\2\5\23\0\7\5"+
    "\1\222\13\5\1\0\13\5\5\0\2\5\23\0\13\5"+
    "\1\223\7\5\1\0\13\5\5\0\2\5\23\0\23\5"+
    "\1\0\12\5\1\224\5\0\2\5\23\0\17\5\1\225"+
    "\3\5\1\0\13\5\5\0\2\5\23\0\11\5\1\226"+
    "\11\5\1\0\13\5\5\0\2\5\6\0\1\227\14\0"+
    "\7\5\1\230\13\5\1\0\13\5\5\0\2\5\23\0"+
    "\10\5\1\231\12\5\1\0\13\5\5\0\2\5\23\0"+
    "\1\232\22\5\1\0\13\5\5\0\2\5\23\0\12\5"+
    "\1\233\10\5\1\0\13\5\5\0\2\5\23\0\23\5"+
    "\1\0\10\5\1\234\2\5\57\0\1\235\16\0\2\5"+
    "\23\0\12\5\1\236\10\5\1\0\13\5\5\0\2\5"+
    "\23\0\5\5\1\237\15\5\1\0\13\5\5\0\2\5"+
    "\23\0\1\240\22\5\1\0\13\5\5\0\2\5\6\0"+
    "\1\241\14\0\23\5\1\0\13\5\5\0\2\5\6\0"+
    "\1\242\14\0\23\5\1\0\13\5\5\0\2\5\23\0"+
    "\10\5\1\243\12\5\1\0\13\5\5\0\2\5\23\0"+
    "\12\5\1\244\10\5\1\0\13\5\5\0\2\5\23\0"+
    "\14\5\1\245\6\5\1\0\13\5\5\0\2\5\6\0"+
    "\1\246\14\0\23\5\1\0\13\5\5\0\2\5\23\0"+
    "\13\5\1\247\7\5\1\0\13\5\5\0\2\5\23\0"+
    "\11\5\1\250\11\5\1\0\13\5\5\0\2\5\23\0"+
    "\12\5\1\251\10\5\1\0\13\5\5\0\2\5\23\0"+
    "\14\5\1\252\6\5\1\0\13\5\5\0\2\5\23\0"+
    "\4\5\1\253\16\5\1\0\13\5\5\0\2\5\23\0"+
    "\10\5\1\254\12\5\1\0\13\5\5\0\2\5\23\0"+
    "\6\5\1\255\14\5\1\0\13\5\5\0\2\5\23\0"+
    "\17\5\1\256\3\5\1\0\13\5\5\0\2\5\23\0"+
    "\4\5\1\257\3\5\1\260\12\5\1\0\7\5\1\261"+
    "\1\5\1\262\1\5\63\0\1\147\12\0\2\5\23\0"+
    "\1\263\22\5\1\0\13\5\5\0\2\5\23\0\17\5"+
    "\1\264\3\5\1\0\13\5\5\0\2\5\23\0\1\5"+
    "\1\265\21\5\1\0\13\5\5\0\2\5\23\0\13\5"+
    "\1\266\7\5\1\0\13\5\5\0\2\5\23\0\7\5"+
    "\1\267\13\5\1\0\13\5\5\0\2\5\23\0\10\5"+
    "\1\270\12\5\1\0\13\5\5\0\2\5\6\0\1\271"+
    "\14\0\23\5\1\0\13\5\5\0\2\5\6\0\1\272"+
    "\14\0\23\5\1\0\13\5\5\0\2\5\23\0\23\5"+
    "\1\0\6\5\1\273\4\5\5\0\2\5\23\0\6\5"+
    "\1\274\14\5\1\0\13\5\5\0\2\5\23\0\14\5"+
    "\1\275\6\5\1\0\13\5\5\0\2\5\23\0\12\5"+
    "\1\276\10\5\1\0\13\5\5\0\2\5\23\0\14\5"+
    "\1\277\6\5\1\0\13\5\5\0\2\5\23\0\17\5"+
    "\1\300\3\5\1\0\13\5\5\0\2\5\23\0\12\5"+
    "\1\301\10\5\1\0\13\5\5\0\2\5\6\0\1\302"+
    "\14\0\23\5\1\0\13\5\5\0\2\5\23\0\7\5"+
    "\1\303\13\5\1\0\13\5\5\0\2\5\23\0\11\5"+
    "\1\304\11\5\1\0\13\5\5\0\2\5\6\0\1\305"+
    "\14\0\23\5\1\0\13\5\5\0\2\5\6\0\1\306"+
    "\14\0\23\5\1\0\13\5\5\0\2\5\23\0\11\5"+
    "\1\307\11\5\1\0\13\5\5\0\2\5\23\0\12\5"+
    "\1\310\10\5\1\0\13\5\5\0\2\5\6\0\1\311"+
    "\14\0\23\5\1\0\13\5\5\0\2\5\6\0\1\312"+
    "\14\0\23\5\1\0\13\5\5\0\2\5\23\0\7\5"+
    "\1\313\13\5\1\0\13\5\5\0\2\5\23\0\23\5"+
    "\1\0\11\5\1\314\1\5\5\0\2\5\23\0\7\5"+
    "\1\315\13\5\1\0\13\5\5\0\2\5\23\0\16\5"+
    "\1\316\4\5\1\0\13\5\5\0\2\5\23\0\12\5"+
    "\1\317\10\5\1\0\13\5\5\0\2\5\23\0\4\5"+
    "\1\320\16\5\1\0\13\5\5\0\2\5\6\0\1\321"+
    "\14\0\23\5\1\0\13\5\5\0\2\5\6\0\1\322"+
    "\14\0\23\5\1\0\13\5\5\0\2\5\23\0\12\5"+
    "\1\323\10\5\1\0\13\5\5\0\2\5\6\0\1\324"+
    "\14\0\23\5\1\0\13\5\5\0\2\5\23\0\14\5"+
    "\1\325\6\5\1\0\13\5\5\0\2\5\6\0\1\326"+
    "\14\0\23\5\1\0\13\5\5\0\2\5\6\0\1\327"+
    "\14\0\23\5\1\0\13\5\5\0\2\5\23\0\16\5"+
    "\1\330\4\5\1\0\13\5\5\0\2\5\6\0\1\331"+
    "\14\0\23\5\1\0\13\5\5\0\2\5\6\0\1\332"+
    "\14\0\23\5\1\0\13\5\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9177];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\5\1\6\11\3\1\2\11\20\1\4\11"+
    "\2\1\1\11\1\1\1\0\5\11\26\1\2\0\1\1"+
    "\1\0\32\1\1\11\1\0\1\1\1\11\3\1\2\11"+
    "\11\1\1\11\4\1\1\11\7\1\1\0\2\1\1\11"+
    "\15\1\1\11\5\1\1\0\3\1\2\11\3\1\1\11"+
    "\22\1\2\11\7\1\1\11\2\1\2\11\2\1\2\11"+
    "\6\1\2\11\1\1\1\11\1\1\2\11\1\1\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FormulaEngineLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 67: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 68: break;
          case 3: 
            { return FormulaEngineElementTypes.IDENTIFIER;
            } 
            // fall through
          case 69: break;
          case 4: 
            { return FormulaEngineElementTypes.NUMBER_INTEGER;
            } 
            // fall through
          case 70: break;
          case 5: 
            { return FormulaEngineElementTypes.SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 71: break;
          case 6: 
            { return FormulaEngineElementTypes.DOUBLE_QUOTED_STRING;
            } 
            // fall through
          case 72: break;
          case 7: 
            { return FormulaEngineElementTypes.LEFT_PARENTHESIS;
            } 
            // fall through
          case 73: break;
          case 8: 
            { return FormulaEngineElementTypes.RIGHT_PARENTHESIS;
            } 
            // fall through
          case 74: break;
          case 9: 
            { return FormulaEngineElementTypes.LEFT_CURLY_BRACE;
            } 
            // fall through
          case 75: break;
          case 10: 
            { return FormulaEngineElementTypes.RIGHT_CURLY_BRACE;
            } 
            // fall through
          case 76: break;
          case 11: 
            { return FormulaEngineElementTypes.LEFT_BRACKET;
            } 
            // fall through
          case 77: break;
          case 12: 
            { return FormulaEngineElementTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 78: break;
          case 13: 
            { return FormulaEngineElementTypes.OPERATOR_ASSIGNMENT;
            } 
            // fall through
          case 79: break;
          case 14: 
            { return FormulaEngineElementTypes.OPERATOR_PLUS;
            } 
            // fall through
          case 80: break;
          case 15: 
            { return FormulaEngineElementTypes.OPERATOR_LESSTHAN;
            } 
            // fall through
          case 81: break;
          case 16: 
            { return FormulaEngineElementTypes.OPERATOR_MODULO;
            } 
            // fall through
          case 82: break;
          case 17: 
            { return FormulaEngineElementTypes.OPERATOR_NEGATION;
            } 
            // fall through
          case 83: break;
          case 18: 
            { return FormulaEngineElementTypes.COMMA;
            } 
            // fall through
          case 84: break;
          case 19: 
            { return FormulaEngineElementTypes.SEMICOLON;
            } 
            // fall through
          case 85: break;
          case 20: 
            { return FormulaEngineElementTypes.MINUS;
            } 
            // fall through
          case 86: break;
          case 21: 
            { return FormulaEngineElementTypes.LINE_COMMENT;
            } 
            // fall through
          case 87: break;
          case 22: 
            { return FormulaEngineElementTypes.OPERATOR_AND;
            } 
            // fall through
          case 88: break;
          case 23: 
            { return FormulaEngineElementTypes.OPERATOR_EQUAL;
            } 
            // fall through
          case 89: break;
          case 24: 
            { return FormulaEngineElementTypes.OPERATOR_INCREMENT;
            } 
            // fall through
          case 90: break;
          case 25: 
            { return FormulaEngineElementTypes.OPERATOR_NOTEQUAL;
            } 
            // fall through
          case 91: break;
          case 26: 
            { return FormulaEngineElementTypes.OPERATOR_OR;
            } 
            // fall through
          case 92: break;
          case 27: 
            { return FormulaEngineElementTypes.KEYWORD_IF;
            } 
            // fall through
          case 93: break;
          case 28: 
            { return FormulaEngineElementTypes.TYPE_ANY;
            } 
            // fall through
          case 94: break;
          case 29: 
            { return FormulaEngineElementTypes.KEYWORD_FOR;
            } 
            // fall through
          case 95: break;
          case 30: 
            { return FormulaEngineElementTypes.KEYWORD_SEQ;
            } 
            // fall through
          case 96: break;
          case 31: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_NA;
            } 
            // fall through
          case 97: break;
          case 32: 
            { return FormulaEngineElementTypes.BLOCK_COMMENT;
            } 
            // fall through
          case 98: break;
          case 33: 
            { return FormulaEngineElementTypes.TYPE_LIST;
            } 
            // fall through
          case 99: break;
          case 34: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_LEN;
            } 
            // fall through
          case 100: break;
          case 35: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_OUT;
            } 
            // fall through
          case 101: break;
          case 36: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_ELT;
            } 
            // fall through
          case 102: break;
          case 37: 
            { return FormulaEngineElementTypes.KEYWORD_ELSE;
            } 
            // fall through
          case 103: break;
          case 38: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_STR;
            } 
            // fall through
          case 104: break;
          case 39: 
            { return FormulaEngineElementTypes.TYPE_DICT;
            } 
            // fall through
          case 105: break;
          case 40: 
            { return FormulaEngineElementTypes.VISIBILITY_LOCAL;
            } 
            // fall through
          case 106: break;
          case 41: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_LOAD;
            } 
            // fall through
          case 107: break;
          case 42: 
            { return FormulaEngineElementTypes.TYPE_FLOAT;
            } 
            // fall through
          case 108: break;
          case 43: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DATE;
            } 
            // fall through
          case 109: break;
          case 44: 
            { return FormulaEngineElementTypes.KEYWORD_WHILE;
            } 
            // fall through
          case 110: break;
          case 45: 
            { return FormulaEngineElementTypes.VISIBILITY_GLOBAL;
            } 
            // fall through
          case 111: break;
          case 46: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_FLOAT;
            } 
            // fall through
          case 112: break;
          case 47: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_FIRST;
            } 
            // fall through
          case 113: break;
          case 48: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_NA;
            } 
            // fall through
          case 114: break;
          case 49: 
            { return FormulaEngineElementTypes.KEYWORD_RETURN;
            } 
            // fall through
          case 115: break;
          case 50: 
            { return FormulaEngineElementTypes.TYPE_STRING;
            } 
            // fall through
          case 116: break;
          case 51: 
            { return FormulaEngineElementTypes.TYPE_INTEGER;
            } 
            // fall through
          case 117: break;
          case 52: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_REMOVE;
            } 
            // fall through
          case 118: break;
          case 53: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_STATUS;
            } 
            // fall through
          case 119: break;
          case 54: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_KERNEL;
            } 
            // fall through
          case 120: break;
          case 55: 
            { return FormulaEngineElementTypes.KEYWORD_FUNCTION;
            } 
            // fall through
          case 121: break;
          case 56: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_INTEGER;
            } 
            // fall through
          case 122: break;
          case 57: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_LIST;
            } 
            // fall through
          case 123: break;
          case 58: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DAYDIFF;
            } 
            // fall through
          case 124: break;
          case 59: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DAYPLUS;
            } 
            // fall through
          case 125: break;
          case 60: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DATETIME;
            } 
            // fall through
          case 126: break;
          case 61: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_GET;
            } 
            // fall through
          case 127: break;
          case 62: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_PUT;
            } 
            // fall through
          case 128: break;
          case 63: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_ATTRIBUTE;
            } 
            // fall through
          case 129: break;
          case 64: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_STRING;
            } 
            // fall through
          case 130: break;
          case 65: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_KEYS;
            } 
            // fall through
          case 131: break;
          case 66: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_ISKEY;
            } 
            // fall through
          case 132: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
