/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package de.cofinpro.intellij.acfeplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import de.cofinpro.intellij.acfeplugin.lex.FormulaEngineLexerStateTracker;
import de.cofinpro.intellij.acfeplugin.lex.IFormulaEngineLexer;
import de.cofinpro.intellij.acfeplugin.psi.FormulaEngineElementType;
import de.cofinpro.intellij.acfeplugin.psi.FormulaEngineElementTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>FormulaEngine.flex</tt>
 */
public class FormulaEngineLexer implements IFormulaEngineLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_PARENTHESIS = 2;
  public static final int IN_FUNCTION_HEADER = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\6\1\0\1\1\1\6\22\0\1\1\1\56\1\7\1\0\1\63\1\55\1\47\1\4\1\41\1"+
    "\42\1\11\1\53\1\72\1\51\1\12\1\10\12\3\1\74\1\73\1\54\1\50\1\52\1\75\1\0\1"+
    "\65\2\2\1\70\11\2\1\64\1\67\4\2\1\66\4\2\1\71\1\2\1\45\1\5\1\46\1\0\1\35\1"+
    "\0\1\13\1\17\1\60\1\22\1\21\1\25\1\33\1\34\1\16\1\2\1\36\1\27\1\23\1\32\1"+
    "\31\1\26\1\61\1\15\1\30\1\14\1\20\1\40\1\62\1\37\1\24\1\2\1\43\1\57\1\44\202"+
    "\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\16\3\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\1\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\1\2\3\1\1\1\26\1\27\1\30\1\31\14\3"+
    "\1\32\1\33\1\34\1\35\2\5\2\6\1\36\1\0"+
    "\3\3\1\37\7\3\1\40\13\3\1\41\4\3\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\2\3\2\0\20\3\1\0\1\3\1\54\1\55"+
    "\20\3\1\56\6\3\1\57\7\3\1\60\1\0\4\3"+
    "\1\61\2\3\1\62\1\63\3\3\1\64\2\3\1\65"+
    "\1\66\2\3\1\67\10\3\1\70\1\71\1\72\2\3"+
    "\1\73\1\3\1\74\1\75\3\3\1\76\1\77\4\3"+
    "\1\100\1\3\1\101\3\3\1\102\1\3\1\0\6\3"+
    "\1\103\4\3\1\104\1\105\13\3\1\106\1\3\1\107"+
    "\5\3\1\110\1\111\1\112\1\113\6\3\1\114\1\0"+
    "\4\3\1\115\4\3\1\116\1\117\5\3\1\120\3\3"+
    "\1\121\5\3\1\122\1\3\1\123\1\3\1\124\1\125"+
    "\1\126\6\3\1\127\6\3\1\130\1\131\4\3\1\132"+
    "\1\3\1\133\2\3\1\134\3\3\1\135\1\3\1\136"+
    "\1\137\4\3\1\140\1\3\1\141\1\3\1\142\1\3"+
    "\1\143\1\144\5\3\1\145\1\3\1\146\1\147\1\150"+
    "\1\151\1\152\6\3\1\153\1\3\1\154\1\155\3\3"+
    "\1\156\1\3\1\157\1\160\1\3\1\161\1\162\1\3"+
    "\1\163\1\164\1\165\1\3\1\166\1\167\1\170";

  private static int [] zzUnpackAction() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\272\0\370\0\u0136\0\u0174"+
    "\0\u01b2\0\u01f0\0\272\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326"+
    "\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516"+
    "\0\u0554\0\272\0\272\0\272\0\272\0\272\0\272\0\u0592"+
    "\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\272\0\u0706\0\u0744"+
    "\0\u0782\0\u07c0\0\u07fe\0\272\0\272\0\272\0\272\0\u083c"+
    "\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c"+
    "\0\u0a6a\0\u0aa8\0\u0ae6\0\272\0\272\0\272\0\u0b24\0\272"+
    "\0\u0b62\0\u0ba0\0\272\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6"+
    "\0\370\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88"+
    "\0\370\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a"+
    "\0\u1078\0\u10b6\0\u10f4\0\u1132\0\370\0\u1170\0\u11ae\0\u11ec"+
    "\0\u122a\0\272\0\272\0\272\0\272\0\272\0\272\0\272"+
    "\0\272\0\272\0\272\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360"+
    "\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550"+
    "\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740"+
    "\0\u177e\0\370\0\370\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4"+
    "\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4"+
    "\0\u1ae2\0\u1b20\0\u1b5e\0\370\0\u1b9c\0\u1bda\0\u1c18\0\u1c56"+
    "\0\u1c94\0\u1cd2\0\370\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08"+
    "\0\u1e46\0\u1e84\0\272\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba"+
    "\0\u18f2\0\u1ff8\0\u2036\0\u1a66\0\u1aa4\0\u2074\0\u20b2\0\u20f0"+
    "\0\u1bda\0\u212e\0\u216c\0\u21aa\0\u1d4e\0\u21e8\0\u2226\0\272"+
    "\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416"+
    "\0\272\0\370\0\u2454\0\u2492\0\u24d0\0\370\0\u250e\0\272"+
    "\0\272\0\u254c\0\u258a\0\u25c8\0\u2606\0\272\0\u2644\0\u2682"+
    "\0\u26c0\0\u26fe\0\272\0\u273c\0\272\0\u277a\0\u27b8\0\u27f6"+
    "\0\370\0\u2834\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a\0\u29a8"+
    "\0\u29e6\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u2606\0\u2644"+
    "\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c"+
    "\0\u2d4a\0\u2d88\0\u2dc6\0\370\0\u2e04\0\272\0\u2e42\0\u2e80"+
    "\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78\0\272\0\272\0\370\0\u2fb6"+
    "\0\u2ff4\0\u3032\0\u3070\0\u30ae\0\u30ec\0\370\0\u312a\0\u3168"+
    "\0\u31a6\0\u31e4\0\u3222\0\u2d88\0\u3260\0\u329e\0\u32dc\0\u331a"+
    "\0\u2efc\0\u2f78\0\u3358\0\u3396\0\u33d4\0\u3412\0\u3450\0\370"+
    "\0\u348e\0\u34cc\0\u350a\0\272\0\u3548\0\u3586\0\u35c4\0\u3602"+
    "\0\u3640\0\272\0\u367e\0\272\0\u36bc\0\u36fa\0\370\0\370"+
    "\0\u3738\0\u3776\0\u37b4\0\u37f2\0\u3830\0\u386e\0\u348e\0\u38ac"+
    "\0\u38ea\0\u3928\0\u3966\0\u39a4\0\u39e2\0\u36bc\0\u36fa\0\u3a20"+
    "\0\u3a5e\0\u3a9c\0\u3ada\0\u3830\0\u3b18\0\272\0\u3b56\0\u3b94"+
    "\0\u3bd2\0\u3c10\0\u3c4e\0\u3c8c\0\370\0\u3cca\0\272\0\272"+
    "\0\u3d08\0\u3d46\0\u3d84\0\u3dc2\0\272\0\u3e00\0\u3b56\0\u3e3e"+
    "\0\u3bd2\0\u3e7c\0\u3c4e\0\u3c8c\0\u3eba\0\u3ef8\0\u3f36\0\u3f74"+
    "\0\u3fb2\0\272\0\u3ff0\0\272\0\u402e\0\272\0\272\0\370"+
    "\0\u406c\0\u40aa\0\u40e8\0\u4126\0\u4164\0\u41a2\0\u402e\0\u41e0"+
    "\0\u40aa\0\u40e8\0\u421e\0\u425c\0\u429a\0\272\0\u42d8\0\272"+
    "\0\272\0\u4316\0\u425c\0\u429a\0\u4354\0\u4316\0\272\0\272"+
    "\0\u4392\0\272\0\u4392\0\272";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\4\1\5\1\11"+
    "\1\12\1\13\1\4\1\14\1\6\1\15\1\16\1\17"+
    "\1\6\1\20\1\21\1\22\1\6\1\23\1\6\1\24"+
    "\1\25\1\26\1\6\1\27\1\30\1\6\1\31\2\6"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\6\1\52\1\53\6\6\1\54\1\55\1\56\1\57"+
    "\1\4\1\5\1\6\1\7\1\10\1\4\1\5\1\11"+
    "\1\12\1\13\1\4\1\60\1\6\1\61\1\62\1\17"+
    "\1\6\1\63\1\64\1\65\1\6\1\66\1\6\1\67"+
    "\1\70\1\71\1\6\1\27\1\72\1\6\1\73\2\6"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\6\1\52\1\53\6\6\1\54\1\55\1\56\1\57"+
    "\1\4\1\5\1\6\1\7\1\10\1\4\1\5\1\11"+
    "\1\12\1\13\1\4\1\14\1\6\1\15\1\16\1\17"+
    "\1\6\1\20\1\21\1\22\1\6\1\23\1\6\1\24"+
    "\1\25\1\26\1\6\1\27\1\30\1\6\1\31\2\6"+
    "\1\74\1\75\1\76\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\6\1\52\1\53\6\6\1\54\1\55\1\56\1\57"+
    "\100\0\2\6\7\0\26\6\17\0\3\6\1\0\6\6"+
    "\7\0\1\7\6\0\1\77\63\0\4\10\1\100\1\101"+
    "\1\0\67\10\5\11\1\102\1\0\1\103\66\11\10\0"+
    "\1\104\1\105\66\0\2\6\7\0\1\6\1\106\15\6"+
    "\1\107\6\6\17\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\6\6\1\110\17\6\17\0\3\6\1\0\6\6"+
    "\6\0\2\6\7\0\12\6\1\111\2\6\1\112\1\6"+
    "\1\113\6\6\17\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\2\6\1\114\23\6\17\0\3\6\1\0\6\6"+
    "\6\0\2\6\7\0\14\6\1\115\11\6\17\0\3\6"+
    "\1\0\6\6\6\0\2\6\7\0\1\116\2\6\1\117"+
    "\2\6\1\120\7\6\1\121\7\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\1\122\25\6\17\0\3\6"+
    "\1\0\6\6\6\0\2\6\7\0\3\6\1\123\1\6"+
    "\1\124\6\6\1\125\1\6\1\126\7\6\17\0\3\6"+
    "\1\0\6\6\6\0\2\6\7\0\3\6\1\127\2\6"+
    "\1\130\7\6\1\131\7\6\17\0\3\6\1\0\6\6"+
    "\6\0\2\6\7\0\1\6\1\132\4\6\1\133\17\6"+
    "\17\0\2\6\1\134\1\0\6\6\6\0\2\6\7\0"+
    "\2\6\1\135\2\6\1\136\20\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\14\6\1\137\11\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\1\140\25\6"+
    "\17\0\3\6\1\0\6\6\6\0\2\6\7\0\6\6"+
    "\1\141\17\6\17\0\3\6\1\0\6\6\53\0\1\142"+
    "\76\0\1\143\75\0\1\144\1\145\74\0\1\146\75\0"+
    "\1\147\2\0\1\150\72\0\1\151\75\0\1\152\104\0"+
    "\1\153\20\0\2\6\7\0\1\154\25\6\17\0\3\6"+
    "\1\0\6\6\6\0\2\6\7\0\21\6\1\155\4\6"+
    "\17\0\3\6\1\0\6\6\70\0\1\156\1\0\1\157"+
    "\11\0\2\6\7\0\1\6\1\160\15\6\1\107\6\6"+
    "\17\0\3\6\1\0\6\6\6\0\2\6\7\0\6\6"+
    "\1\161\17\6\17\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\12\6\1\111\2\6\1\162\1\6\1\163\6\6"+
    "\17\0\3\6\1\0\6\6\6\0\2\6\7\0\14\6"+
    "\1\164\11\6\17\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\1\165\2\6\1\117\2\6\1\120\7\6\1\121"+
    "\7\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\1\166\25\6\17\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\3\6\1\167\1\6\1\124\6\6\1\170\1\6"+
    "\1\126\7\6\17\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\3\6\1\171\2\6\1\172\7\6\1\173\7\6"+
    "\17\0\3\6\1\0\6\6\6\0\2\6\7\0\1\6"+
    "\1\174\4\6\1\133\17\6\17\0\2\6\1\134\1\0"+
    "\6\6\6\0\2\6\7\0\2\6\1\135\2\6\1\175"+
    "\20\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\1\176\25\6\17\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\6\6\1\177\17\6\17\0\3\6\1\0\6\6"+
    "\7\0\1\77\72\0\76\10\76\11\6\104\1\0\67\104"+
    "\11\105\1\200\64\105\2\0\2\6\7\0\1\6\1\201"+
    "\24\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\7\6\1\202\1\6\1\203\14\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\1\6\1\204\6\6\1\205"+
    "\15\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\22\6\1\206\3\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\1\6\1\207\24\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\6\6\1\210\17\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\1\6\1\211"+
    "\13\6\1\212\10\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\1\6\1\213\7\6\1\214\14\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\26\6\17\0"+
    "\1\215\2\6\1\0\6\6\6\0\2\6\7\0\12\6"+
    "\1\216\13\6\17\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\13\6\1\217\10\6\1\220\1\6\17\0\3\6"+
    "\1\0\6\6\6\0\2\6\7\0\2\6\1\221\23\6"+
    "\17\0\3\6\1\0\6\6\6\0\2\6\7\0\17\6"+
    "\1\222\6\6\17\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\16\6\1\223\7\6\17\0\3\6\1\0\6\6"+
    "\6\0\2\6\7\0\2\6\1\224\23\6\17\0\3\6"+
    "\1\0\6\6\6\0\2\6\7\0\15\6\1\225\10\6"+
    "\17\0\3\6\1\0\6\6\6\0\2\6\7\0\17\6"+
    "\1\226\6\6\17\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\1\227\25\6\17\0\1\230\2\6\1\0\6\6"+
    "\6\0\2\6\7\0\1\231\1\6\1\232\23\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\26\6\17\0"+
    "\1\6\1\233\1\6\1\0\6\6\6\0\2\6\7\0"+
    "\3\6\1\234\22\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\1\6\1\235\24\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\16\6\1\236\7\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\15\6\1\237"+
    "\10\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\2\6\1\240\23\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\15\6\1\241\10\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\3\6\1\242\22\6\17\0"+
    "\3\6\1\0\6\6\71\0\1\243\77\0\1\244\10\0"+
    "\2\6\7\0\1\6\1\245\24\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\1\6\1\204\6\6\1\246"+
    "\15\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\22\6\1\247\3\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\1\6\1\250\24\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\1\6\1\251\13\6\1\212"+
    "\10\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\1\6\1\252\7\6\1\253\14\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\13\6\1\254\10\6\1\255"+
    "\1\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\2\6\1\256\23\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\16\6\1\257\7\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\15\6\1\260\10\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\17\6\1\261"+
    "\6\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\1\262\25\6\17\0\1\230\2\6\1\0\6\6\6\0"+
    "\2\6\7\0\1\263\1\6\1\264\23\6\17\0\3\6"+
    "\1\0\6\6\6\0\2\6\7\0\1\6\1\265\24\6"+
    "\17\0\3\6\1\0\6\6\6\0\2\6\7\0\15\6"+
    "\1\266\10\6\17\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\2\6\1\267\23\6\17\0\3\6\1\0\6\6"+
    "\4\0\10\105\1\270\1\200\64\105\2\0\2\6\7\0"+
    "\2\6\1\271\23\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\5\6\1\272\20\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\16\6\1\273\7\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\14\6\1\274"+
    "\1\275\1\6\1\276\6\6\17\0\3\6\1\0\6\6"+
    "\6\0\2\6\7\0\6\6\1\277\17\6\17\0\3\6"+
    "\1\0\6\6\6\0\2\6\7\0\1\300\25\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\26\6\1\301"+
    "\16\0\3\6\1\0\6\6\6\0\2\6\7\0\6\6"+
    "\1\302\17\6\17\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\6\6\1\303\17\6\17\0\3\6\1\0\6\6"+
    "\6\0\2\6\7\0\7\6\1\304\3\6\1\305\12\6"+
    "\17\0\3\6\1\0\6\6\6\0\2\6\7\0\1\6"+
    "\1\306\24\6\17\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\1\307\25\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\26\6\1\310\16\0\3\6\1\0\6\6"+
    "\6\0\2\6\7\0\26\6\1\311\16\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\15\6\1\312\10\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\26\6\17\0"+
    "\1\313\2\6\1\0\6\6\6\0\2\6\7\0\1\314"+
    "\25\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\1\6\1\315\24\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\26\6\1\316\16\0\3\6\1\0\6\6"+
    "\6\0\2\6\7\0\7\6\1\317\16\6\17\0\3\6"+
    "\1\0\6\6\6\0\2\6\7\0\1\320\25\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\1\6\1\321"+
    "\24\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\3\6\1\322\22\6\1\323\16\0\3\6\1\0\6\6"+
    "\6\0\2\6\7\0\1\6\1\324\24\6\17\0\3\6"+
    "\1\0\6\6\6\0\2\6\7\0\26\6\1\325\16\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\4\6\1\326"+
    "\21\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\21\6\1\327\4\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\17\6\1\330\6\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\6\6\1\331\17\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\14\6\1\332"+
    "\11\6\17\0\3\6\1\0\6\6\74\0\1\333\7\0"+
    "\2\6\7\0\2\6\1\334\23\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\16\6\1\335\7\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\14\6\1\336"+
    "\1\337\1\6\1\340\6\6\17\0\3\6\1\0\6\6"+
    "\6\0\2\6\7\0\6\6\1\341\17\6\17\0\3\6"+
    "\1\0\6\6\6\0\2\6\7\0\6\6\1\342\17\6"+
    "\17\0\3\6\1\0\6\6\6\0\2\6\7\0\7\6"+
    "\1\343\3\6\1\344\12\6\17\0\3\6\1\0\6\6"+
    "\6\0\2\6\7\0\15\6\1\345\10\6\17\0\3\6"+
    "\1\0\6\6\6\0\2\6\7\0\1\346\25\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\1\6\1\347"+
    "\24\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\7\6\1\350\16\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\1\6\1\351\24\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\3\6\1\352\22\6\1\323"+
    "\16\0\3\6\1\0\6\6\6\0\2\6\7\0\21\6"+
    "\1\353\4\6\17\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\17\6\1\354\6\6\17\0\3\6\1\0\6\6"+
    "\6\0\2\6\7\0\3\6\1\355\22\6\17\0\3\6"+
    "\1\0\6\6\6\0\2\6\7\0\2\6\1\356\23\6"+
    "\17\0\3\6\1\0\6\6\6\0\2\6\7\0\25\6"+
    "\1\357\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\3\6\1\360\22\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\1\6\1\361\24\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\1\362\25\6\17\0\3\6"+
    "\1\0\6\6\6\0\2\6\7\0\20\6\1\363\5\6"+
    "\17\0\3\6\1\0\6\6\6\0\2\6\7\0\23\6"+
    "\1\364\2\6\17\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\1\6\1\365\24\6\1\366\16\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\3\6\1\367\22\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\14\6\1\370"+
    "\11\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\5\6\1\371\20\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\1\6\1\372\24\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\1\6\1\373\24\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\1\6\1\374"+
    "\24\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\26\6\1\375\16\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\26\6\1\376\16\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\14\6\1\377\11\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\5\6\1\u0100\20\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\17\6\1\u0101"+
    "\6\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\26\6\17\0\1\u0102\2\6\1\0\6\6\6\0\2\6"+
    "\7\0\1\u0103\25\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\22\6\1\u0104\3\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\6\6\1\u0105\17\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\6\6\1\u0106"+
    "\17\6\17\0\3\6\1\0\6\6\71\0\1\u0107\12\0"+
    "\2\6\7\0\3\6\1\u0108\22\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\25\6\1\u0109\17\0\3\6"+
    "\1\0\6\6\6\0\2\6\7\0\3\6\1\u010a\22\6"+
    "\17\0\3\6\1\0\6\6\6\0\2\6\7\0\1\6"+
    "\1\u010b\24\6\17\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\1\u010c\25\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\20\6\1\u010d\5\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\1\6\1\u010e\24\6\1\366"+
    "\16\0\3\6\1\0\6\6\6\0\2\6\7\0\3\6"+
    "\1\u010f\22\6\17\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\14\6\1\u0110\11\6\17\0\3\6\1\0\6\6"+
    "\6\0\2\6\7\0\1\6\1\u0111\24\6\17\0\3\6"+
    "\1\0\6\6\6\0\2\6\7\0\1\6\1\u0112\24\6"+
    "\17\0\3\6\1\0\6\6\6\0\2\6\7\0\5\6"+
    "\1\u0113\20\6\17\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\17\6\1\u0114\6\6\17\0\3\6\1\0\6\6"+
    "\6\0\2\6\7\0\22\6\1\u0115\3\6\17\0\3\6"+
    "\1\0\6\6\6\0\2\6\7\0\6\6\1\u0116\17\6"+
    "\17\0\3\6\1\0\6\6\6\0\2\6\7\0\4\6"+
    "\1\u0117\21\6\17\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\17\6\1\u0118\6\6\17\0\3\6\1\0\6\6"+
    "\6\0\2\6\7\0\6\6\1\u0119\17\6\17\0\3\6"+
    "\1\0\6\6\6\0\2\6\7\0\15\6\1\u011a\10\6"+
    "\17\0\3\6\1\0\6\6\6\0\2\6\7\0\2\6"+
    "\1\u011b\23\6\17\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\26\6\1\u011c\16\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\6\6\1\u011d\17\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\3\6\1\u011e\22\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\12\6\1\u011f"+
    "\13\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\5\6\1\u0120\20\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\14\6\1\u0121\11\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\26\6\1\u0122\16\0\3\6"+
    "\1\0\6\6\6\0\2\6\7\0\3\6\1\u0123\22\6"+
    "\17\0\3\6\1\0\6\6\6\0\2\6\7\0\26\6"+
    "\1\u0124\16\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\15\6\1\u0125\10\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\20\6\1\u0126\5\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\21\6\1\u0127\4\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\14\6\1\u0128"+
    "\11\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\3\6\1\u0129\7\6\1\u012a\4\6\1\u012b\2\6\1\u012c"+
    "\2\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\14\6\1\u012d\11\6\17\0\3\6\1\0\6\6\75\0"+
    "\1\243\6\0\2\6\7\0\4\6\1\u012e\21\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\6\6\1\u012f"+
    "\17\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\15\6\1\u0130\10\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\2\6\1\u0131\23\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\6\6\1\u0132\17\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\3\6\1\u0133"+
    "\22\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\12\6\1\u0134\13\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\5\6\1\u0135\20\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\15\6\1\u0136\10\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\20\6\1\u0137"+
    "\5\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\3\6\1\u0138\7\6\1\u0139\4\6\1\u013a\2\6\1\u013b"+
    "\2\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\14\6\1\u013c\11\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\5\6\1\u013d\20\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\26\6\1\u013e\16\0\3\6"+
    "\1\0\6\6\6\0\2\6\7\0\1\6\1\u013f\24\6"+
    "\17\0\3\6\1\0\6\6\6\0\2\6\7\0\3\6"+
    "\1\u0140\22\6\17\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\2\6\1\u0141\23\6\17\0\3\6\1\0\6\6"+
    "\6\0\2\6\7\0\10\6\1\u0142\15\6\17\0\3\6"+
    "\1\0\6\6\6\0\2\6\7\0\12\6\1\u0143\13\6"+
    "\17\0\3\6\1\0\6\6\6\0\2\6\7\0\15\6"+
    "\1\u0144\10\6\17\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\1\6\1\u0145\24\6\17\0\3\6\1\0\6\6"+
    "\6\0\2\6\7\0\16\6\1\u0146\7\6\17\0\3\6"+
    "\1\0\6\6\6\0\2\6\7\0\26\6\1\u0147\16\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\26\6\1\u0148"+
    "\16\0\3\6\1\0\6\6\6\0\2\6\7\0\15\6"+
    "\1\u0149\10\6\17\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\5\6\1\u014a\20\6\17\0\3\6\1\0\6\6"+
    "\6\0\2\6\7\0\6\6\1\u014b\17\6\17\0\3\6"+
    "\1\0\6\6\6\0\2\6\7\0\6\6\1\u014c\17\6"+
    "\17\0\3\6\1\0\6\6\6\0\2\6\7\0\26\6"+
    "\1\u014d\16\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\5\6\1\u014e\20\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\1\6\1\u014f\24\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\3\6\1\u0150\22\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\2\6\1\u0151"+
    "\23\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\10\6\1\u0152\15\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\12\6\1\u0153\13\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\15\6\1\u0154\10\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\15\6\1\u0155"+
    "\10\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\5\6\1\u0156\20\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\6\6\1\u0157\17\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\6\6\1\u0158\17\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\1\6\1\u0159"+
    "\24\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\26\6\1\u015a\16\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\17\6\1\u015b\6\6\17\0\3\6\1\0\6\6"+
    "\6\0\2\6\7\0\26\6\1\u015c\16\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\6\6\1\u015d\17\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\26\6\1\u015e"+
    "\16\0\3\6\1\0\6\6\6\0\2\6\7\0\26\6"+
    "\1\u015f\16\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\17\6\1\u0160\6\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\23\6\1\u0161\2\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\1\6\1\u0162\24\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\1\6\1\u0163"+
    "\24\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\11\6\1\u0164\14\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\1\6\1\u0165\24\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\17\6\1\u0166\6\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\6\6\1\u0167"+
    "\17\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\23\6\1\u0168\2\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\1\6\1\u0169\24\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\1\6\1\u016a\24\6\17\0"+
    "\3\6\1\0\6\6\6\0\2\6\7\0\11\6\1\u016b"+
    "\14\6\17\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\6\6\1\u016c\17\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\20\6\1\u016d\5\6\17\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\26\6\1\u016e\16\0\3\6"+
    "\1\0\6\6\6\0\2\6\7\0\6\6\1\u016f\17\6"+
    "\17\0\3\6\1\0\6\6\6\0\2\6\7\0\26\6"+
    "\1\u0170\16\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\26\6\1\u0171\16\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\15\6\1\u0172\10\6\17\0\3\6\1\0\6\6"+
    "\6\0\2\6\7\0\6\6\1\u0173\17\6\17\0\3\6"+
    "\1\0\6\6\6\0\2\6\7\0\20\6\1\u0174\5\6"+
    "\17\0\3\6\1\0\6\6\6\0\2\6\7\0\6\6"+
    "\1\u0175\17\6\17\0\3\6\1\0\6\6\6\0\2\6"+
    "\7\0\15\6\1\u0176\10\6\17\0\3\6\1\0\6\6"+
    "\6\0\2\6\7\0\26\6\1\u0177\16\0\3\6\1\0"+
    "\6\6\6\0\2\6\7\0\26\6\1\u0178\16\0\3\6"+
    "\1\0\6\6\6\0\2\6\7\0\11\6\1\u0179\14\6"+
    "\17\0\3\6\1\0\6\6\6\0\2\6\7\0\26\6"+
    "\1\u017a\16\0\3\6\1\0\6\6\6\0\2\6\7\0"+
    "\11\6\1\u017b\14\6\17\0\3\6\1\0\6\6\6\0"+
    "\2\6\7\0\26\6\1\u017c\16\0\3\6\1\0\6\6"+
    "\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17360];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\5\1\1\11\16\1\6\11\6\1\1\11"+
    "\5\1\4\11\14\1\3\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\0\34\1\12\11\2\1\2\0\20\1\1\0"+
    "\42\1\1\11\1\0\23\1\1\11\10\1\1\11\6\1"+
    "\2\11\4\1\1\11\4\1\1\11\1\1\1\11\5\1"+
    "\1\0\32\1\1\11\6\1\2\11\10\1\1\0\24\1"+
    "\1\11\5\1\1\11\1\1\1\11\31\1\1\11\10\1"+
    "\2\11\4\1\1\11\14\1\1\11\1\1\1\11\1\1"+
    "\2\11\16\1\1\11\1\1\2\11\5\1\2\11\1\1"+
    "\1\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private final FormulaEngineLexerStateTracker stateTracker = new FormulaEngineLexerStateTracker(this);

  @Override
  public int getInitialState() {
      return YYINITIAL;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FormulaEngineLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 121: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 122: break;
          case 3: 
            { return FormulaEngineElementTypes.IDENTIFIER;
            } 
            // fall through
          case 123: break;
          case 4: 
            { return FormulaEngineElementTypes.NUMBER_INTEGER;
            } 
            // fall through
          case 124: break;
          case 5: 
            { return FormulaEngineElementTypes.SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 125: break;
          case 6: 
            { return FormulaEngineElementTypes.DOUBLE_QUOTED_STRING;
            } 
            // fall through
          case 126: break;
          case 7: 
            { return FormulaEngineElementTypes.OPERATOR_DIVIDE;
            } 
            // fall through
          case 127: break;
          case 8: 
            { return FormulaEngineElementTypes.OPERATOR_MULTIPLY;
            } 
            // fall through
          case 128: break;
          case 9: 
            { stateTracker.beginState(IN_PARENTHESIS); return FormulaEngineElementTypes.LEFT_PARENTHESIS;
            } 
            // fall through
          case 129: break;
          case 10: 
            { stateTracker.endState(); return FormulaEngineElementTypes.RIGHT_PARENTHESIS;
            } 
            // fall through
          case 130: break;
          case 11: 
            { return FormulaEngineElementTypes.LEFT_CURLY_BRACE;
            } 
            // fall through
          case 131: break;
          case 12: 
            { return FormulaEngineElementTypes.RIGHT_CURLY_BRACE;
            } 
            // fall through
          case 132: break;
          case 13: 
            { return FormulaEngineElementTypes.LEFT_BRACKET;
            } 
            // fall through
          case 133: break;
          case 14: 
            { return FormulaEngineElementTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 134: break;
          case 15: 
            { return FormulaEngineElementTypes.OPERATOR_ASSIGNMENT;
            } 
            // fall through
          case 135: break;
          case 16: 
            { return FormulaEngineElementTypes.MINUS;
            } 
            // fall through
          case 136: break;
          case 17: 
            { return FormulaEngineElementTypes.OPERATOR_GREATERTHAN;
            } 
            // fall through
          case 137: break;
          case 18: 
            { return FormulaEngineElementTypes.OPERATOR_PLUS;
            } 
            // fall through
          case 138: break;
          case 19: 
            { return FormulaEngineElementTypes.OPERATOR_LESSTHAN;
            } 
            // fall through
          case 139: break;
          case 20: 
            { return FormulaEngineElementTypes.OPERATOR_MODULO;
            } 
            // fall through
          case 140: break;
          case 21: 
            { return FormulaEngineElementTypes.OPERATOR_NEGATION;
            } 
            // fall through
          case 141: break;
          case 22: 
            { return FormulaEngineElementTypes.COMMA;
            } 
            // fall through
          case 142: break;
          case 23: 
            { return FormulaEngineElementTypes.SEMICOLON;
            } 
            // fall through
          case 143: break;
          case 24: 
            { return FormulaEngineElementTypes.COLON;
            } 
            // fall through
          case 144: break;
          case 25: 
            { return FormulaEngineElementTypes.QUESIONMARK;
            } 
            // fall through
          case 145: break;
          case 26: 
            { return FormulaEngineElementTypes.LEFT_PARENTHESIS;
            } 
            // fall through
          case 146: break;
          case 27: 
            { return FormulaEngineElementTypes.RIGHT_PARENTHESIS;
            } 
            // fall through
          case 147: break;
          case 28: 
            { stateTracker.endState(); return FormulaEngineElementTypes.LEFT_CURLY_BRACE;
            } 
            // fall through
          case 148: break;
          case 29: 
            { return FormulaEngineElementTypes.NUMBER_FLOAT;
            } 
            // fall through
          case 149: break;
          case 30: 
            { return FormulaEngineElementTypes.LINE_COMMENT;
            } 
            // fall through
          case 150: break;
          case 31: 
            { return FormulaEngineElementTypes.KEYWORD_IF;
            } 
            // fall through
          case 151: break;
          case 32: 
            { return FormulaEngineElementTypes.KEYWORD_DO;
            } 
            // fall through
          case 152: break;
          case 33: 
            { return FormulaEngineElementTypes.KEYWORD_OR;
            } 
            // fall through
          case 153: break;
          case 34: 
            { return FormulaEngineElementTypes.OPERATOR_AND;
            } 
            // fall through
          case 154: break;
          case 35: 
            { return FormulaEngineElementTypes.OPERATOR_EQUAL;
            } 
            // fall through
          case 155: break;
          case 36: 
            { return FormulaEngineElementTypes.OPERATOR_SUBTRACTASSIGNMENT;
            } 
            // fall through
          case 156: break;
          case 37: 
            { return FormulaEngineElementTypes.OPERATOR_DECREMENT;
            } 
            // fall through
          case 157: break;
          case 38: 
            { return FormulaEngineElementTypes.OPERATOR_GREATERTHANEQUAL;
            } 
            // fall through
          case 158: break;
          case 39: 
            { return FormulaEngineElementTypes.OPERATOR_ADDASSIGNMENT;
            } 
            // fall through
          case 159: break;
          case 40: 
            { return FormulaEngineElementTypes.OPERATOR_INCREMENT;
            } 
            // fall through
          case 160: break;
          case 41: 
            { return FormulaEngineElementTypes.OPERATOR_LESSTHANEQUAL;
            } 
            // fall through
          case 161: break;
          case 42: 
            { return FormulaEngineElementTypes.OPERATOR_NOTEQUAL;
            } 
            // fall through
          case 162: break;
          case 43: 
            { return FormulaEngineElementTypes.OPERATOR_OR;
            } 
            // fall through
          case 163: break;
          case 44: 
            { return FormulaEngineElementTypes.KEYWORD_AND;
            } 
            // fall through
          case 164: break;
          case 45: 
            { return FormulaEngineElementTypes.KEYWORD_ANY;
            } 
            // fall through
          case 165: break;
          case 46: 
            { return FormulaEngineElementTypes.KEYWORD_FOR;
            } 
            // fall through
          case 166: break;
          case 47: 
            { return FormulaEngineElementTypes.KEYWORD_SEQ;
            } 
            // fall through
          case 167: break;
          case 48: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_NA;
            } 
            // fall through
          case 168: break;
          case 49: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_ELT;
            } 
            // fall through
          case 169: break;
          case 50: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_MAP;
            } 
            // fall through
          case 170: break;
          case 51: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_MAX;
            } 
            // fall through
          case 171: break;
          case 52: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_LEN;
            } 
            // fall through
          case 172: break;
          case 53: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_STR;
            } 
            // fall through
          case 173: break;
          case 54: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_OUT;
            } 
            // fall through
          case 174: break;
          case 55: 
            { return FormulaEngineElementTypes.BLOCK_COMMENT;
            } 
            // fall through
          case 175: break;
          case 56: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_ELT;
            } 
            // fall through
          case 176: break;
          case 57: 
            { return FormulaEngineElementTypes.KEYWORD_ELSE;
            } 
            // fall through
          case 177: break;
          case 58: 
            { return FormulaEngineElementTypes.KEYWORD_DATE;
            } 
            // fall through
          case 178: break;
          case 59: 
            { return FormulaEngineElementTypes.KEYWORD_DICT;
            } 
            // fall through
          case 179: break;
          case 60: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_MAP;
            } 
            // fall through
          case 180: break;
          case 61: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_MAX;
            } 
            // fall through
          case 181: break;
          case 62: 
            { return FormulaEngineElementTypes.KEYWORD_LIST;
            } 
            // fall through
          case 182: break;
          case 63: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_LEN;
            } 
            // fall through
          case 183: break;
          case 64: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_STR;
            } 
            // fall through
          case 184: break;
          case 65: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_OUT;
            } 
            // fall through
          case 185: break;
          case 66: 
            { return FormulaEngineElementTypes.KEYWORD_CASE;
            } 
            // fall through
          case 186: break;
          case 67: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_DATE;
            } 
            // fall through
          case 187: break;
          case 68: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_LIST;
            } 
            // fall through
          case 188: break;
          case 69: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_LOAD;
            } 
            // fall through
          case 189: break;
          case 70: 
            { return FormulaEngineElementTypes.KEYWORD_BREAK;
            } 
            // fall through
          case 190: break;
          case 71: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DATE;
            } 
            // fall through
          case 191: break;
          case 72: 
            { return FormulaEngineElementTypes.KEYWORD_FLOAT;
            } 
            // fall through
          case 192: break;
          case 73: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_LIST;
            } 
            // fall through
          case 193: break;
          case 74: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_LOAD;
            } 
            // fall through
          case 194: break;
          case 75: 
            { return FormulaEngineElementTypes.VISIBILITY_LOCAL;
            } 
            // fall through
          case 195: break;
          case 76: 
            { return FormulaEngineElementTypes.KEYWORD_WHILE;
            } 
            // fall through
          case 196: break;
          case 77: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_NA;
            } 
            // fall through
          case 197: break;
          case 78: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_FIRST;
            } 
            // fall through
          case 198: break;
          case 79: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_FLOAT;
            } 
            // fall through
          case 199: break;
          case 80: 
            { return FormulaEngineElementTypes.KEYWORD_RETURN;
            } 
            // fall through
          case 200: break;
          case 81: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_NA;
            } 
            // fall through
          case 201: break;
          case 82: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_FIRST;
            } 
            // fall through
          case 202: break;
          case 83: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_FLOAT;
            } 
            // fall through
          case 203: break;
          case 84: 
            { return FormulaEngineElementTypes.KEYWORD_STRING;
            } 
            // fall through
          case 204: break;
          case 85: 
            { return FormulaEngineElementTypes.KEYWORD_SWITCH;
            } 
            // fall through
          case 205: break;
          case 86: 
            { return FormulaEngineElementTypes.VISIBILITY_GLOBAL;
            } 
            // fall through
          case 206: break;
          case 87: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_REMOVE;
            } 
            // fall through
          case 207: break;
          case 88: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_STATUS;
            } 
            // fall through
          case 208: break;
          case 89: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_STRING;
            } 
            // fall through
          case 209: break;
          case 90: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_KERNEL;
            } 
            // fall through
          case 210: break;
          case 91: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_REMOVE;
            } 
            // fall through
          case 211: break;
          case 92: 
            { return FormulaEngineElementTypes.KEYWORD_INTEGER;
            } 
            // fall through
          case 212: break;
          case 93: 
            { return FormulaEngineElementTypes.KEYWORD_DEFAULT;
            } 
            // fall through
          case 213: break;
          case 94: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_STATUS;
            } 
            // fall through
          case 214: break;
          case 95: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_STRING;
            } 
            // fall through
          case 215: break;
          case 96: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_KERNEL;
            } 
            // fall through
          case 216: break;
          case 97: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_LIST;
            } 
            // fall through
          case 217: break;
          case 98: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_INTEGER;
            } 
            // fall through
          case 218: break;
          case 99: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_DAYDIFF;
            } 
            // fall through
          case 219: break;
          case 100: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_DAYPLUS;
            } 
            // fall through
          case 220: break;
          case 101: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_LIST;
            } 
            // fall through
          case 221: break;
          case 102: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_INTEGER;
            } 
            // fall through
          case 222: break;
          case 103: 
            { return FormulaEngineElementTypes.KEYWORD_DATETIME;
            } 
            // fall through
          case 223: break;
          case 104: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DAYDIFF;
            } 
            // fall through
          case 224: break;
          case 105: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DAYPLUS;
            } 
            // fall through
          case 225: break;
          case 106: 
            { stateTracker.beginState(IN_FUNCTION_HEADER); return FormulaEngineElementTypes.KEYWORD_FUNCTION;
            } 
            // fall through
          case 226: break;
          case 107: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_DATETIME;
            } 
            // fall through
          case 227: break;
          case 108: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_PUT;
            } 
            // fall through
          case 228: break;
          case 109: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_GET;
            } 
            // fall through
          case 229: break;
          case 110: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DATETIME;
            } 
            // fall through
          case 230: break;
          case 111: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_PUT;
            } 
            // fall through
          case 231: break;
          case 112: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_GET;
            } 
            // fall through
          case 232: break;
          case 113: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_ATTRIBUTE;
            } 
            // fall through
          case 233: break;
          case 114: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_STRING;
            } 
            // fall through
          case 234: break;
          case 115: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_KEYS;
            } 
            // fall through
          case 235: break;
          case 116: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_ATTRIBUTE;
            } 
            // fall through
          case 236: break;
          case 117: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_STRING;
            } 
            // fall through
          case 237: break;
          case 118: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_KEYS;
            } 
            // fall through
          case 238: break;
          case 119: 
            { return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_ISKEY;
            } 
            // fall through
          case 239: break;
          case 120: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_ISKEY;
            } 
            // fall through
          case 240: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
