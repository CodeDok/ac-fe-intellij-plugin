/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package de.cofinpro.intellij.acfeplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import de.cofinpro.intellij.acfeplugin.psi.FormulaEngineElementType;
import de.cofinpro.intellij.acfeplugin.psi.FormulaEngineElementTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>FormulaEngine.flex</tt>
 */
public class FormulaEngineLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\0\1\2\1\1\22\0\1\2\3\0\1\33\3\0\1\6\1\7\5\0\1\3\12\5\3\0\1"+
    "\12\3\0\1\35\14\4\1\34\14\4\4\0\1\37\1\0\1\25\1\27\1\16\1\31\1\23\1\13\1\26"+
    "\1\4\1\20\2\4\1\24\1\36\1\15\1\21\2\4\1\22\1\30\1\17\1\14\1\40\2\4\1\32\1"+
    "\4\1\10\1\0\1\11\202\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\11\3\1\1\1\11\16\3\1\0\12\3"+
    "\1\12\6\3\1\13\6\3\1\14\1\15\2\3\1\16"+
    "\2\3\1\17\2\3\1\20\7\3\1\21\1\22\4\3"+
    "\1\23\3\3\1\24\1\3\1\25\2\3\1\26\1\27"+
    "\3\3\1\30\1\3\1\31\1\3\1\32\1\3\1\33"+
    "\1\34\1\35\3\3\1\36\1\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\102\0\143\0\204\0\102\0\102"+
    "\0\102\0\102\0\102\0\245\0\306\0\347\0\u0108\0\u0129"+
    "\0\u014a\0\u016b\0\u018c\0\u01ad\0\u01ce\0\u01ef\0\u0210\0\u0231"+
    "\0\u0252\0\u0273\0\u0294\0\u02b5\0\u02d6\0\u02f7\0\u0318\0\u0339"+
    "\0\u035a\0\u037b\0\u039c\0\u03bd\0\u03de\0\u03ff\0\u0420\0\u0441"+
    "\0\u0462\0\u0483\0\u04a4\0\u04c5\0\u04e6\0\u0507\0\u0528\0\204"+
    "\0\u0549\0\u056a\0\u058b\0\u05ac\0\u05cd\0\u05ee\0\102\0\u060f"+
    "\0\u0630\0\u0651\0\u0672\0\u0693\0\u06b4\0\102\0\204\0\u06d5"+
    "\0\u06f6\0\102\0\u0717\0\u0738\0\102\0\u0759\0\u077a\0\204"+
    "\0\u079b\0\u07bc\0\u07dd\0\u07fe\0\u081f\0\u0840\0\u0861\0\204"+
    "\0\102\0\u0882\0\u08a3\0\u08c4\0\u08e5\0\102\0\u0906\0\u0927"+
    "\0\u0948\0\102\0\u0969\0\204\0\u098a\0\u09ab\0\204\0\204"+
    "\0\u09cc\0\u09ed\0\u0a0e\0\u0a2f\0\u0a50\0\102\0\u0a71\0\102"+
    "\0\u0a92\0\204\0\102\0\102\0\u0ab3\0\u0ad4\0\u0af5\0\102"+
    "\0\102";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\3\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\4\6\1\15\1\6\1\16\1\17"+
    "\1\20\1\21\1\22\1\6\1\23\1\24\1\6\1\25"+
    "\5\6\41\3\44\0\1\26\41\0\2\6\5\0\20\6"+
    "\1\0\5\6\4\0\2\6\5\0\1\6\1\27\16\6"+
    "\1\0\5\6\4\0\2\6\5\0\2\6\1\30\12\6"+
    "\1\31\2\6\1\0\5\6\4\0\2\6\5\0\10\6"+
    "\1\32\7\6\1\0\5\6\4\0\2\6\5\0\11\6"+
    "\1\33\6\6\1\0\5\6\4\0\2\6\5\0\5\6"+
    "\1\34\1\35\1\6\1\36\7\6\1\0\5\6\4\0"+
    "\2\6\5\0\2\6\1\37\1\6\1\40\13\6\1\0"+
    "\5\6\4\0\2\6\5\0\11\6\1\41\6\6\1\0"+
    "\5\6\4\0\2\6\5\0\4\6\1\42\13\6\1\0"+
    "\5\6\4\0\2\6\5\0\5\6\1\43\4\6\1\44"+
    "\5\6\1\0\5\6\34\0\1\45\4\0\1\26\1\0"+
    "\37\26\4\0\2\6\5\0\2\6\1\46\15\6\1\0"+
    "\5\6\4\0\2\6\5\0\4\6\1\47\13\6\1\0"+
    "\5\6\4\0\2\6\5\0\20\6\1\0\3\6\1\50"+
    "\1\6\4\0\2\6\5\0\4\6\1\51\13\6\1\0"+
    "\2\6\1\52\2\6\4\0\2\6\5\0\4\6\1\53"+
    "\13\6\1\0\5\6\4\0\2\6\5\0\15\6\1\54"+
    "\2\6\1\0\5\6\4\0\2\6\5\0\3\6\1\55"+
    "\6\6\1\56\5\6\1\0\5\6\4\0\2\6\5\0"+
    "\2\6\1\57\15\6\1\0\5\6\4\0\2\6\5\0"+
    "\17\6\1\60\1\0\5\6\4\0\2\6\5\0\4\6"+
    "\1\61\13\6\1\0\5\6\4\0\2\6\5\0\6\6"+
    "\1\62\11\6\1\0\5\6\4\0\2\6\5\0\7\6"+
    "\1\63\2\6\1\64\5\6\1\0\5\6\4\0\2\6"+
    "\5\0\3\6\1\65\14\6\1\0\5\6\4\0\2\6"+
    "\5\0\4\6\1\66\13\6\1\0\5\6\35\0\1\67"+
    "\7\0\2\6\5\0\3\6\1\70\14\6\1\0\5\6"+
    "\4\0\2\6\5\0\10\6\1\71\7\6\1\0\5\6"+
    "\4\0\2\6\5\0\2\6\1\72\6\6\1\73\6\6"+
    "\1\0\5\6\4\0\2\6\5\0\1\6\1\74\16\6"+
    "\1\0\5\6\4\0\2\6\5\0\6\6\1\75\11\6"+
    "\1\0\5\6\4\0\2\6\1\76\4\0\20\6\1\0"+
    "\5\6\4\0\2\6\5\0\4\6\1\77\13\6\1\0"+
    "\5\6\4\0\2\6\5\0\12\6\1\100\5\6\1\0"+
    "\5\6\4\0\2\6\5\0\16\6\1\101\1\6\1\0"+
    "\5\6\4\0\2\6\1\102\4\0\20\6\1\0\5\6"+
    "\4\0\2\6\5\0\7\6\1\103\10\6\1\0\5\6"+
    "\4\0\2\6\5\0\14\6\1\104\3\6\1\0\5\6"+
    "\4\0\2\6\1\105\4\0\5\6\1\106\12\6\1\0"+
    "\5\6\4\0\2\6\5\0\4\6\1\107\13\6\1\0"+
    "\5\6\4\0\2\6\5\0\4\6\1\110\13\6\1\0"+
    "\5\6\4\0\2\6\5\0\10\6\1\111\7\6\1\0"+
    "\5\6\4\0\2\6\5\0\4\6\1\112\13\6\1\0"+
    "\5\6\4\0\2\6\5\0\13\6\1\113\4\6\1\0"+
    "\5\6\4\0\2\6\5\0\12\6\1\114\5\6\1\0"+
    "\5\6\4\0\2\6\5\0\5\6\1\115\12\6\1\0"+
    "\5\6\4\0\2\6\5\0\7\6\1\116\10\6\1\0"+
    "\5\6\4\0\2\6\5\0\20\6\1\0\4\6\1\117"+
    "\4\0\2\6\5\0\11\6\1\120\6\6\1\0\5\6"+
    "\4\0\2\6\1\121\4\0\20\6\1\0\5\6\4\0"+
    "\2\6\5\0\5\6\1\122\12\6\1\0\5\6\4\0"+
    "\2\6\5\0\12\6\1\123\5\6\1\0\5\6\4\0"+
    "\2\6\5\0\2\6\1\124\15\6\1\0\5\6\4\0"+
    "\2\6\5\0\1\6\1\125\16\6\1\0\5\6\4\0"+
    "\2\6\1\126\4\0\4\6\1\127\13\6\1\0\5\6"+
    "\4\0\2\6\5\0\5\6\1\130\12\6\1\0\5\6"+
    "\4\0\2\6\5\0\10\6\1\131\7\6\1\0\5\6"+
    "\4\0\2\6\1\132\4\0\20\6\1\0\5\6\4\0"+
    "\2\6\5\0\15\6\1\133\2\6\1\0\5\6\4\0"+
    "\2\6\5\0\2\6\1\134\15\6\1\0\5\6\4\0"+
    "\2\6\5\0\10\6\1\135\7\6\1\0\5\6\4\0"+
    "\2\6\5\0\14\6\1\136\3\6\1\0\5\6\4\0"+
    "\2\6\5\0\11\6\1\137\6\6\1\0\5\6\4\0"+
    "\2\6\5\0\13\6\1\140\4\6\1\0\5\6\4\0"+
    "\2\6\5\0\15\6\1\141\2\6\1\0\5\6\4\0"+
    "\2\6\5\0\5\6\1\142\12\6\1\0\5\6\4\0"+
    "\2\6\5\0\6\6\1\143\11\6\1\0\5\6\4\0"+
    "\2\6\5\0\7\6\1\144\10\6\1\0\5\6\4\0"+
    "\2\6\5\0\4\6\1\145\13\6\1\0\5\6\4\0"+
    "\2\6\1\146\4\0\20\6\1\0\5\6\4\0\2\6"+
    "\5\0\1\6\1\147\16\6\1\0\5\6\4\0\2\6"+
    "\1\150\4\0\20\6\1\0\5\6\4\0\2\6\5\0"+
    "\20\6\1\0\2\6\1\151\2\6\4\0\2\6\5\0"+
    "\2\6\1\152\15\6\1\0\5\6\4\0\2\6\1\153"+
    "\4\0\20\6\1\0\5\6\4\0\2\6\1\154\4\0"+
    "\20\6\1\0\5\6\4\0\2\6\5\0\4\6\1\155"+
    "\13\6\1\0\5\6\4\0\2\6\5\0\10\6\1\156"+
    "\7\6\1\0\5\6\4\0\2\6\5\0\10\6\1\157"+
    "\7\6\1\0\5\6\4\0\2\6\1\160\4\0\20\6"+
    "\1\0\5\6\4\0\2\6\1\161\4\0\20\6\1\0"+
    "\5\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2838];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\2\1\5\11\31\1\1\0\21\1\1\11"+
    "\6\1\1\11\3\1\1\11\2\1\1\11\13\1\1\11"+
    "\4\1\1\11\3\1\1\11\13\1\1\11\1\1\1\11"+
    "\2\1\2\11\3\1\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FormulaEngineLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 32: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 33: break;
          case 3: 
            { return FormulaEngineElementTypes.IDENTIFIER;
            } 
            // fall through
          case 34: break;
          case 4: 
            { return FormulaEngineElementTypes.LEFT_PARENTHESIS;
            } 
            // fall through
          case 35: break;
          case 5: 
            { return FormulaEngineElementTypes.RIGHT_PARENTHESIS;
            } 
            // fall through
          case 36: break;
          case 6: 
            { return FormulaEngineElementTypes.LEFT_CURLY_BRACE;
            } 
            // fall through
          case 37: break;
          case 7: 
            { return FormulaEngineElementTypes.RIGHT_CURLY_BRACE;
            } 
            // fall through
          case 38: break;
          case 8: 
            { return FormulaEngineElementTypes.OPERATOR_EQUALS;
            } 
            // fall through
          case 39: break;
          case 9: 
            { return FormulaEngineElementTypes.LINE_COMMENT;
            } 
            // fall through
          case 40: break;
          case 10: 
            { return FormulaEngineElementTypes.ANY;
            } 
            // fall through
          case 41: break;
          case 11: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_NA;
            } 
            // fall through
          case 42: break;
          case 12: 
            { yypushback(1); return FormulaEngineElementTypes.ELT;
            } 
            // fall through
          case 43: break;
          case 13: 
            { return FormulaEngineElementTypes.LIST;
            } 
            // fall through
          case 44: break;
          case 14: 
            { yypushback(1); return FormulaEngineElementTypes.LEN;
            } 
            // fall through
          case 45: break;
          case 15: 
            { yypushback(1); return FormulaEngineElementTypes.STR;
            } 
            // fall through
          case 46: break;
          case 16: 
            { return FormulaEngineElementTypes.DICT;
            } 
            // fall through
          case 47: break;
          case 17: 
            { return FormulaEngineElementTypes.LOCAL;
            } 
            // fall through
          case 48: break;
          case 18: 
            { yypushback(1); return FormulaEngineElementTypes.LOAD;
            } 
            // fall through
          case 49: break;
          case 19: 
            { yypushback(1); return FormulaEngineElementTypes.DATE;
            } 
            // fall through
          case 50: break;
          case 20: 
            { yypushback(1); return FormulaEngineElementTypes.IS_NA;
            } 
            // fall through
          case 51: break;
          case 21: 
            { return FormulaEngineElementTypes.RETURN;
            } 
            // fall through
          case 52: break;
          case 22: 
            { return FormulaEngineElementTypes.GLOBAL;
            } 
            // fall through
          case 53: break;
          case 23: 
            { return FormulaEngineElementTypes.STRING;
            } 
            // fall through
          case 54: break;
          case 24: 
            { return FormulaEngineElementTypes.INTEGER;
            } 
            // fall through
          case 55: break;
          case 25: 
            { yypushback(1); return FormulaEngineElementTypes.REMOVE;
            } 
            // fall through
          case 56: break;
          case 26: 
            { yypushback(1); return FormulaEngineElementTypes.STATUS;
            } 
            // fall through
          case 57: break;
          case 27: 
            { return FormulaEngineElementTypes.FUNCTION;
            } 
            // fall through
          case 58: break;
          case 28: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_INTEGER;
            } 
            // fall through
          case 59: break;
          case 29: 
            { yypushback(1); return FormulaEngineElementTypes.IS_LIST;
            } 
            // fall through
          case 60: break;
          case 30: 
            { yypushback(1); return FormulaEngineElementTypes.DATETIME;
            } 
            // fall through
          case 61: break;
          case 31: 
            { yypushback(1); return FormulaEngineElementTypes.ATTRIBUTE;
            } 
            // fall through
          case 62: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
