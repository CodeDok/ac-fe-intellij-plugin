/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package de.cofinpro.intellij.acfeplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import de.cofinpro.intellij.acfeplugin.psi.FormulaEngineElementType;
import de.cofinpro.intellij.acfeplugin.psi.FormulaEngineElementTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>FormulaEngine.flex</tt>
 */
public class FormulaEngineLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\6\1\0\1\1\1\6\22\0\1\1\1\23\1\7\1\0\1\51\1\22\1\20\1\4\1\12\1"+
    "\13\1\11\1\25\1\65\2\0\1\10\12\3\3\0\1\21\3\0\1\53\2\2\1\56\11\2\1\52\1\55"+
    "\4\2\1\54\4\2\1\57\1\2\1\16\1\5\1\17\1\0\1\62\1\0\1\31\1\33\1\30\1\43\1\40"+
    "\1\34\1\32\1\50\1\36\1\2\1\63\1\26\1\60\1\37\1\27\1\61\1\46\1\41\1\42\1\35"+
    "\1\45\1\64\1\47\1\2\1\44\1\2\1\14\1\24\1\15\202\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\1\1\15"+
    "\1\16\1\17\1\1\1\20\14\3\1\1\1\3\1\21"+
    "\2\5\2\6\1\22\1\0\1\23\1\24\1\25\1\26"+
    "\13\3\1\27\12\3\2\0\1\3\1\0\6\3\1\30"+
    "\2\3\1\31\12\3\1\32\5\3\1\33\1\0\1\3"+
    "\1\34\2\3\1\35\1\36\1\37\11\3\1\40\1\41"+
    "\3\3\1\42\4\3\1\43\2\3\1\0\1\3\1\44"+
    "\1\45\2\3\1\46\12\3\1\47\3\3\1\50\1\3"+
    "\1\0\2\3\1\51\1\52\1\53\3\3\1\54\1\3"+
    "\1\55\2\3\1\56\12\3\1\57\2\3\1\60\1\61"+
    "\7\3\1\62\1\3\1\63\1\64\1\65\2\3\1\66"+
    "\1\67\6\3\1\70\1\71\1\3\1\72\1\3\1\73"+
    "\1\74\1\3\1\75\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\154\0\242\0\330\0\u010e\0\u0144"+
    "\0\u017a\0\154\0\154\0\154\0\154\0\154\0\154\0\u01b0"+
    "\0\u01e6\0\154\0\u021c\0\u0252\0\154\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\u04da\0\u0510\0\u0546\0\154\0\154\0\u057c\0\u05b2\0\154"+
    "\0\u05e8\0\u061e\0\154\0\154\0\154\0\154\0\u0654\0\u068a"+
    "\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a"+
    "\0\u0870\0\242\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4"+
    "\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64"+
    "\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\242\0\u0cde"+
    "\0\u0d14\0\242\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58"+
    "\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\242\0\u0f66\0\u0f9c\0\u0fd2"+
    "\0\u1008\0\u103e\0\154\0\u1074\0\u10aa\0\154\0\u10e0\0\u1116"+
    "\0\242\0\154\0\154\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224"+
    "\0\u125a\0\u1290\0\u12c6\0\u12fc\0\154\0\242\0\u1332\0\u1368"+
    "\0\u139e\0\154\0\u13d4\0\u140a\0\u1440\0\u1476\0\242\0\u14ac"+
    "\0\u14e2\0\u1518\0\u154e\0\242\0\154\0\u1584\0\u15ba\0\u15f0"+
    "\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0"+
    "\0\u17d6\0\u180c\0\154\0\u1842\0\u1878\0\u18ae\0\242\0\u18e4"+
    "\0\u191a\0\u1950\0\u1986\0\242\0\154\0\154\0\u19bc\0\u19f2"+
    "\0\u1a28\0\154\0\u1a5e\0\242\0\u1a94\0\u1aca\0\242\0\u1b00"+
    "\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0"+
    "\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\154\0\154\0\u1dbe\0\u1df4"+
    "\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\154\0\u1f38\0\242"+
    "\0\154\0\154\0\u1f6e\0\u1fa4\0\154\0\154\0\u1fda\0\u2010"+
    "\0\u2046\0\u207c\0\u20b2\0\u20e8\0\154\0\154\0\u211e\0\154"+
    "\0\u2154\0\154\0\154\0\u218a\0\154\0\154";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\3\1\4\1\10"+
    "\1\11\1\3\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\5\1\30\1\31\1\5\1\32\1\5\1\33\1\5"+
    "\1\34\1\35\1\36\1\37\3\5\1\40\1\41\1\42"+
    "\11\5\1\43\1\5\1\44\66\3\70\0\2\5\22\0"+
    "\23\5\1\0\13\5\4\0\1\6\62\0\4\7\1\45"+
    "\1\46\1\0\57\7\5\10\1\47\1\0\1\50\56\10"+
    "\10\0\1\51\1\52\74\0\1\53\66\0\1\54\65\0"+
    "\1\55\70\0\1\56\43\0\2\5\22\0\1\5\1\57"+
    "\6\5\1\60\1\5\1\61\10\5\1\0\13\5\3\0"+
    "\2\5\22\0\17\5\1\62\3\5\1\0\13\5\3\0"+
    "\2\5\22\0\7\5\1\63\1\5\1\64\11\5\1\0"+
    "\13\5\3\0\2\5\22\0\1\65\22\5\1\0\13\5"+
    "\3\0\2\5\22\0\1\66\1\67\6\5\1\70\6\5"+
    "\1\71\3\5\1\0\13\5\3\0\2\5\22\0\6\5"+
    "\1\72\2\5\1\73\2\5\1\74\6\5\1\0\13\5"+
    "\3\0\2\5\22\0\1\75\22\5\1\0\13\5\3\0"+
    "\2\5\22\0\12\5\1\76\10\5\1\0\13\5\3\0"+
    "\2\5\22\0\7\5\1\77\2\5\1\100\10\5\1\0"+
    "\13\5\3\0\2\5\22\0\3\5\1\101\4\5\1\102"+
    "\12\5\1\0\13\5\3\0\2\5\22\0\22\5\1\103"+
    "\1\0\13\5\3\0\2\5\22\0\3\5\1\104\17\5"+
    "\1\0\13\5\53\0\1\105\1\0\1\106\13\0\2\5"+
    "\22\0\12\5\1\107\10\5\1\0\13\5\1\0\66\7"+
    "\66\10\6\51\1\0\57\51\11\52\1\110\54\52\2\0"+
    "\2\5\22\0\2\5\1\111\1\112\17\5\1\0\13\5"+
    "\3\0\2\5\22\0\14\5\1\113\6\5\1\0\13\5"+
    "\3\0\2\5\22\0\11\5\1\114\11\5\1\0\13\5"+
    "\3\0\2\5\22\0\7\5\1\115\13\5\1\0\13\5"+
    "\3\0\2\5\22\0\7\5\1\116\13\5\1\0\13\5"+
    "\3\0\2\5\22\0\16\5\1\117\4\5\1\0\13\5"+
    "\3\0\2\5\22\0\1\5\1\120\21\5\1\0\13\5"+
    "\3\0\2\5\22\0\1\5\1\121\21\5\1\0\13\5"+
    "\3\0\2\5\22\0\13\5\1\122\7\5\1\0\13\5"+
    "\3\0\2\5\22\0\13\5\1\123\7\5\1\0\13\5"+
    "\3\0\2\5\22\0\11\5\1\124\11\5\1\0\13\5"+
    "\3\0\2\5\22\0\7\5\1\125\13\5\1\0\13\5"+
    "\3\0\2\5\22\0\23\5\1\0\10\5\1\126\2\5"+
    "\3\0\2\5\22\0\7\5\1\127\4\5\1\130\6\5"+
    "\1\0\13\5\3\0\2\5\22\0\7\5\1\131\13\5"+
    "\1\0\6\5\1\132\4\5\3\0\2\5\22\0\3\5"+
    "\1\133\7\5\1\134\7\5\1\0\13\5\3\0\2\5"+
    "\22\0\20\5\1\135\2\5\1\0\13\5\3\0\2\5"+
    "\22\0\7\5\1\136\6\5\1\137\4\5\1\0\13\5"+
    "\3\0\2\5\22\0\2\5\1\140\20\5\1\0\13\5"+
    "\3\0\2\5\22\0\10\5\1\141\12\5\1\0\13\5"+
    "\3\0\2\5\22\0\14\5\1\142\6\5\1\0\13\5"+
    "\54\0\1\143\67\0\1\144\12\0\2\5\22\0\13\5"+
    "\1\145\7\5\1\0\13\5\1\0\10\52\1\146\1\110"+
    "\54\52\2\0\2\5\22\0\3\5\1\147\17\5\1\0"+
    "\13\5\3\0\2\5\22\0\15\5\1\150\5\5\1\0"+
    "\13\5\3\0\2\5\22\0\7\5\1\151\13\5\1\0"+
    "\13\5\3\0\2\5\6\0\1\152\13\0\23\5\1\0"+
    "\13\5\3\0\2\5\6\0\1\153\13\0\23\5\1\0"+
    "\13\5\3\0\2\5\22\0\13\5\1\154\7\5\1\0"+
    "\13\5\3\0\2\5\22\0\5\5\1\155\15\5\1\0"+
    "\13\5\3\0\2\5\22\0\3\5\1\156\17\5\1\0"+
    "\13\5\3\0\2\5\22\0\14\5\1\157\6\5\1\0"+
    "\13\5\3\0\2\5\22\0\2\5\1\160\20\5\1\0"+
    "\13\5\3\0\2\5\22\0\12\5\1\161\10\5\1\0"+
    "\13\5\3\0\2\5\22\0\1\162\10\5\1\163\2\5"+
    "\1\164\6\5\1\0\13\5\3\0\2\5\6\0\1\165"+
    "\13\0\23\5\1\0\13\5\3\0\2\5\22\0\12\5"+
    "\1\166\10\5\1\0\13\5\3\0\2\5\22\0\17\5"+
    "\1\167\3\5\1\0\13\5\3\0\2\5\22\0\1\5"+
    "\1\170\21\5\1\0\13\5\3\0\2\5\22\0\7\5"+
    "\1\171\13\5\1\0\13\5\3\0\2\5\6\0\1\172"+
    "\13\0\10\5\1\173\12\5\1\0\13\5\3\0\2\5"+
    "\22\0\12\5\1\174\10\5\1\0\13\5\3\0\2\5"+
    "\22\0\15\5\1\175\5\5\1\0\7\5\1\176\3\5"+
    "\3\0\2\5\22\0\7\5\1\177\13\5\1\0\13\5"+
    "\3\0\2\5\22\0\1\200\22\5\1\0\13\5\3\0"+
    "\2\5\22\0\22\5\1\201\1\0\13\5\57\0\1\202"+
    "\11\0\2\5\22\0\11\5\1\203\11\5\1\0\13\5"+
    "\3\0\2\5\22\0\1\204\22\5\1\0\13\5\3\0"+
    "\2\5\6\0\1\205\13\0\23\5\1\0\13\5\3\0"+
    "\2\5\22\0\10\5\1\206\12\5\1\0\13\5\3\0"+
    "\2\5\22\0\3\5\1\207\17\5\1\0\13\5\3\0"+
    "\2\5\22\0\7\5\1\210\13\5\1\0\13\5\3\0"+
    "\2\5\22\0\7\5\1\211\13\5\1\0\13\5\3\0"+
    "\2\5\22\0\7\5\1\212\13\5\1\0\13\5\3\0"+
    "\2\5\22\0\4\5\1\213\16\5\1\0\13\5\3\0"+
    "\2\5\22\0\10\5\1\214\12\5\1\0\13\5\3\0"+
    "\2\5\22\0\3\5\1\215\17\5\1\0\13\5\3\0"+
    "\2\5\22\0\7\5\1\216\13\5\1\0\13\5\3\0"+
    "\2\5\22\0\13\5\1\217\7\5\1\0\13\5\3\0"+
    "\2\5\22\0\23\5\1\0\12\5\1\220\3\0\2\5"+
    "\22\0\17\5\1\221\3\5\1\0\13\5\3\0\2\5"+
    "\22\0\11\5\1\222\11\5\1\0\13\5\3\0\2\5"+
    "\6\0\1\223\13\0\7\5\1\224\13\5\1\0\13\5"+
    "\3\0\2\5\22\0\10\5\1\225\12\5\1\0\13\5"+
    "\3\0\2\5\22\0\1\226\22\5\1\0\13\5\3\0"+
    "\2\5\22\0\12\5\1\227\10\5\1\0\13\5\3\0"+
    "\2\5\22\0\23\5\1\0\10\5\1\230\2\5\54\0"+
    "\1\231\14\0\2\5\22\0\12\5\1\232\10\5\1\0"+
    "\13\5\3\0\2\5\22\0\5\5\1\233\15\5\1\0"+
    "\13\5\3\0\2\5\22\0\1\234\22\5\1\0\13\5"+
    "\3\0\2\5\6\0\1\235\13\0\23\5\1\0\13\5"+
    "\3\0\2\5\6\0\1\236\13\0\23\5\1\0\13\5"+
    "\3\0\2\5\22\0\10\5\1\237\12\5\1\0\13\5"+
    "\3\0\2\5\22\0\12\5\1\240\10\5\1\0\13\5"+
    "\3\0\2\5\22\0\14\5\1\241\6\5\1\0\13\5"+
    "\3\0\2\5\6\0\1\242\13\0\23\5\1\0\13\5"+
    "\3\0\2\5\22\0\13\5\1\243\7\5\1\0\13\5"+
    "\3\0\2\5\22\0\11\5\1\244\11\5\1\0\13\5"+
    "\3\0\2\5\22\0\12\5\1\245\10\5\1\0\13\5"+
    "\3\0\2\5\22\0\14\5\1\246\6\5\1\0\13\5"+
    "\3\0\2\5\22\0\4\5\1\247\16\5\1\0\13\5"+
    "\3\0\2\5\22\0\10\5\1\250\12\5\1\0\13\5"+
    "\3\0\2\5\22\0\6\5\1\251\14\5\1\0\13\5"+
    "\3\0\2\5\22\0\17\5\1\252\3\5\1\0\13\5"+
    "\3\0\2\5\22\0\4\5\1\253\3\5\1\254\12\5"+
    "\1\0\7\5\1\255\1\5\1\256\1\5\60\0\1\143"+
    "\10\0\2\5\22\0\1\257\22\5\1\0\13\5\3\0"+
    "\2\5\22\0\17\5\1\260\3\5\1\0\13\5\3\0"+
    "\2\5\22\0\1\5\1\261\21\5\1\0\13\5\3\0"+
    "\2\5\22\0\13\5\1\262\7\5\1\0\13\5\3\0"+
    "\2\5\22\0\7\5\1\263\13\5\1\0\13\5\3\0"+
    "\2\5\22\0\10\5\1\264\12\5\1\0\13\5\3\0"+
    "\2\5\6\0\1\265\13\0\23\5\1\0\13\5\3\0"+
    "\2\5\6\0\1\266\13\0\23\5\1\0\13\5\3\0"+
    "\2\5\22\0\23\5\1\0\6\5\1\267\4\5\3\0"+
    "\2\5\22\0\6\5\1\270\14\5\1\0\13\5\3\0"+
    "\2\5\22\0\14\5\1\271\6\5\1\0\13\5\3\0"+
    "\2\5\22\0\12\5\1\272\10\5\1\0\13\5\3\0"+
    "\2\5\22\0\14\5\1\273\6\5\1\0\13\5\3\0"+
    "\2\5\22\0\17\5\1\274\3\5\1\0\13\5\3\0"+
    "\2\5\22\0\12\5\1\275\10\5\1\0\13\5\3\0"+
    "\2\5\6\0\1\276\13\0\23\5\1\0\13\5\3\0"+
    "\2\5\22\0\7\5\1\277\13\5\1\0\13\5\3\0"+
    "\2\5\22\0\11\5\1\300\11\5\1\0\13\5\3\0"+
    "\2\5\6\0\1\301\13\0\23\5\1\0\13\5\3\0"+
    "\2\5\6\0\1\302\13\0\23\5\1\0\13\5\3\0"+
    "\2\5\22\0\11\5\1\303\11\5\1\0\13\5\3\0"+
    "\2\5\22\0\12\5\1\304\10\5\1\0\13\5\3\0"+
    "\2\5\6\0\1\305\13\0\23\5\1\0\13\5\3\0"+
    "\2\5\6\0\1\306\13\0\23\5\1\0\13\5\3\0"+
    "\2\5\22\0\7\5\1\307\13\5\1\0\13\5\3\0"+
    "\2\5\22\0\23\5\1\0\11\5\1\310\1\5\3\0"+
    "\2\5\22\0\7\5\1\311\13\5\1\0\13\5\3\0"+
    "\2\5\22\0\16\5\1\312\4\5\1\0\13\5\3\0"+
    "\2\5\22\0\12\5\1\313\10\5\1\0\13\5\3\0"+
    "\2\5\22\0\4\5\1\314\16\5\1\0\13\5\3\0"+
    "\2\5\6\0\1\315\13\0\23\5\1\0\13\5\3\0"+
    "\2\5\6\0\1\316\13\0\23\5\1\0\13\5\3\0"+
    "\2\5\22\0\12\5\1\317\10\5\1\0\13\5\3\0"+
    "\2\5\6\0\1\320\13\0\23\5\1\0\13\5\3\0"+
    "\2\5\22\0\14\5\1\321\6\5\1\0\13\5\3\0"+
    "\2\5\6\0\1\322\13\0\23\5\1\0\13\5\3\0"+
    "\2\5\6\0\1\323\13\0\23\5\1\0\13\5\3\0"+
    "\2\5\22\0\16\5\1\324\4\5\1\0\13\5\3\0"+
    "\2\5\6\0\1\325\13\0\23\5\1\0\13\5\3\0"+
    "\2\5\6\0\1\326\13\0\23\5\1\0\13\5\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\5\1\6\11\2\1\1\11\2\1\1\11"+
    "\16\1\2\11\2\1\1\11\1\1\1\0\4\11\26\1"+
    "\2\0\1\1\1\0\32\1\1\11\1\0\1\1\1\11"+
    "\3\1\2\11\11\1\1\11\4\1\1\11\7\1\1\0"+
    "\2\1\1\11\15\1\1\11\5\1\1\0\3\1\2\11"+
    "\3\1\1\11\22\1\2\11\7\1\1\11\2\1\2\11"+
    "\2\1\2\11\6\1\2\11\1\1\1\11\1\1\2\11"+
    "\1\1\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FormulaEngineLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 63: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 64: break;
          case 3: 
            { return FormulaEngineElementTypes.IDENTIFIER;
            } 
            // fall through
          case 65: break;
          case 4: 
            { return FormulaEngineElementTypes.NUMBER_INTEGER;
            } 
            // fall through
          case 66: break;
          case 5: 
            { return FormulaEngineElementTypes.SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 67: break;
          case 6: 
            { return FormulaEngineElementTypes.DOUBLE_QUOTED_STRING;
            } 
            // fall through
          case 68: break;
          case 7: 
            { return FormulaEngineElementTypes.LEFT_PARENTHESIS;
            } 
            // fall through
          case 69: break;
          case 8: 
            { return FormulaEngineElementTypes.RIGHT_PARENTHESIS;
            } 
            // fall through
          case 70: break;
          case 9: 
            { return FormulaEngineElementTypes.LEFT_CURLY_BRACE;
            } 
            // fall through
          case 71: break;
          case 10: 
            { return FormulaEngineElementTypes.RIGHT_CURLY_BRACE;
            } 
            // fall through
          case 72: break;
          case 11: 
            { return FormulaEngineElementTypes.LEFT_BRACKET;
            } 
            // fall through
          case 73: break;
          case 12: 
            { return FormulaEngineElementTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 74: break;
          case 13: 
            { return FormulaEngineElementTypes.OPERATOR_ASSIGNMENT;
            } 
            // fall through
          case 75: break;
          case 14: 
            { return FormulaEngineElementTypes.OPERATOR_MODULO;
            } 
            // fall through
          case 76: break;
          case 15: 
            { return FormulaEngineElementTypes.OPERATOR_NEGATION;
            } 
            // fall through
          case 77: break;
          case 16: 
            { return FormulaEngineElementTypes.OPERATOR_PLUS;
            } 
            // fall through
          case 78: break;
          case 17: 
            { return FormulaEngineElementTypes.COMMA;
            } 
            // fall through
          case 79: break;
          case 18: 
            { return FormulaEngineElementTypes.LINE_COMMENT;
            } 
            // fall through
          case 80: break;
          case 19: 
            { return FormulaEngineElementTypes.OPERATOR_AND;
            } 
            // fall through
          case 81: break;
          case 20: 
            { return FormulaEngineElementTypes.OPERATOR_EQUAL;
            } 
            // fall through
          case 82: break;
          case 21: 
            { return FormulaEngineElementTypes.OPERATOR_NOTEQUAL;
            } 
            // fall through
          case 83: break;
          case 22: 
            { return FormulaEngineElementTypes.OPERATOR_OR;
            } 
            // fall through
          case 84: break;
          case 23: 
            { return FormulaEngineElementTypes.KEYWORD_IF;
            } 
            // fall through
          case 85: break;
          case 24: 
            { return FormulaEngineElementTypes.TYPE_ANY;
            } 
            // fall through
          case 86: break;
          case 25: 
            { return FormulaEngineElementTypes.KEYWORD_FOR;
            } 
            // fall through
          case 87: break;
          case 26: 
            { return FormulaEngineElementTypes.KEYWORD_SEQ;
            } 
            // fall through
          case 88: break;
          case 27: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_NA;
            } 
            // fall through
          case 89: break;
          case 28: 
            { return FormulaEngineElementTypes.BLOCK_COMMENT;
            } 
            // fall through
          case 90: break;
          case 29: 
            { return FormulaEngineElementTypes.TYPE_LIST;
            } 
            // fall through
          case 91: break;
          case 30: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_LEN;
            } 
            // fall through
          case 92: break;
          case 31: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_OUT;
            } 
            // fall through
          case 93: break;
          case 32: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_ELT;
            } 
            // fall through
          case 94: break;
          case 33: 
            { return FormulaEngineElementTypes.KEYWORD_ELSE;
            } 
            // fall through
          case 95: break;
          case 34: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_STR;
            } 
            // fall through
          case 96: break;
          case 35: 
            { return FormulaEngineElementTypes.TYPE_DICT;
            } 
            // fall through
          case 97: break;
          case 36: 
            { return FormulaEngineElementTypes.VISIBILITY_LOCAL;
            } 
            // fall through
          case 98: break;
          case 37: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_LOAD;
            } 
            // fall through
          case 99: break;
          case 38: 
            { return FormulaEngineElementTypes.TYPE_FLOAT;
            } 
            // fall through
          case 100: break;
          case 39: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DATE;
            } 
            // fall through
          case 101: break;
          case 40: 
            { return FormulaEngineElementTypes.KEYWORD_WHILE;
            } 
            // fall through
          case 102: break;
          case 41: 
            { return FormulaEngineElementTypes.VISIBILITY_GLOBAL;
            } 
            // fall through
          case 103: break;
          case 42: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_FLOAT;
            } 
            // fall through
          case 104: break;
          case 43: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_FIRST;
            } 
            // fall through
          case 105: break;
          case 44: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_NA;
            } 
            // fall through
          case 106: break;
          case 45: 
            { return FormulaEngineElementTypes.KEYWORD_RETURN;
            } 
            // fall through
          case 107: break;
          case 46: 
            { return FormulaEngineElementTypes.TYPE_STRING;
            } 
            // fall through
          case 108: break;
          case 47: 
            { return FormulaEngineElementTypes.TYPE_INTEGER;
            } 
            // fall through
          case 109: break;
          case 48: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_REMOVE;
            } 
            // fall through
          case 110: break;
          case 49: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_STATUS;
            } 
            // fall through
          case 111: break;
          case 50: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_KERNEL;
            } 
            // fall through
          case 112: break;
          case 51: 
            { return FormulaEngineElementTypes.KEYWORD_FUNCTION;
            } 
            // fall through
          case 113: break;
          case 52: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_INTEGER;
            } 
            // fall through
          case 114: break;
          case 53: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_LIST;
            } 
            // fall through
          case 115: break;
          case 54: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DAYDIFF;
            } 
            // fall through
          case 116: break;
          case 55: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DAYPLUS;
            } 
            // fall through
          case 117: break;
          case 56: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DATETIME;
            } 
            // fall through
          case 118: break;
          case 57: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_GET;
            } 
            // fall through
          case 119: break;
          case 58: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_PUT;
            } 
            // fall through
          case 120: break;
          case 59: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_ATTRIBUTE;
            } 
            // fall through
          case 121: break;
          case 60: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_STRING;
            } 
            // fall through
          case 122: break;
          case 61: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_KEYS;
            } 
            // fall through
          case 123: break;
          case 62: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_ISKEY;
            } 
            // fall through
          case 124: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
