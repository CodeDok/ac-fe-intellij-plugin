/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package de.cofinpro.intellij.acfeplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import de.cofinpro.intellij.acfeplugin.psi.FormulaEngineElementType;
import de.cofinpro.intellij.acfeplugin.psi.FormulaEngineElementTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>FormulaEngine.flex</tt>
 */
public class FormulaEngineLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\6\1\0\1\1\1\6\22\0\1\1\1\23\1\7\1\0\1\50\1\22\1\20\1\4\1\12\1"+
    "\13\1\11\1\25\1\60\2\0\1\10\12\3\3\0\1\21\3\0\1\52\14\2\1\51\14\2\1\16\1\5"+
    "\1\17\1\0\1\55\1\0\1\40\1\42\1\31\1\44\1\36\1\26\1\41\1\47\1\33\1\2\1\56\1"+
    "\37\1\53\1\30\1\34\1\54\1\2\1\35\1\43\1\32\1\27\1\57\1\46\1\2\1\45\1\2\1\14"+
    "\1\24\1\15\202\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\1\1\15"+
    "\1\16\1\17\1\1\1\20\14\3\1\1\1\3\1\21"+
    "\2\5\2\6\1\22\1\0\1\23\1\24\1\25\4\3"+
    "\1\26\20\3\1\0\1\3\1\0\2\3\1\27\14\3"+
    "\1\30\11\3\1\31\1\3\1\32\7\3\1\33\2\3"+
    "\1\34\1\35\1\36\2\3\1\37\2\3\1\40\2\3"+
    "\1\41\10\3\1\42\6\3\1\43\1\44\4\3\1\45"+
    "\3\3\1\46\3\3\1\47\1\50\1\3\1\51\2\3"+
    "\1\52\2\3\1\53\1\54\12\3\1\55\2\3\1\56"+
    "\1\3\1\57\7\3\1\60\1\61\1\62\1\63\3\3"+
    "\1\64\1\65\6\3\1\66\1\3\1\67\1\70\1\3"+
    "\1\71\1\72\1\3\1\73\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\142\0\223\0\304\0\365\0\u0126"+
    "\0\u0157\0\142\0\142\0\142\0\142\0\142\0\142\0\u0188"+
    "\0\u01b9\0\142\0\142\0\u01ea\0\142\0\u021b\0\u024c\0\u027d"+
    "\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405"+
    "\0\u0436\0\u0467\0\u0498\0\142\0\142\0\u04c9\0\u04fa\0\142"+
    "\0\u052b\0\u055c\0\142\0\142\0\142\0\u058d\0\u05be\0\u05ef"+
    "\0\u0620\0\223\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746"+
    "\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce"+
    "\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\223"+
    "\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad"+
    "\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\223\0\u0ca2\0\u0cd3\0\u0d04"+
    "\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\142\0\u0e5b"+
    "\0\142\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2"+
    "\0\142\0\u0fe3\0\u1014\0\142\0\223\0\223\0\u1045\0\u1076"+
    "\0\142\0\u10a7\0\u10d8\0\142\0\u1109\0\u113a\0\223\0\u116b"+
    "\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3"+
    "\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\223\0\142"+
    "\0\u144a\0\u147b\0\u14ac\0\u14dd\0\142\0\u150e\0\u153f\0\u1570"+
    "\0\223\0\u15a1\0\u15d2\0\u1603\0\142\0\142\0\u1634\0\142"+
    "\0\u1665\0\u1696\0\223\0\u16c7\0\u16f8\0\223\0\223\0\u1729"+
    "\0\u175a\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1"+
    "\0\u18e2\0\u1913\0\u1944\0\u1975\0\142\0\u19a6\0\142\0\u19d7"+
    "\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\142\0\223"+
    "\0\142\0\142\0\u1b2e\0\u1b5f\0\u1b90\0\142\0\142\0\u1bc1"+
    "\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\142\0\u1ce7\0\142"+
    "\0\142\0\u1d18\0\142\0\142\0\u1d49\0\142\0\142";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\3\1\4\1\10"+
    "\1\11\1\3\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\4\5"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\5"+
    "\1\36\1\37\1\5\1\40\1\41\1\42\5\5\1\43"+
    "\1\5\1\44\61\3\63\0\2\5\22\0\22\5\1\0"+
    "\7\5\4\0\1\6\55\0\4\7\1\45\1\46\1\0"+
    "\52\7\5\10\1\47\1\0\1\50\51\10\10\0\1\51"+
    "\1\52\67\0\1\53\61\0\1\54\63\0\1\55\36\0"+
    "\2\5\22\0\1\5\1\56\3\5\1\57\1\60\2\5"+
    "\1\61\10\5\1\0\7\5\3\0\2\5\22\0\1\62"+
    "\1\5\1\63\12\5\1\64\4\5\1\0\7\5\3\0"+
    "\2\5\22\0\1\5\1\65\20\5\1\0\7\5\3\0"+
    "\2\5\22\0\10\5\1\66\11\5\1\0\7\5\3\0"+
    "\2\5\22\0\11\5\1\67\10\5\1\0\7\5\3\0"+
    "\2\5\22\0\5\5\1\70\1\71\1\5\1\72\11\5"+
    "\1\0\7\5\3\0\2\5\22\0\2\5\1\73\1\5"+
    "\1\74\15\5\1\0\7\5\3\0\2\5\22\0\11\5"+
    "\1\75\10\5\1\0\7\5\3\0\2\5\22\0\4\5"+
    "\1\76\15\5\1\0\7\5\3\0\2\5\22\0\5\5"+
    "\1\77\4\5\1\100\7\5\1\0\7\5\3\0\2\5"+
    "\22\0\21\5\1\101\1\0\7\5\3\0\2\5\22\0"+
    "\12\5\1\102\7\5\1\0\7\5\52\0\1\103\11\0"+
    "\2\5\22\0\10\5\1\104\11\5\1\0\7\5\1\0"+
    "\61\7\61\10\6\51\1\0\52\51\11\52\1\105\47\52"+
    "\2\0\2\5\22\0\2\5\1\106\17\5\1\0\7\5"+
    "\3\0\2\5\22\0\7\5\1\107\12\5\1\0\7\5"+
    "\3\0\2\5\22\0\7\5\1\110\12\5\1\0\7\5"+
    "\3\0\2\5\22\0\6\5\1\111\13\5\1\0\7\5"+
    "\3\0\2\5\22\0\4\5\1\112\15\5\1\0\7\5"+
    "\3\0\2\5\22\0\22\5\1\0\4\5\1\113\2\5"+
    "\3\0\2\5\22\0\4\5\1\114\15\5\1\0\7\5"+
    "\3\0\2\5\22\0\4\5\1\115\15\5\1\0\2\5"+
    "\1\116\4\5\3\0\2\5\22\0\4\5\1\117\10\5"+
    "\1\120\4\5\1\0\7\5\3\0\2\5\22\0\15\5"+
    "\1\121\4\5\1\0\7\5\3\0\2\5\22\0\3\5"+
    "\1\122\6\5\1\123\7\5\1\0\7\5\3\0\2\5"+
    "\22\0\2\5\1\124\17\5\1\0\7\5\3\0\2\5"+
    "\22\0\17\5\1\125\2\5\1\0\7\5\3\0\2\5"+
    "\22\0\4\5\1\126\15\5\1\0\7\5\3\0\2\5"+
    "\22\0\6\5\1\127\13\5\1\0\7\5\3\0\2\5"+
    "\22\0\7\5\1\130\2\5\1\131\7\5\1\0\7\5"+
    "\3\0\2\5\22\0\3\5\1\132\16\5\1\0\7\5"+
    "\3\0\2\5\22\0\4\5\1\133\12\5\1\134\2\5"+
    "\1\0\7\5\3\0\2\5\22\0\5\5\1\135\14\5"+
    "\1\0\7\5\3\0\2\5\22\0\15\5\1\136\4\5"+
    "\1\0\7\5\53\0\1\137\10\0\2\5\22\0\7\5"+
    "\1\140\12\5\1\0\7\5\1\0\10\52\1\141\1\105"+
    "\47\52\2\0\2\5\22\0\3\5\1\142\16\5\1\0"+
    "\7\5\3\0\2\5\22\0\15\5\1\143\4\5\1\0"+
    "\7\5\3\0\2\5\22\0\12\5\1\144\7\5\1\0"+
    "\7\5\3\0\2\5\22\0\10\5\1\145\11\5\1\0"+
    "\7\5\3\0\2\5\22\0\2\5\1\146\6\5\1\147"+
    "\3\5\1\150\4\5\1\0\7\5\3\0\2\5\6\0"+
    "\1\151\13\0\22\5\1\0\7\5\3\0\2\5\22\0"+
    "\1\5\1\152\20\5\1\0\7\5\3\0\2\5\22\0"+
    "\6\5\1\153\13\5\1\0\7\5\3\0\2\5\6\0"+
    "\1\154\13\0\22\5\1\0\7\5\3\0\2\5\22\0"+
    "\10\5\1\155\11\5\1\0\7\5\3\0\2\5\22\0"+
    "\4\5\1\156\15\5\1\0\7\5\3\0\2\5\22\0"+
    "\12\5\1\157\7\5\1\0\7\5\3\0\2\5\22\0"+
    "\16\5\1\160\3\5\1\0\7\5\3\0\2\5\6\0"+
    "\1\161\13\0\22\5\1\0\7\5\3\0\2\5\22\0"+
    "\7\5\1\162\12\5\1\0\7\5\3\0\2\5\22\0"+
    "\14\5\1\163\5\5\1\0\7\5\3\0\2\5\6\0"+
    "\1\164\13\0\5\5\1\165\14\5\1\0\7\5\3\0"+
    "\2\5\22\0\4\5\1\166\15\5\1\0\7\5\3\0"+
    "\2\5\22\0\4\5\1\167\15\5\1\0\7\5\3\0"+
    "\2\5\22\0\10\5\1\170\11\5\1\0\7\5\3\0"+
    "\2\5\22\0\16\5\1\171\3\5\1\0\3\5\1\172"+
    "\3\5\3\0\2\5\22\0\11\5\1\173\10\5\1\0"+
    "\7\5\3\0\2\5\22\0\21\5\1\174\1\0\7\5"+
    "\3\0\2\5\22\0\2\5\1\175\17\5\1\0\7\5"+
    "\3\0\2\5\22\0\4\5\1\176\15\5\1\0\7\5"+
    "\3\0\2\5\22\0\4\5\1\177\15\5\1\0\7\5"+
    "\3\0\2\5\22\0\4\5\1\200\15\5\1\0\7\5"+
    "\3\0\2\5\22\0\13\5\1\201\6\5\1\0\7\5"+
    "\3\0\2\5\22\0\12\5\1\202\7\5\1\0\7\5"+
    "\3\0\2\5\22\0\5\5\1\203\14\5\1\0\7\5"+
    "\3\0\2\5\22\0\4\5\1\204\15\5\1\0\7\5"+
    "\3\0\2\5\22\0\7\5\1\205\12\5\1\0\7\5"+
    "\3\0\2\5\22\0\22\5\1\0\6\5\1\206\3\0"+
    "\2\5\22\0\11\5\1\207\10\5\1\0\7\5\3\0"+
    "\2\5\6\0\1\210\13\0\22\5\1\0\7\5\3\0"+
    "\2\5\22\0\5\5\1\211\14\5\1\0\7\5\3\0"+
    "\2\5\22\0\12\5\1\212\7\5\1\0\7\5\3\0"+
    "\2\5\22\0\2\5\1\213\17\5\1\0\7\5\3\0"+
    "\2\5\22\0\1\5\1\214\20\5\1\0\7\5\3\0"+
    "\2\5\6\0\1\215\13\0\4\5\1\216\15\5\1\0"+
    "\7\5\3\0\2\5\22\0\5\5\1\217\14\5\1\0"+
    "\7\5\3\0\2\5\22\0\11\5\1\220\10\5\1\0"+
    "\7\5\3\0\2\5\22\0\10\5\1\221\11\5\1\0"+
    "\7\5\3\0\2\5\22\0\22\5\1\0\4\5\1\222"+
    "\2\5\3\0\2\5\22\0\10\5\1\223\11\5\1\0"+
    "\7\5\3\0\2\5\22\0\5\5\1\224\14\5\1\0"+
    "\7\5\3\0\2\5\6\0\1\225\13\0\22\5\1\0"+
    "\7\5\3\0\2\5\6\0\1\226\13\0\22\5\1\0"+
    "\7\5\3\0\2\5\22\0\10\5\1\227\11\5\1\0"+
    "\7\5\3\0\2\5\6\0\1\230\13\0\22\5\1\0"+
    "\7\5\3\0\2\5\22\0\15\5\1\231\4\5\1\0"+
    "\7\5\3\0\2\5\22\0\7\5\1\232\12\5\1\0"+
    "\7\5\3\0\2\5\22\0\2\5\1\233\17\5\1\0"+
    "\7\5\3\0\2\5\22\0\10\5\1\234\11\5\1\0"+
    "\7\5\3\0\2\5\22\0\14\5\1\235\5\5\1\0"+
    "\7\5\3\0\2\5\22\0\11\5\1\236\10\5\1\0"+
    "\7\5\3\0\2\5\22\0\13\5\1\237\6\5\1\0"+
    "\7\5\3\0\2\5\22\0\15\5\1\240\4\5\1\0"+
    "\7\5\3\0\2\5\22\0\5\5\1\241\14\5\1\0"+
    "\7\5\3\0\2\5\22\0\1\242\21\5\1\0\7\5"+
    "\3\0\2\5\22\0\1\5\1\243\20\5\1\0\7\5"+
    "\3\0\2\5\22\0\5\5\1\244\5\5\1\245\6\5"+
    "\1\0\3\5\1\246\1\5\1\247\1\5\3\0\2\5"+
    "\22\0\11\5\1\250\10\5\1\0\7\5\3\0\2\5"+
    "\22\0\6\5\1\251\13\5\1\0\7\5\3\0\2\5"+
    "\22\0\7\5\1\252\12\5\1\0\7\5\3\0\2\5"+
    "\22\0\4\5\1\253\15\5\1\0\7\5\3\0\2\5"+
    "\22\0\5\5\1\254\14\5\1\0\7\5\3\0\2\5"+
    "\6\0\1\255\13\0\22\5\1\0\7\5\3\0\2\5"+
    "\22\0\1\5\1\256\20\5\1\0\7\5\3\0\2\5"+
    "\6\0\1\257\13\0\22\5\1\0\7\5\3\0\2\5"+
    "\22\0\22\5\1\0\2\5\1\260\4\5\3\0\2\5"+
    "\22\0\1\261\21\5\1\0\7\5\3\0\2\5\22\0"+
    "\15\5\1\262\4\5\1\0\7\5\3\0\2\5\22\0"+
    "\15\5\1\263\4\5\1\0\7\5\3\0\2\5\22\0"+
    "\10\5\1\264\11\5\1\0\7\5\3\0\2\5\22\0"+
    "\1\5\1\265\20\5\1\0\7\5\3\0\2\5\22\0"+
    "\10\5\1\266\11\5\1\0\7\5\3\0\2\5\6\0"+
    "\1\267\13\0\22\5\1\0\7\5\3\0\2\5\22\0"+
    "\2\5\1\270\17\5\1\0\7\5\3\0\2\5\6\0"+
    "\1\271\13\0\22\5\1\0\7\5\3\0\2\5\6\0"+
    "\1\272\13\0\22\5\1\0\7\5\3\0\2\5\22\0"+
    "\2\5\1\273\17\5\1\0\7\5\3\0\2\5\22\0"+
    "\4\5\1\274\15\5\1\0\7\5\3\0\2\5\22\0"+
    "\10\5\1\275\11\5\1\0\7\5\3\0\2\5\6\0"+
    "\1\276\13\0\22\5\1\0\7\5\3\0\2\5\6\0"+
    "\1\277\13\0\22\5\1\0\7\5\3\0\2\5\22\0"+
    "\22\5\1\0\5\5\1\300\1\5\3\0\2\5\22\0"+
    "\4\5\1\301\15\5\1\0\7\5\3\0\2\5\22\0"+
    "\4\5\1\302\15\5\1\0\7\5\3\0\2\5\22\0"+
    "\17\5\1\303\2\5\1\0\7\5\3\0\2\5\22\0"+
    "\13\5\1\304\6\5\1\0\7\5\3\0\2\5\22\0"+
    "\10\5\1\305\11\5\1\0\7\5\3\0\2\5\6\0"+
    "\1\306\13\0\22\5\1\0\7\5\3\0\2\5\22\0"+
    "\10\5\1\307\11\5\1\0\7\5\3\0\2\5\6\0"+
    "\1\310\13\0\22\5\1\0\7\5\3\0\2\5\6\0"+
    "\1\311\13\0\22\5\1\0\7\5\3\0\2\5\22\0"+
    "\15\5\1\312\4\5\1\0\7\5\3\0\2\5\6\0"+
    "\1\313\13\0\22\5\1\0\7\5\3\0\2\5\6\0"+
    "\1\314\13\0\22\5\1\0\7\5\3\0\2\5\22\0"+
    "\17\5\1\315\2\5\1\0\7\5\3\0\2\5\6\0"+
    "\1\316\13\0\22\5\1\0\7\5\3\0\2\5\6\0"+
    "\1\317\13\0\22\5\1\0\7\5\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7546];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\5\1\6\11\2\1\2\11\1\1\1\11"+
    "\16\1\2\11\2\1\1\11\1\1\1\0\3\11\25\1"+
    "\1\0\1\1\1\0\31\1\1\11\1\1\1\11\7\1"+
    "\1\11\2\1\1\11\4\1\1\11\2\1\1\11\23\1"+
    "\1\11\4\1\1\11\7\1\2\11\1\1\1\11\24\1"+
    "\1\11\1\1\1\11\7\1\1\11\1\1\2\11\3\1"+
    "\2\11\6\1\1\11\1\1\2\11\1\1\2\11\1\1"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FormulaEngineLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 61: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 62: break;
          case 3: 
            { return FormulaEngineElementTypes.IDENTIFIER;
            } 
            // fall through
          case 63: break;
          case 4: 
            { return FormulaEngineElementTypes.NUMBER_INTEGER;
            } 
            // fall through
          case 64: break;
          case 5: 
            { return FormulaEngineElementTypes.SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 65: break;
          case 6: 
            { return FormulaEngineElementTypes.DOUBLE_QUOTED_STRING;
            } 
            // fall through
          case 66: break;
          case 7: 
            { return FormulaEngineElementTypes.LEFT_PARENTHESIS;
            } 
            // fall through
          case 67: break;
          case 8: 
            { return FormulaEngineElementTypes.RIGHT_PARENTHESIS;
            } 
            // fall through
          case 68: break;
          case 9: 
            { return FormulaEngineElementTypes.LEFT_CURLY_BRACE;
            } 
            // fall through
          case 69: break;
          case 10: 
            { return FormulaEngineElementTypes.RIGHT_CURLY_BRACE;
            } 
            // fall through
          case 70: break;
          case 11: 
            { return FormulaEngineElementTypes.LEFT_BRACKET;
            } 
            // fall through
          case 71: break;
          case 12: 
            { return FormulaEngineElementTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 72: break;
          case 13: 
            { return FormulaEngineElementTypes.OPERATOR_ASSIGNMENT;
            } 
            // fall through
          case 73: break;
          case 14: 
            { return FormulaEngineElementTypes.OPERATOR_MODULO;
            } 
            // fall through
          case 74: break;
          case 15: 
            { return FormulaEngineElementTypes.OPERATOR_NEGATION;
            } 
            // fall through
          case 75: break;
          case 16: 
            { return FormulaEngineElementTypes.OPERATOR_PLUS;
            } 
            // fall through
          case 76: break;
          case 17: 
            { return FormulaEngineElementTypes.COMMA;
            } 
            // fall through
          case 77: break;
          case 18: 
            { return FormulaEngineElementTypes.LINE_COMMENT;
            } 
            // fall through
          case 78: break;
          case 19: 
            { return FormulaEngineElementTypes.OPERATOR_AND;
            } 
            // fall through
          case 79: break;
          case 20: 
            { return FormulaEngineElementTypes.OPERATOR_EQUAL;
            } 
            // fall through
          case 80: break;
          case 21: 
            { return FormulaEngineElementTypes.OPERATOR_OR;
            } 
            // fall through
          case 81: break;
          case 22: 
            { return FormulaEngineElementTypes.KEYWORD_IF;
            } 
            // fall through
          case 82: break;
          case 23: 
            { return FormulaEngineElementTypes.KEYWORD_FOR;
            } 
            // fall through
          case 83: break;
          case 24: 
            { return FormulaEngineElementTypes.TYPE_ANY;
            } 
            // fall through
          case 84: break;
          case 25: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_NA;
            } 
            // fall through
          case 85: break;
          case 26: 
            { return FormulaEngineElementTypes.BLOCK_COMMENT;
            } 
            // fall through
          case 86: break;
          case 27: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_OUT;
            } 
            // fall through
          case 87: break;
          case 28: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_ELT;
            } 
            // fall through
          case 88: break;
          case 29: 
            { return FormulaEngineElementTypes.KEYWORD_ELSE;
            } 
            // fall through
          case 89: break;
          case 30: 
            { return FormulaEngineElementTypes.TYPE_LIST;
            } 
            // fall through
          case 90: break;
          case 31: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_LEN;
            } 
            // fall through
          case 91: break;
          case 32: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_STR;
            } 
            // fall through
          case 92: break;
          case 33: 
            { return FormulaEngineElementTypes.TYPE_DICT;
            } 
            // fall through
          case 93: break;
          case 34: 
            { return FormulaEngineElementTypes.TYPE_FLOAT;
            } 
            // fall through
          case 94: break;
          case 35: 
            { return FormulaEngineElementTypes.VISIBILITY_LOCAL;
            } 
            // fall through
          case 95: break;
          case 36: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_LOAD;
            } 
            // fall through
          case 96: break;
          case 37: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DATE;
            } 
            // fall through
          case 97: break;
          case 38: 
            { return FormulaEngineElementTypes.KEYWORD_WHILE;
            } 
            // fall through
          case 98: break;
          case 39: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_FIRST;
            } 
            // fall through
          case 99: break;
          case 40: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_FLOAT;
            } 
            // fall through
          case 100: break;
          case 41: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_NA;
            } 
            // fall through
          case 101: break;
          case 42: 
            { return FormulaEngineElementTypes.KEYWORD_RETURN;
            } 
            // fall through
          case 102: break;
          case 43: 
            { return FormulaEngineElementTypes.VISIBILITY_GLOBAL;
            } 
            // fall through
          case 103: break;
          case 44: 
            { return FormulaEngineElementTypes.TYPE_STRING;
            } 
            // fall through
          case 104: break;
          case 45: 
            { return FormulaEngineElementTypes.TYPE_INTEGER;
            } 
            // fall through
          case 105: break;
          case 46: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_REMOVE;
            } 
            // fall through
          case 106: break;
          case 47: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_STATUS;
            } 
            // fall through
          case 107: break;
          case 48: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_KERNEL;
            } 
            // fall through
          case 108: break;
          case 49: 
            { return FormulaEngineElementTypes.KEYWORD_FUNCTION;
            } 
            // fall through
          case 109: break;
          case 50: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_INTEGER;
            } 
            // fall through
          case 110: break;
          case 51: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_LIST;
            } 
            // fall through
          case 111: break;
          case 52: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DAYDIFF;
            } 
            // fall through
          case 112: break;
          case 53: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DAYPLUS;
            } 
            // fall through
          case 113: break;
          case 54: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DATETIME;
            } 
            // fall through
          case 114: break;
          case 55: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_GET;
            } 
            // fall through
          case 115: break;
          case 56: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_PUT;
            } 
            // fall through
          case 116: break;
          case 57: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_STRING;
            } 
            // fall through
          case 117: break;
          case 58: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_ATTRIBUTE;
            } 
            // fall through
          case 118: break;
          case 59: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_KEYS;
            } 
            // fall through
          case 119: break;
          case 60: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_ISKEY;
            } 
            // fall through
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
