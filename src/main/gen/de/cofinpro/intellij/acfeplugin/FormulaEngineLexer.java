/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package de.cofinpro.intellij.acfeplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import de.cofinpro.intellij.acfeplugin.psi.FormulaEngineElementType;
import de.cofinpro.intellij.acfeplugin.psi.FormulaEngineElementTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>FormulaEngine.flex</tt>
 */
public class FormulaEngineLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\6\1\0\1\1\1\6\22\0\1\1\1\27\1\7\1\0\1\56\1\26\1\20\1\4\1\12\1"+
    "\13\1\11\1\24\1\71\1\22\1\0\1\10\12\3\1\73\1\72\1\25\1\21\1\23\1\74\1\0\1"+
    "\60\2\2\1\63\11\2\1\57\1\62\4\2\1\61\4\2\1\64\1\2\1\16\1\5\1\17\1\0\1\66\1"+
    "\0\1\34\1\36\1\33\1\37\1\41\1\44\1\35\1\55\1\42\1\2\1\51\1\31\1\43\1\45\1"+
    "\32\1\65\1\53\1\46\1\47\1\40\1\52\1\70\1\54\1\67\1\50\1\2\1\14\1\30\1\15\202"+
    "\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\1"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\1"+
    "\20\3\1\1\1\26\1\27\1\30\1\31\2\5\2\6"+
    "\1\32\1\0\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\3\3\1\45\6\3\1\46"+
    "\4\3\1\47\16\3\3\0\7\3\1\50\1\51\14\3"+
    "\1\52\6\3\1\53\4\3\1\54\1\0\1\55\2\3"+
    "\1\56\1\57\1\60\1\61\3\3\1\62\3\3\1\63"+
    "\1\64\1\65\4\3\1\66\6\3\1\67\5\3\1\0"+
    "\1\70\1\71\2\3\1\72\1\73\10\3\1\74\10\3"+
    "\1\75\1\3\1\0\1\3\1\76\6\3\1\77\1\3"+
    "\1\100\1\101\1\3\1\102\2\3\1\103\1\104\11\3"+
    "\1\105\1\106\3\3\1\107\1\110\1\111\1\112\5\3"+
    "\1\113\1\114\1\115\1\116\1\117\1\3\1\120\5\3"+
    "\1\121\1\3\1\122\2\3\1\123\1\124\1\125\1\3"+
    "\1\126\1\127";

  private static int [] zzUnpackAction() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\172\0\267\0\364\0\u0131\0\u016e"+
    "\0\u01ab\0\172\0\172\0\172\0\172\0\172\0\172\0\172"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\172\0\u0356"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e"+
    "\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726"+
    "\0\u0763\0\u07a0\0\172\0\172\0\172\0\172\0\172\0\u07dd"+
    "\0\u081a\0\172\0\u0857\0\u0894\0\172\0\172\0\172\0\172"+
    "\0\172\0\172\0\172\0\172\0\172\0\172\0\u08d1\0\u090e"+
    "\0\u094b\0\267\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9"+
    "\0\267\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\267\0\u0bea\0\u0c27"+
    "\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f"+
    "\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7"+
    "\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\267\0\267"+
    "\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d"+
    "\0\u138a\0\u13c7\0\u1404\0\u1441\0\267\0\u147e\0\u14bb\0\u14f8"+
    "\0\u1535\0\u1572\0\u15af\0\267\0\u15ec\0\u1629\0\u1666\0\u16a3"+
    "\0\172\0\u16e0\0\172\0\u171d\0\u175a\0\172\0\267\0\172"+
    "\0\267\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8\0\u1905"+
    "\0\267\0\172\0\267\0\u1942\0\u197f\0\u19bc\0\u19f9\0\172"+
    "\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\172\0\u1ba4"+
    "\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\267\0\172\0\u1d12"+
    "\0\u1d4f\0\267\0\172\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80"+
    "\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u1fee\0\u202b\0\u2068"+
    "\0\u20a5\0\u20e2\0\u211f\0\u215c\0\267\0\u2199\0\u21d6\0\u2213"+
    "\0\267\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381\0\172"+
    "\0\u23be\0\172\0\172\0\u23fb\0\267\0\u2438\0\u2475\0\u24b2"+
    "\0\267\0\u24ef\0\u252c\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u265d"+
    "\0\u269a\0\u26d7\0\267\0\u2714\0\u2751\0\u278e\0\u27cb\0\172"+
    "\0\172\0\172\0\172\0\u2808\0\u2845\0\u2882\0\u28bf\0\u28fc"+
    "\0\u2939\0\172\0\172\0\172\0\172\0\u2976\0\267\0\u29b3"+
    "\0\u29f0\0\u2a2d\0\u2a6a\0\u2aa7\0\172\0\u2ae4\0\172\0\u2b21"+
    "\0\u2b5e\0\172\0\172\0\172\0\u2b9b\0\172\0\172";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\3\1\4\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\5\1\41\1\42\1\43\1\44\1\5\1\45\1\46"+
    "\1\5\1\47\2\5\1\50\1\51\1\52\12\5\1\53"+
    "\1\54\1\55\1\56\75\3\77\0\2\5\25\0\25\5"+
    "\1\0\12\5\7\0\1\6\71\0\4\7\1\57\1\60"+
    "\1\0\66\7\5\10\1\61\1\0\1\62\65\10\10\0"+
    "\1\63\1\64\103\0\1\65\75\0\1\66\74\0\1\67"+
    "\1\70\73\0\1\71\74\0\1\72\2\0\1\73\71\0"+
    "\1\74\74\0\1\75\103\0\1\76\46\0\2\5\25\0"+
    "\1\5\1\77\6\5\1\100\1\101\13\5\1\0\12\5"+
    "\6\0\2\5\25\0\15\5\1\102\3\5\1\103\3\5"+
    "\1\0\12\5\6\0\2\5\25\0\3\5\1\104\21\5"+
    "\1\0\12\5\6\0\2\5\25\0\7\5\1\105\4\5"+
    "\1\106\10\5\1\0\12\5\6\0\2\5\25\0\1\107"+
    "\24\5\1\0\12\5\6\0\2\5\25\0\15\5\1\110"+
    "\7\5\1\0\12\5\6\0\2\5\25\0\1\5\1\111"+
    "\1\5\1\112\4\5\1\113\1\114\13\5\1\0\12\5"+
    "\6\0\2\5\25\0\1\115\24\5\1\0\12\5\6\0"+
    "\2\5\25\0\13\5\1\116\1\117\1\5\1\120\6\5"+
    "\1\0\12\5\6\0\2\5\25\0\3\5\1\121\21\5"+
    "\1\0\12\5\6\0\2\5\25\0\1\122\1\123\7\5"+
    "\1\124\7\5\1\125\3\5\1\0\12\5\6\0\2\5"+
    "\25\0\10\5\1\126\14\5\1\0\12\5\6\0\2\5"+
    "\25\0\7\5\1\127\1\130\12\5\1\131\1\5\1\0"+
    "\12\5\6\0\2\5\25\0\10\5\1\132\14\5\1\0"+
    "\12\5\6\0\2\5\25\0\24\5\1\133\1\0\12\5"+
    "\6\0\2\5\25\0\3\5\1\134\21\5\1\0\12\5"+
    "\63\0\1\135\1\0\1\136\13\0\75\7\75\10\6\63"+
    "\1\0\66\63\11\64\1\137\63\64\2\0\2\5\25\0"+
    "\2\5\1\140\1\141\21\5\1\0\12\5\6\0\2\5"+
    "\25\0\14\5\1\142\10\5\1\0\12\5\6\0\2\5"+
    "\25\0\16\5\1\143\6\5\1\0\12\5\6\0\2\5"+
    "\25\0\7\5\1\144\15\5\1\0\12\5\6\0\2\5"+
    "\25\0\16\5\1\145\6\5\1\0\12\5\6\0\2\5"+
    "\25\0\7\5\1\146\15\5\1\0\12\5\6\0\2\5"+
    "\25\0\6\5\1\147\10\5\1\150\5\5\1\0\12\5"+
    "\6\0\2\5\25\0\1\5\1\151\23\5\1\0\12\5"+
    "\6\0\2\5\25\0\10\5\1\152\14\5\1\0\12\5"+
    "\6\0\2\5\25\0\7\5\1\153\7\5\1\154\5\5"+
    "\1\0\12\5\6\0\2\5\25\0\13\5\1\155\11\5"+
    "\1\0\12\5\6\0\2\5\25\0\2\5\1\156\22\5"+
    "\1\0\12\5\6\0\2\5\25\0\7\5\1\157\6\5"+
    "\1\160\6\5\1\0\12\5\6\0\2\5\25\0\7\5"+
    "\1\161\15\5\1\0\12\5\6\0\2\5\25\0\25\5"+
    "\1\0\7\5\1\162\2\5\6\0\2\5\25\0\25\5"+
    "\1\0\10\5\1\163\1\5\6\0\2\5\25\0\1\5"+
    "\1\164\23\5\1\0\12\5\6\0\2\5\25\0\15\5"+
    "\1\165\7\5\1\0\12\5\6\0\2\5\25\0\15\5"+
    "\1\166\7\5\1\0\12\5\6\0\2\5\25\0\14\5"+
    "\1\167\10\5\1\0\12\5\6\0\2\5\25\0\7\5"+
    "\1\170\2\5\1\171\12\5\1\0\12\5\6\0\2\5"+
    "\25\0\3\5\1\172\11\5\1\173\7\5\1\0\12\5"+
    "\6\0\2\5\25\0\22\5\1\174\2\5\1\0\12\5"+
    "\6\0\2\5\25\0\11\5\1\175\13\5\1\0\12\5"+
    "\6\0\2\5\25\0\15\5\1\176\7\5\1\0\12\5"+
    "\6\0\2\5\25\0\11\5\1\177\13\5\1\0\12\5"+
    "\6\0\2\5\25\0\16\5\1\200\6\5\1\0\12\5"+
    "\64\0\1\201\76\0\1\202\12\0\10\64\1\203\1\137"+
    "\63\64\2\0\2\5\25\0\3\5\1\204\21\5\1\0"+
    "\12\5\6\0\2\5\25\0\6\5\1\205\16\5\1\0"+
    "\12\5\6\0\2\5\6\0\1\206\16\0\25\5\1\0"+
    "\12\5\6\0\2\5\25\0\7\5\1\207\15\5\1\0"+
    "\12\5\6\0\2\5\6\0\1\210\16\0\25\5\1\0"+
    "\12\5\6\0\2\5\25\0\10\5\1\211\14\5\1\0"+
    "\12\5\6\0\2\5\25\0\15\5\1\212\7\5\1\0"+
    "\12\5\6\0\2\5\25\0\5\5\1\213\17\5\1\0"+
    "\12\5\6\0\2\5\25\0\3\5\1\214\21\5\1\0"+
    "\12\5\6\0\2\5\25\0\10\5\1\215\14\5\1\0"+
    "\12\5\6\0\2\5\25\0\6\5\1\216\16\5\1\0"+
    "\6\5\1\217\3\5\6\0\2\5\25\0\3\5\1\220"+
    "\21\5\1\0\12\5\6\0\2\5\25\0\7\5\1\221"+
    "\15\5\1\0\12\5\6\0\2\5\6\0\1\222\16\0"+
    "\25\5\1\0\12\5\6\0\2\5\25\0\10\5\1\223"+
    "\14\5\1\0\12\5\6\0\2\5\25\0\10\5\1\224"+
    "\14\5\1\0\12\5\6\0\2\5\25\0\1\225\13\5"+
    "\1\226\1\5\1\227\6\5\1\0\12\5\6\0\2\5"+
    "\6\0\1\230\16\0\25\5\1\0\12\5\6\0\2\5"+
    "\25\0\3\5\1\231\21\5\1\0\12\5\6\0\2\5"+
    "\25\0\16\5\1\232\6\5\1\0\12\5\6\0\2\5"+
    "\25\0\2\5\1\233\22\5\1\0\12\5\6\0\2\5"+
    "\25\0\21\5\1\234\3\5\1\0\12\5\6\0\2\5"+
    "\25\0\1\5\1\235\23\5\1\0\12\5\6\0\2\5"+
    "\25\0\7\5\1\236\15\5\1\0\12\5\6\0\2\5"+
    "\6\0\1\237\16\0\11\5\1\240\13\5\1\0\12\5"+
    "\6\0\2\5\25\0\7\5\1\241\15\5\1\0\12\5"+
    "\6\0\2\5\25\0\14\5\1\242\10\5\1\0\12\5"+
    "\6\0\2\5\25\0\1\243\24\5\1\0\12\5\6\0"+
    "\2\5\25\0\24\5\1\244\1\0\12\5\67\0\1\245"+
    "\13\0\2\5\25\0\1\246\24\5\1\0\12\5\6\0"+
    "\2\5\6\0\1\247\16\0\25\5\1\0\12\5\6\0"+
    "\2\5\25\0\11\5\1\250\13\5\1\0\12\5\6\0"+
    "\2\5\25\0\3\5\1\251\21\5\1\0\12\5\6\0"+
    "\2\5\25\0\20\5\1\252\4\5\1\0\12\5\6\0"+
    "\2\5\6\0\1\253\16\0\7\5\1\254\15\5\1\0"+
    "\12\5\6\0\2\5\25\0\11\5\1\255\13\5\1\0"+
    "\12\5\6\0\2\5\25\0\1\256\24\5\1\0\12\5"+
    "\6\0\2\5\25\0\21\5\1\257\3\5\1\0\12\5"+
    "\6\0\2\5\25\0\4\5\1\260\20\5\1\0\12\5"+
    "\6\0\2\5\25\0\11\5\1\261\13\5\1\0\12\5"+
    "\6\0\2\5\25\0\3\5\1\262\21\5\1\0\12\5"+
    "\6\0\2\5\25\0\7\5\1\263\15\5\1\0\12\5"+
    "\6\0\2\5\25\0\7\5\1\264\15\5\1\0\12\5"+
    "\6\0\2\5\25\0\7\5\1\265\15\5\1\0\12\5"+
    "\6\0\2\5\25\0\7\5\1\266\15\5\1\0\12\5"+
    "\6\0\2\5\25\0\15\5\1\267\7\5\1\0\12\5"+
    "\6\0\2\5\25\0\25\5\1\0\11\5\1\270\6\0"+
    "\2\5\25\0\21\5\1\271\3\5\1\0\12\5\6\0"+
    "\2\5\25\0\14\5\1\272\10\5\1\0\12\5\6\0"+
    "\2\5\25\0\2\5\1\273\22\5\1\0\12\5\6\0"+
    "\2\5\25\0\10\5\1\274\14\5\1\0\12\5\6\0"+
    "\2\5\25\0\10\5\1\275\14\5\1\0\12\5\6\0"+
    "\2\5\25\0\25\5\1\0\7\5\1\276\2\5\64\0"+
    "\1\277\16\0\2\5\25\0\5\5\1\300\17\5\1\0"+
    "\12\5\6\0\2\5\25\0\1\301\24\5\1\0\12\5"+
    "\6\0\2\5\25\0\11\5\1\302\13\5\1\0\12\5"+
    "\6\0\2\5\25\0\13\5\1\303\11\5\1\0\12\5"+
    "\6\0\2\5\25\0\21\5\1\304\3\5\1\0\12\5"+
    "\6\0\2\5\25\0\1\305\24\5\1\0\12\5\6\0"+
    "\2\5\25\0\10\5\1\306\14\5\1\0\12\5\6\0"+
    "\2\5\25\0\16\5\1\307\6\5\1\0\12\5\6\0"+
    "\2\5\6\0\1\310\16\0\25\5\1\0\12\5\6\0"+
    "\2\5\25\0\15\5\1\311\7\5\1\0\12\5\6\0"+
    "\2\5\6\0\1\312\16\0\25\5\1\0\12\5\6\0"+
    "\2\5\6\0\1\313\16\0\25\5\1\0\12\5\6\0"+
    "\2\5\25\0\11\5\1\314\13\5\1\0\12\5\6\0"+
    "\2\5\25\0\14\5\1\315\10\5\1\0\12\5\6\0"+
    "\2\5\25\0\10\5\1\316\14\5\1\0\12\5\6\0"+
    "\2\5\25\0\16\5\1\317\6\5\1\0\12\5\6\0"+
    "\2\5\25\0\4\5\1\320\20\5\1\0\12\5\6\0"+
    "\2\5\25\0\24\5\1\321\1\0\12\5\6\0\2\5"+
    "\25\0\1\322\24\5\1\0\12\5\6\0\2\5\25\0"+
    "\4\5\1\323\4\5\1\324\6\5\1\325\4\5\1\0"+
    "\6\5\1\326\3\5\70\0\1\201\12\0\2\5\25\0"+
    "\21\5\1\327\3\5\1\0\12\5\6\0\2\5\25\0"+
    "\12\5\1\330\12\5\1\0\12\5\6\0\2\5\25\0"+
    "\13\5\1\331\11\5\1\0\12\5\6\0\2\5\25\0"+
    "\16\5\1\332\6\5\1\0\12\5\6\0\2\5\25\0"+
    "\7\5\1\333\15\5\1\0\12\5\6\0\2\5\25\0"+
    "\15\5\1\334\7\5\1\0\12\5\6\0\2\5\25\0"+
    "\7\5\1\335\15\5\1\0\12\5\6\0\2\5\25\0"+
    "\11\5\1\336\13\5\1\0\12\5\6\0\2\5\25\0"+
    "\1\5\1\337\23\5\1\0\12\5\6\0\2\5\6\0"+
    "\1\340\16\0\25\5\1\0\12\5\6\0\2\5\6\0"+
    "\1\341\16\0\25\5\1\0\12\5\6\0\2\5\6\0"+
    "\1\342\16\0\25\5\1\0\12\5\6\0\2\5\6\0"+
    "\1\343\16\0\25\5\1\0\12\5\6\0\2\5\25\0"+
    "\10\5\1\344\14\5\1\0\12\5\6\0\2\5\25\0"+
    "\16\5\1\345\6\5\1\0\12\5\6\0\2\5\25\0"+
    "\10\5\1\346\14\5\1\0\12\5\6\0\2\5\25\0"+
    "\21\5\1\347\3\5\1\0\12\5\6\0\2\5\25\0"+
    "\7\5\1\350\15\5\1\0\12\5\6\0\2\5\25\0"+
    "\10\5\1\351\14\5\1\0\12\5\6\0\2\5\6\0"+
    "\1\352\16\0\25\5\1\0\12\5\6\0\2\5\6\0"+
    "\1\353\16\0\25\5\1\0\12\5\6\0\2\5\6\0"+
    "\1\354\16\0\25\5\1\0\12\5\6\0\2\5\6\0"+
    "\1\355\16\0\25\5\1\0\12\5\6\0\2\5\25\0"+
    "\14\5\1\356\10\5\1\0\12\5\6\0\2\5\25\0"+
    "\14\5\1\357\10\5\1\0\12\5\6\0\2\5\25\0"+
    "\7\5\1\360\15\5\1\0\12\5\6\0\2\5\25\0"+
    "\20\5\1\361\4\5\1\0\12\5\6\0\2\5\25\0"+
    "\17\5\1\362\5\5\1\0\12\5\6\0\2\5\25\0"+
    "\7\5\1\363\15\5\1\0\12\5\6\0\2\5\25\0"+
    "\10\5\1\364\14\5\1\0\12\5\6\0\2\5\6\0"+
    "\1\365\16\0\25\5\1\0\12\5\6\0\2\5\25\0"+
    "\4\5\1\366\20\5\1\0\12\5\6\0\2\5\6\0"+
    "\1\367\16\0\25\5\1\0\12\5\6\0\2\5\25\0"+
    "\10\5\1\370\14\5\1\0\12\5\6\0\2\5\25\0"+
    "\16\5\1\371\6\5\1\0\12\5\6\0\2\5\6\0"+
    "\1\372\16\0\25\5\1\0\12\5\6\0\2\5\6\0"+
    "\1\373\16\0\25\5\1\0\12\5\6\0\2\5\6\0"+
    "\1\374\16\0\25\5\1\0\12\5\6\0\2\5\25\0"+
    "\17\5\1\375\5\5\1\0\12\5\6\0\2\5\6\0"+
    "\1\376\16\0\25\5\1\0\12\5\6\0\2\5\6\0"+
    "\1\377\16\0\25\5\1\0\12\5\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11224];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\5\1\7\11\6\1\1\11\23\1\5\11"+
    "\2\1\1\11\1\1\1\0\12\11\36\1\3\0\41\1"+
    "\1\11\1\0\1\11\2\1\1\11\1\1\1\11\11\1"+
    "\1\11\5\1\1\11\6\1\1\11\5\1\1\0\1\1"+
    "\1\11\3\1\1\11\23\1\1\0\10\1\1\11\1\1"+
    "\2\11\24\1\4\11\6\1\4\11\7\1\1\11\1\1"+
    "\1\11\2\1\3\11\1\1\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FormulaEngineLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 88: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 89: break;
          case 3: 
            { return FormulaEngineElementTypes.IDENTIFIER;
            } 
            // fall through
          case 90: break;
          case 4: 
            { return FormulaEngineElementTypes.NUMBER_INTEGER;
            } 
            // fall through
          case 91: break;
          case 5: 
            { return FormulaEngineElementTypes.SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 92: break;
          case 6: 
            { return FormulaEngineElementTypes.DOUBLE_QUOTED_STRING;
            } 
            // fall through
          case 93: break;
          case 7: 
            { return FormulaEngineElementTypes.OPERATOR_DIVIDE;
            } 
            // fall through
          case 94: break;
          case 8: 
            { return FormulaEngineElementTypes.OPERATOR_MULTIPLY;
            } 
            // fall through
          case 95: break;
          case 9: 
            { return FormulaEngineElementTypes.LEFT_PARENTHESIS;
            } 
            // fall through
          case 96: break;
          case 10: 
            { return FormulaEngineElementTypes.RIGHT_PARENTHESIS;
            } 
            // fall through
          case 97: break;
          case 11: 
            { return FormulaEngineElementTypes.LEFT_CURLY_BRACE;
            } 
            // fall through
          case 98: break;
          case 12: 
            { return FormulaEngineElementTypes.RIGHT_CURLY_BRACE;
            } 
            // fall through
          case 99: break;
          case 13: 
            { return FormulaEngineElementTypes.LEFT_BRACKET;
            } 
            // fall through
          case 100: break;
          case 14: 
            { return FormulaEngineElementTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 101: break;
          case 15: 
            { return FormulaEngineElementTypes.OPERATOR_ASSIGNMENT;
            } 
            // fall through
          case 102: break;
          case 16: 
            { return FormulaEngineElementTypes.MINUS;
            } 
            // fall through
          case 103: break;
          case 17: 
            { return FormulaEngineElementTypes.OPERATOR_GREATERTHAN;
            } 
            // fall through
          case 104: break;
          case 18: 
            { return FormulaEngineElementTypes.OPERATOR_PLUS;
            } 
            // fall through
          case 105: break;
          case 19: 
            { return FormulaEngineElementTypes.OPERATOR_LESSTHAN;
            } 
            // fall through
          case 106: break;
          case 20: 
            { return FormulaEngineElementTypes.OPERATOR_MODULO;
            } 
            // fall through
          case 107: break;
          case 21: 
            { return FormulaEngineElementTypes.OPERATOR_NEGATION;
            } 
            // fall through
          case 108: break;
          case 22: 
            { return FormulaEngineElementTypes.COMMA;
            } 
            // fall through
          case 109: break;
          case 23: 
            { return FormulaEngineElementTypes.SEMICOLON;
            } 
            // fall through
          case 110: break;
          case 24: 
            { return FormulaEngineElementTypes.COLON;
            } 
            // fall through
          case 111: break;
          case 25: 
            { return FormulaEngineElementTypes.QUESIONMARK;
            } 
            // fall through
          case 112: break;
          case 26: 
            { return FormulaEngineElementTypes.LINE_COMMENT;
            } 
            // fall through
          case 113: break;
          case 27: 
            { return FormulaEngineElementTypes.OPERATOR_AND;
            } 
            // fall through
          case 114: break;
          case 28: 
            { return FormulaEngineElementTypes.OPERATOR_EQUAL;
            } 
            // fall through
          case 115: break;
          case 29: 
            { return FormulaEngineElementTypes.OPERATOR_SUBTRACTASSIGNMENT;
            } 
            // fall through
          case 116: break;
          case 30: 
            { return FormulaEngineElementTypes.OPERATOR_DECREMENT;
            } 
            // fall through
          case 117: break;
          case 31: 
            { return FormulaEngineElementTypes.OPERATOR_GREATERTHANEQUAL;
            } 
            // fall through
          case 118: break;
          case 32: 
            { return FormulaEngineElementTypes.OPERATOR_ADDASSIGNMENT;
            } 
            // fall through
          case 119: break;
          case 33: 
            { return FormulaEngineElementTypes.OPERATOR_INCREMENT;
            } 
            // fall through
          case 120: break;
          case 34: 
            { return FormulaEngineElementTypes.OPERATOR_LESSTHANEQUAL;
            } 
            // fall through
          case 121: break;
          case 35: 
            { return FormulaEngineElementTypes.OPERATOR_NOTEQUAL;
            } 
            // fall through
          case 122: break;
          case 36: 
            { return FormulaEngineElementTypes.OPERATOR_OR;
            } 
            // fall through
          case 123: break;
          case 37: 
            { return FormulaEngineElementTypes.KEYWORD_OR;
            } 
            // fall through
          case 124: break;
          case 38: 
            { return FormulaEngineElementTypes.KEYWORD_DO;
            } 
            // fall through
          case 125: break;
          case 39: 
            { return FormulaEngineElementTypes.KEYWORD_IF;
            } 
            // fall through
          case 126: break;
          case 40: 
            { return FormulaEngineElementTypes.KEYWORD_AND;
            } 
            // fall through
          case 127: break;
          case 41: 
            { return FormulaEngineElementTypes.KEYWORD_ANY;
            } 
            // fall through
          case 128: break;
          case 42: 
            { return FormulaEngineElementTypes.KEYWORD_FOR;
            } 
            // fall through
          case 129: break;
          case 43: 
            { return FormulaEngineElementTypes.KEYWORD_SEQ;
            } 
            // fall through
          case 130: break;
          case 44: 
            { return FormulaEngineElementTypes.BUILT_IN_VAR_NA;
            } 
            // fall through
          case 131: break;
          case 45: 
            { return FormulaEngineElementTypes.BLOCK_COMMENT;
            } 
            // fall through
          case 132: break;
          case 46: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_LEN;
            } 
            // fall through
          case 133: break;
          case 47: 
            { return FormulaEngineElementTypes.KEYWORD_LIST;
            } 
            // fall through
          case 134: break;
          case 48: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_OUT;
            } 
            // fall through
          case 135: break;
          case 49: 
            { return FormulaEngineElementTypes.KEYWORD_CASE;
            } 
            // fall through
          case 136: break;
          case 50: 
            { return FormulaEngineElementTypes.KEYWORD_DATE;
            } 
            // fall through
          case 137: break;
          case 51: 
            { return FormulaEngineElementTypes.KEYWORD_DICT;
            } 
            // fall through
          case 138: break;
          case 52: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_ELT;
            } 
            // fall through
          case 139: break;
          case 53: 
            { return FormulaEngineElementTypes.KEYWORD_ELSE;
            } 
            // fall through
          case 140: break;
          case 54: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_MAX;
            } 
            // fall through
          case 141: break;
          case 55: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_STR;
            } 
            // fall through
          case 142: break;
          case 56: 
            { return FormulaEngineElementTypes.VISIBILITY_LOCAL;
            } 
            // fall through
          case 143: break;
          case 57: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_LOAD;
            } 
            // fall through
          case 144: break;
          case 58: 
            { return FormulaEngineElementTypes.KEYWORD_BREAK;
            } 
            // fall through
          case 145: break;
          case 59: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DATE;
            } 
            // fall through
          case 146: break;
          case 60: 
            { return FormulaEngineElementTypes.KEYWORD_FLOAT;
            } 
            // fall through
          case 147: break;
          case 61: 
            { return FormulaEngineElementTypes.KEYWORD_WHILE;
            } 
            // fall through
          case 148: break;
          case 62: 
            { return FormulaEngineElementTypes.VISIBILITY_GLOBAL;
            } 
            // fall through
          case 149: break;
          case 63: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_NA;
            } 
            // fall through
          case 150: break;
          case 64: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_FLOAT;
            } 
            // fall through
          case 151: break;
          case 65: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_FIRST;
            } 
            // fall through
          case 152: break;
          case 66: 
            { return FormulaEngineElementTypes.KEYWORD_RETURN;
            } 
            // fall through
          case 153: break;
          case 67: 
            { return FormulaEngineElementTypes.KEYWORD_STRING;
            } 
            // fall through
          case 154: break;
          case 68: 
            { return FormulaEngineElementTypes.KEYWORD_SWITCH;
            } 
            // fall through
          case 155: break;
          case 69: 
            { return FormulaEngineElementTypes.KEYWORD_DEFAULT;
            } 
            // fall through
          case 156: break;
          case 70: 
            { return FormulaEngineElementTypes.KEYWORD_INTEGER;
            } 
            // fall through
          case 157: break;
          case 71: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_REMOVE;
            } 
            // fall through
          case 158: break;
          case 72: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_STATUS;
            } 
            // fall through
          case 159: break;
          case 73: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_STRING;
            } 
            // fall through
          case 160: break;
          case 74: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_KERNEL;
            } 
            // fall through
          case 161: break;
          case 75: 
            { return FormulaEngineElementTypes.KEYWORD_DATETIME;
            } 
            // fall through
          case 162: break;
          case 76: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DAYDIFF;
            } 
            // fall through
          case 163: break;
          case 77: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DAYPLUS;
            } 
            // fall through
          case 164: break;
          case 78: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_INTEGER;
            } 
            // fall through
          case 165: break;
          case 79: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_LIST;
            } 
            // fall through
          case 166: break;
          case 80: 
            { return FormulaEngineElementTypes.KEYWORD_FUNCTION;
            } 
            // fall through
          case 167: break;
          case 81: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_DATETIME;
            } 
            // fall through
          case 168: break;
          case 82: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_GET;
            } 
            // fall through
          case 169: break;
          case 83: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_PUT;
            } 
            // fall through
          case 170: break;
          case 84: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_ATTRIBUTE;
            } 
            // fall through
          case 171: break;
          case 85: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_IS_STRING;
            } 
            // fall through
          case 172: break;
          case 86: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_KEYS;
            } 
            // fall through
          case 173: break;
          case 87: 
            { yypushback(1); return FormulaEngineElementTypes.BUILT_IN_FUNC_HASH_ISKEY;
            } 
            // fall through
          case 174: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
